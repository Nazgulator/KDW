using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using KDW.Models;
using MessagingToolkit.QRCode.Codec;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using KDW.Filters;
using System.Runtime;
using System.Globalization;
using System.Text;
using System.Runtime.InteropServices;



namespace KDW.Controllers
{
    [Culture]
    public class POOrderEntriesController : Controller
    {
        private KingDeeDB db = new KingDeeDB();
        private AIS20141015154903Entities ProdDB = new AIS20141015154903Entities();

        [Culture]
        public ActionResult Nomenklaturs(string Number)
        {

            CurrentUser();
         
            return View();
        }

        public ActionResult OtchetKomplektovkaZadaniy (bool today = true, bool tomorrow = false)
        {
            DateTime D = DateTime.Now.Date;
            var UserDepartments = FindCurrentDepartmentIdArray();

            List<PlanoviWorks> PW = new List<PlanoviWorks>();
            List<WorkView> Works = new List<WorkView>();
            List<int> AllWorks = new List<int>();
            if (today)
            {
                try
                {
                   PW =  db.PlanoviWorks.Where(x => x.Date == D).ToList();
                    AllWorks.AddRange(PW.Select(x => x.WorkId));
                }
                catch
                {

                }
            }
            if (tomorrow)
            {
                try
                {
                    DateTime DD = D.AddDays(1);
                    PW = db.PlanoviWorks.Where(x => x.Date == D).ToList();
                    AllWorks.AddRange(PW.Select(x => x.WorkId));
                }
                catch
                {

                }
            }
            AllWorks = AllWorks.Distinct().ToList();

            foreach (var w in AllWorks)
            {
                decimal QTY =   PW.Where(x => x.WorkId == w).Sum(x => x.QTY);
                if (QTY > 0)
                {
                    PlanoviWorks NPW = new PlanoviWorks();
                    WorkView WV = new WorkView();
                    WV.WORK = db.ICMO.Where(x => x.FInterID == w).First();
                    if (UserDepartments.Contains(WV.WORK.FWorkShop.Value)==false)
                    {
                        continue;
                    }
                    List<BomEntry> BE = new List<BomEntry>();
                    try
                    {
                       WV.Planshet = db.StarMehWorks.Where(x => x.WorkId == w && x.DateStart >= D && x.PlanshetId > 0).Include(x => x.ComputerNames).Select(x=>x.ComputerNames).First();
                    }
                    catch
                    {
                        WV.Planshet = null;
                    }


                    BE = FindBOMSFromWork(w, 0, true, true, "Отчет комплектование заданий");
                    decimal CINQTY = FindCINQTY(w, true);
                    foreach (var be in BE)
                    {
                        be.NugnoVipustitSegodnya = Convert.ToInt32(Math.Round(QTY, 0) - CINQTY);
                        

                    }
                    WV.BOMEntrys.AddRange(BE);
                    

                    Works.Add(WV);
                }
            }


            return View(Works);
        }



        public ActionResult NomenklatursTable(string Number="", int StockId =0 )
        {
            //string Number = "";
            Session["Dvigenie"] = null;
            DateTime Date = DateTime.Now.AddMonths(-6);
            List<ICInventory> Inventory = new List<ICInventory>();
            int OldId = 0;

            if (StockId > 0 && Number.Equals("") == false)
            {
                try
                {
                    Inventory = db.ICInventory.Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Where(x => x.FQty!=0&& x.FStockID == StockId && x.t_Item.FNumber.Contains(Number)).Include(x => x.t_Stock).OrderBy(x => x.t_Item.FNumber).ToList();//.Where(x => x.t_Stock.FProperty == 10)
                }
                catch
                {

                }
            }
            else
            {
                if (StockId == 0 && Number.Equals("") == false)
                {
                    try
                    {
                        Inventory = db.ICInventory.Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Where(x => x.FQty != 0 && x.t_Item.FNumber.Contains(Number)).Include(x => x.t_Stock).OrderBy(x => x.t_Item.FNumber).ToList();//.Where(x => x.t_Stock.FProperty == 10)
                    }
                    catch
                    {

                    }
                }
                else
                {
                    if (StockId > 0 && Number.Equals("") == true)
                    {
                        try
                        {
                            Inventory = db.ICInventory.Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Where(x => x.FQty != 0 && x.FStockID == StockId).Include(x => x.t_Stock).OrderBy(x => x.t_Item.FNumber).ToList();//.Where(x => x.t_Stock.FProperty == 10)
                        }
                        catch
                        {

                        }
                    }
                }
            }

            /*
            if (Number != "")
            {
                try
                {
                    Inventory = db.ICInventory.Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Where(x => x.t_Item.FNumber.Contains(Number)).Include(x => x.t_Stock).OrderBy(x => x.t_Item.FNumber).ToList();//.Where(x => x.t_Stock.FProperty == 10)
                }
                catch
                {

                }
              

            }
            */

            foreach (var i in Inventory)
            {
                //Переводим если Русский

                if (CultureRU())
                {
                    i.t_Item = PerevestiItem(i.t_Item);
                }
                //Ищем задания на пр-во
                /*   if (OldId!= i.t_Item.FItemID)
                   try
                   {
                               List<ICMO> X = db.ICMO.Where(x => x.FQty != x.FCommitQty && x.FPlanCommitDate >= Date).Include(x => x.t_Item).Include(x => x.t_Item.PPBOM).ToList();
                               foreach (var xx in X)
                               {
                                   foreach (var xxx in xx.PPBOM)
                                   i.t_Item.FLevel = X;
                               }
                   }
                   catch
                   {

                   }
                       OldId = i.t_Item.FItemID;
                */
            }

            return View(Inventory);
        }


        public ActionResult Postuplenies()
        {
            return View();
        }

        public ActionResult PostupleniesMenu()
        {
            DateTime Date = DateTime.Now.AddMonths(-6);
            return View();
        }

        public ActionResult PostupleniesTable()
        {
            DateTime Date = DateTime.Now.AddDays(-30).Date;
            List<ICStockBillEntry> E = new List<ICStockBillEntry>();
            try
            {

                List<string> FBIlls = db.Dvigenie.Where(x => x.Date >= Date && (x.FBillNo.Contains("WIN") || x.FBillNo.Contains("JIN")) && x.Work.Contains("STORNO") == false && x.Otmena == false).Select(x => x.FBillNo).ToList();
                var S = db.ICStockBill.Where(x => FBIlls.Contains(x.FBillNo));

                E = db.ICStockBillEntry.Include(x => x.ICStockBill).Include(x => x.ICStockBill).Include(x => x.POOrder).Include(x => x.POOrder.t_Supplier).Include(x => x.t_StockTo).Include(x => x.t_Item).Where(x => FBIlls.Contains(x.ICStockBill.FBillNo)).OrderByDescending(x => x.ICStockBill.FDate).ToList();
            }
            catch (Exception e)
            {

            }
            return View(E);
        }

        public ActionResult NomenklatursMenu()
        {


            DateTime Date = DateTime.Now.AddMonths(-6);
            ViewBag.Stocks = SearchStorages("", false,true, false, false, false, true,true);
            //  List<string> Inventory = db.ICInventory.Include(x => x.t_Item).Select(x=>x.t_Item.FNumber).OrderBy(x => x).Distinct().ToList();
            return View();
        }

        // GET: POOrderEntries
        [Culture]
        public ActionResult Index()
        {

            CurrentUser();
            DateTime Date = DateTime.Now.AddMonths(-6);
            var pOOrderEntry = db.POOrderEntry.Where(x => x.FDate >= Date && x.FQty != x.FCommitQty).OrderByDescending(x => x.FDate).Include(p => p.POOrder).Include(p => p.t_Item).Include(x => x.POOrder.t_Supplier).ToList();


            AutocompleteSearchStorage("");
            AutocompleteSearchUser("");
            AutocompleteSearchDepartment("");



            return View(pOOrderEntry.ToList());
        }


        public List<PlanoviView> WorksNeedToday(int ItemId)
        {
            //List<string> Works = new List<string>();
            DateTime D = DateTime.Now.Date;
            List<StarMehWorks> SW = new List<StarMehWorks>();
            List<PlanoviView> PW = new List<PlanoviView>();
            t_Item I = new t_Item();
            try
            {
                I = db.t_Item.Where(x => x.FItemID == ItemId).First();
            }
            catch
            {

            }


            try
            {
                SW = db.StarMehWorks.Where(x => x.DateStart == D).ToList();
            }
            catch
            {

            }

            foreach (StarMehWorks S in SW)
            {
                try
                {
                    PPBOMEntry E = db.PPBOMEntry.Where(x => x.FICMOInterID == S.WorkId && x.FItemID == ItemId).First();
                    PlanoviView P = new PlanoviView();
                    P.Item = I;
                    P.SW = S;
                    P.Work = S.ICMO;
                    P.QTY = S.QTY * E.FQtyScrap;
                    P.QTYFact = S.QTYFact * E.FQtyScrap + E.FWIPQTY.Value;
                    P.rashod = E.FQtyScrap;
                    if (P.QTY > P.QTYFact)
                    {
                        PW.Add(P);
                    }

                }
                catch
                {

                }
            }

            return PW;
        }
        
        public ProverkaOTK FindProverkaOTK(string QRData)
        {
            ProverkaOTK Result = new ProverkaOTK();

            try
            {
                Result = db.ProverkaOTK.Where(x => x.QRString == QRData).Include(x=>x.StatusOTK).First();
                if (CultureRU())
                {
                    Result.StatusOTK.NameZh = Result.StatusOTK.NameRu;
                }
            }
            catch
            {

            }

            return Result;
        }

        public JsonResult ConvertQR(string QRData)
        {
          string  QRDataNew = QRtoNEWQR(QRData).QRString;
            RedirectToAction("ScanirovanieQR", new { QRData = QRDataNew });
            return Json("False", JsonRequestBehavior.AllowGet);
        }

        public DvigenieNEW QRtoNEWQR(string QRData)
        {
           
            ItemView Q = new ItemView();
            DvigenieNEW NDvig = new DvigenieNEW();
            Q = FindQRScan(QRData);
            if (Q.LastDvig.FBillNo.Contains("SOUT") == false) // && Q.Z.FBillNo.Contains("POORD000022") == false
            {
                decimal PurchasePrice = FindPrice(Q.LastDvig);

                 NDvig = CreateNewQRCode(Q.LastDvig.FBillNo, Q.LastDvig.ItemID, Q.LastDvig.StockId, Q.LastDvig.QTYFact, Q.LastDvig.FBillNo, PurchasePrice, Q.Z.SupplierId, Q.Z.SupplierName, Q.LastDvig.StockId, 0, 0, Q.LastDvig.Mnimoe, Q.LastDvig.Otmena);
               
                
                if (NDvig.Id>0)
                {
                    int C = FindLastStatusOTK(Q.LastDvig.Id);
                    AddProverkaOTK(NDvig.QRString, C);//Переносим статус ОТК
                    EditDvigenie(Q.LastDvig, 0,NDvig.QRString);//Обнуляем старый QR код чтобы записать в него новый 

                }
            }
            
            return NDvig;
        }

        //Ищем все работы на текущую дату
        public List<ICMO> FindCurrentWorks()
        {
            DateTime D = DateTime.Now.Date;
            List<ICMO> W = new List<ICMO>();
            List<int> Works = new List<int>();
            try
            {
               Works = db.StarMehWorks.Where(x => x.DateStart == D).Select(x=>x.WorkId).Distinct().ToList();
               W = db.ICMO.Where(x => Works.Contains(x.FInterID)&&x.FQty>x.FCommitQty).ToList();
            }
            catch
            {

            }
            return W;
        }

        public List<ICMO> FindCurrentWorksICMO(string WorkNumber = "", bool InWorks = true)
        {
            DateTime D = DateTime.Now.Date;
            List<ICMO> W = new List<ICMO>();
      
            try
            {
                if (InWorks)
                {
                    // Works = db.StarMehWorks.Where(x => x.DateStart == D).Select(x => x.WorkId).Distinct().ToList();
                    if (WorkNumber.Equals(""))
                    {
                        W = db.ICMO.Where(x => x.FQty > x.FCommitQty && x.FStatus == 1).ToList();
                    }
                    else
                    {
                        W = db.ICMO.Where(x => x.FBillNo.Contains(WorkNumber) && x.FQty > x.FCommitQty && x.FStatus == 1).ToList();
                    }
                }
                else
                { //Если нет ограничения по статусу В Работе
                    if (WorkNumber.Equals(""))
                    {
                        W = db.ICMO.OrderByDescending(x=>x.FInterID).Take(100).ToList(); 
                    }
                    else
                    {
                        W = db.ICMO.Where(x => x.FBillNo.Contains(WorkNumber) ).ToList();
                    }
                }
            }
            catch
            {

            }
            return W;
        }

        public decimal FindCINQTY(int WorkId, bool Today=false)
        {
            decimal result = 0;
            if (!Today)
            {
                try
                {
                    result = db.ICStockBillEntry.Where(x => x.FICMOInterID == WorkId).Include(x => x.ICStockBill).Where(x => x.ICStockBill.FTranType == 2).Sum(x => x.FQty);

                }
                catch
                {

                }
            }
            else
            {
                DateTime D = DateTime.Now.Date;
                try
                {
                    result = db.ICStockBillEntry.Where(x => x.FICMOInterID == WorkId).Include(x => x.ICStockBill).Where(x => x.ICStockBill.FTranType == 2 && x.ICStockBill.FCheckDate >= D).Sum(x => x.FQty);
                }
                catch
                {

                }
            }
            return result;
        }

        public decimal FindSOUTQTY(int ItemId, int WorkId)
        {
            decimal result = 0;
            try
            {
                result = db.ICStockBillEntry.Where(x => x.FICMOInterID == WorkId && x.FItemID == ItemId).Include(x => x.ICStockBill).Where(x => x.ICStockBill.FTranType == 24).Sum(x => x.FQty);

            }
            catch
            {

            }
            return result;
        }

        public decimal FindQTYInBIGCode(int ItemId, int BIGId)
        {
            decimal result = 0;
            try
            {
             
               
                    try
                    {
                        List<DvigenieNEW>  D = db.DvigenieNEW.Where(x => x.BigQR == BIGId && x.ItemID == ItemId).ToList();          
                        foreach (var d in D)
                        {
                            result += db.DvigenieNEW.Where(x => x.QRString == d.QRString).OrderByDescending(x => x.Id).Select(x => x.QTYFact).First();
                        }
                    }
                    catch
                    {

                    }
           

            }
            catch
            {

            }
            return result;
        }

        //Ищем бомы по работе
        public List<BomEntry> FindBOMSFromWork(int WorkId, int ItemId = 0, bool Fast = false, bool KingDee = false, string FromModule = "")
        {
            WorkView WW = new WorkView();
           // ICMO W = new ICMO();
           // List<PPBOMEntry> BOMS = new List<PPBOMEntry>();
            BigQR BQ = FindCurrentBigQR();
            try
            {
                  WW.WORK = db.ICMO.Where(x => x.FInterID == WorkId).First();
              
                    if (ItemId == 0)
                    {
                        WW.BE = db.PPBOMEntry.Where(x => x.FICMOInterID == WorkId).Include(x => x.t_Item).ToList();
                    }
                    else
                    {
                    WW.BE = db.PPBOMEntry.Where(x => x.FICMOInterID == WorkId && x.FItemID == ItemId).Include(x=>x.t_Item).ToList();
                    }
               
             
                foreach (var B in WW.BE)
                {
                    decimal EstVQR = 0;
                    BomEntry BE = new BomEntry();
                    BE.Item = B.t_Item;
                    // if (ItemId==0)
                    // {
                    if (BQ != null)
                    {
                        BE.ESTVQR = FindQTYInBIGCode(B.FItemID, BQ.Id);
                    }

                 //   EstVQR = FindQTYInBIGCode(B.FItemID, BQ.Id);
                   // }
                    if (!Fast)
                    {
                        //Сюда сохраняем сколько нужно доукомплектовать в задание
                      //  B.FQtyMust = Math.Ceiling(B.FQtyMust - FindCINQTY(WorkId) * B.FQtyScrap - FindSOUTQTY(WorkId, B.FItemID) );//Считаем сколько не хватает в WORK и округляем до 1


                        decimal QTYMUST = B.FQtyMust - B.FQty;
                        BE.QTYMUST = Math.Ceiling(B.FQtyMust - FindCINQTY(WorkId) * B.FQtyScrap );
                        BE.QTYFACT = FindSOUTQTY(WorkId, B.FItemID);
                        BE.QTYNEED = BE.QTYMUST - BE.QTYFACT;
                        BE.QTYNEEDQR = BE.QTYMUST - BE.QTYFACT - BE.ESTVQR;
                        BE.NZPQty = B.FWIPQTY.Value;
                        BE.QTYScrap = B.FQtyScrap;
                        BE.WORKID = WorkId;
                             
                        if (B.FQtyScrap <= 0)
                        {
                            BE.QTYScrap = 1;
                        }

                        BE.MognoVipustit = Convert.ToInt32( Math.Round(BE.NZPQty * BE.QTYScrap, 0));
                        SaveToDocLog(0, B.FItemID, FromModule + "Поиск потребности по " + WW.WORK.FBillNo + " FQTYMust(НужноВыпустить - Выпущено по документам CIN)*Расход =" + BE.QTYMUST + " - ПеремещеноПоДокументамSOUT=" + BE.QTYFACT + " - EstVQR=" + BE.ESTVQR + " Итого= " + QTYMUST, QTYMUST, 0, WorkId, "Пока не создан");



                        B.FQty = EstVQR;
                    }
                    else
                    {
                        if (!KingDee)
                        {
                            //Сюда сохраняем сколько нужно доукомплектовать в задание
                          //  B.FQtyMust = Math.Ceiling((WW.WORK.FQty - WW.WORK.FCommitQty) * B.FQtyScrap - B.FWIPQTY.Value -EstVQR);//Считаем сколько не хватает в WORK и округляем до 1
                          //  B.FQty = EstVQR;

                            decimal QTYMUST = B.FQtyMust - B.FQty;
                            BE.QTYScrap = B.FQtyScrap;
                            if (B.FQtyScrap <= 0)
                            {
                                BE.QTYScrap = 1;
                            }
                            BE.QTYMUST = Math.Ceiling((WW.WORK.FQty - WW.WORK.FCommitQty) * BE.QTYScrap);
                            BE.QTYFACT = B.FWIPQTY.Value;
                            BE.QTYNEED = BE.QTYMUST - BE.QTYFACT;
                            BE.QTYNEEDQR = BE.QTYMUST - BE.QTYFACT - BE.ESTVQR;
                            BE.NZPQty = B.FWIPQTY.Value;
                            BE.WORKID = WorkId;

                            BE.MognoVipustit = Convert.ToInt32(Math.Round(BE.NZPQty * B.FQtyScrap, 0));
                            SaveToDocLog(0, B.FItemID, FromModule + "Поиск потребности по " + WW.WORK.FBillNo + " FQTYMust(НужноВыпустить - Выпущено)*Расход =" + BE.QTYMUST + " - FQTY (FWIPQTY)=" + BE.QTYFACT + " - EstVQR=" + BE.ESTVQR + " Итого= " + QTYMUST, QTYMUST, 0, WorkId, "Пока не создан");

                        }

                        if (KingDee)
                        {
                            decimal QTYMUST = B.FQtyMust - B.FQty ;
                            BE.QTYMUST = B.FQtyMust;
                            BE.QTYFACT = B.FQty;
                            BE.QTYNEED = BE.QTYMUST - BE.QTYFACT;
                            BE.QTYNEEDQR = BE.QTYMUST - BE.QTYFACT - BE.ESTVQR;
                            BE.NZPQty = B.FWIPQTY.Value;
                            BE.QTYScrap = B.FQtyScrap;
                            BE.WORKID = WorkId;
                            if (B.FQtyScrap <= 0)
                            {
                                BE.QTYScrap = 1;
                            }

                            BE.QTYMUST = Math.Round(B.FQtyMust,3);
                            BE.QTYFACT = Math.Round(B.FQty,3);
                            BE.MognoVipustit = Convert.ToInt32(Math.Round(BE.NZPQty / BE.QTYScrap, 0));
                          
                            //Считаем сколько не хватает в WORK НЕ ОКРУГЛЯЕМ
                            SaveToDocLog(0, B.FItemID, FromModule+"Поиск потребности по "+WW.WORK.FBillNo +" FQTYMust="+ B.FQtyMust + " - FQTY="+B.FQty+" - EstVQR=" + BE.ESTVQR + " Итого= "+ QTYMUST, QTYMUST, 0, WorkId, "Пока не создан");
                           // B.FQtyMust = QTYMUST;
                           // B.FQty = EstVQR;
                        }
                    }

               
                    if (BE.QTYMUST < 0)
                    {
                        BE.QTYMUST = 0;
                    }
                    WW.BOMEntrys.Add(BE);

                }
            }
            catch
            {

            }
            return WW.BOMEntrys;
        }

        public List<PPBOMEntry> FindBOMS(int WorkId, int ItemId = 0, bool Fast = false)
        {
            //Просто ищем БОМы по ворку Быстро тогда считаем выпущенное кол-во обеспеченным, затем сравниваем Сколько нужно - выпущенное - НЗП . Если медленно то сравниваем все SOUT и все CIN
            ICMO W = new ICMO();
            List<PPBOMEntry> BOMS = new List<PPBOMEntry>();
         
            try
            {
                W = db.ICMO.Where(x => x.FInterID == WorkId).First();

                if (ItemId == 0)
                {
                    BOMS = db.PPBOMEntry.Where(x => x.FICMOInterID == WorkId).ToList();
                }
                else
                {
                    BOMS = db.PPBOMEntry.Where(x => x.FICMOInterID == WorkId && x.FItemID == ItemId).ToList();
                }


                foreach (var B in BOMS)
                {
                    decimal EstVQR = 0;
                   
                    if (!Fast)
                    {
                        //Сюда сохраняем сколько нужно доукомплектовать в задание
                        B.FQtyMust = Math.Ceiling(B.FQtyMust - FindCINQTY(WorkId) * B.FQtyScrap - FindSOUTQTY(WorkId, B.FItemID));//Считаем сколько не хватает в WORK и округляем до 1
                        B.FQty = EstVQR;
                    }
                    else
                    {
                        //Сюда сохраняем сколько нужно доукомплектовать в задание
                        B.FQtyMust = Math.Ceiling((B.FQtyMust - B.FQty));//Считаем сколько не хватает в WORK и округляем до 1
                        B.FQty = EstVQR;
                    }
                }
            }
            catch
            {

            }
            return BOMS;
        }

        public JsonResult AddToBigQR(string QRDATA, int WorkId)
        {

            string Result = "Ok;OK!";
            DvigenieNEW QR =  FindQRString(QRDATA);
            BigQR BIGQR = FindCurrentBigQR();
            if (BIGQR == null )
            {
                return Json("Error;未找到大二维码|Не_найден_BIGQR");
            }

            if (QR.BigQR != null)
            {
                return Json("Error;已关联大二维码|Код_уже_прикреплен!");
            }

            if (QRDATA.Contains("POORD")|| QRDATA.Contains("WW"))
            {
             
                    return Json("Error;二维码过时,请重新生成二维码|Это_старый_Код_Сгенерируйте_Новый");
                
            }

            try
            {
                var BOM = FindBOMSFromWork(WorkId, QR.ItemID, true,true, "Добавление в большой код").First();
                decimal QTYNeed = BOM.QTYNEEDQR;
                if (QTYNeed<=0)
                {
                    return Json("Error;此任务单不需要该编码|Номенклатура_не_нужна");
                }
                decimal QTYQR = QR.QTYFact;
                decimal QTYStock = QTYNaSklade(QR.StockId, QR.ItemID);
                string StockName = "";
                if (QTYStock <= 0)
                {
                    try
                    {
                        StockName = db.t_Stock.Where(x => x.FItemID == QR.StockId).Select(x=>x.FName).First();
                    }
                    catch
                    {

                    }
                    return Json("Error;无库存_"+ StockName + "_"+ QTYStock + "|Нет_На_Складе");
                }

                if (QTYStock< QTYQR)
                {
                    QTYQR = QTYStock;
                }
               
             
 

                int Parent = 0;
                DvigenieNEW ND = null;
                if (QTYNeed >= QTYQR)
                {
                    ND = QR;
                    QR = null;
                    //Не генерим новый код а просто фиксим
                }

                //Если в QR коде больше чем нужно то 
                if (QTYNeed < QTYQR)
                {
                    //генерим новый код родитель - этот
                    ND = CreateNewQRCode(QR.StartFBillNo, QR.ItemID, QR.StockId, QTYNeed, QR.CurrentFBillNo, QR.PurchasePrice, QR.PostavshikId, QR.Postavshik, QR.StockId, QR.Id, QR.Id, QR.Mnimoe, QR.Otmena);
                    var Prov = FindProverkaOTK(QR.QRString);
                    AddProverkaOTK(ND.QRString, Prov.Status);
                    EditDvigenieNEW(QR, QR.QTY - QTYNeed);

                }


                
                using (var db2 = new KingDeeDB())
                {
                    try
                    {
                        ND.BigQR = BIGQR.Id;
                        db.Entry(ND).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                    catch (Exception e)
                    {

                    }
                }

            }
            catch
            {
              
            }
            

            return Json(Result);
        }

        public List<DvigenieNEW> FindDvigeniesInBIGQR()
        {
            BigQR QR = FindCurrentBigQR();
            List<DvigenieNEW> BOMS = new List<DvigenieNEW>();
            List<DvigenieNEW> Result = new List<DvigenieNEW>();
            try
            {
                BOMS = db.DvigenieNEW.Where(x => x.BigQR == QR.Id).ToList();

                foreach (var B in BOMS)
                {
                    Result.Add(db.DvigenieNEW.Where(x => x.QRString == B.QRString).OrderByDescending(x => x.Id).First());
                }
            }
            catch
            {

            }
            return Result;
        }

        public ActionResult InBIGQR()
        {
         
            List<DvigenieNEW> Result = new List<DvigenieNEW>();
            Result =FindDvigeniesInBIGQR();
            return View(Result);
        }

        public ActionResult AddBigQRView()
        {

            return View();
        }

        public BigQR FindCurrentBigQR()
        {
            BigQR Result = null;
            if (Session["BIGQR"] != null)
            {
                Result = (BigQR)Session["BIGQR"];
            }
            else
            {

            }
            return Result;
        }

        [Culture]
        public ActionResult AddBigQRViewMenu(string WorkNumber="")
        {
            if (Session["BIGQR"]!=null)
            {
                BigQR BQ = (BigQR)Session["BIGQR"];
                int WorkId = BQ.WorkId.Value;
                ViewBag.CurrentWorkId = WorkId;
                var ICMO = db.ICMO.Where(x=>x.FInterID == WorkId).First();
                ViewBag.CurrentWork = ICMO.FBillNo;
                ViewBag.QRString = BQ.QRString;
               
                try
                {
                    var DS = db.DepartmentToStocks.Where(x => x.DepartmentId == ICMO.FWorkShop.Value && x.Main==true).Include(x => x.Stock).Include(x => x.MOL).ToList();
                    Dictionary<string, string> Dic = new Dictionary<string, string>();
                    List<string> Mols = new List<string>();
                    foreach (var ds in DS)
                    {
                        try
                        {
                            string StockName = "";
                            StockName = db.t_Stock.Where(x => x.FItemID == ds.BufferStockId).Select(x => x.FName).First();
                            Mols.AddRange(db.StocksMOL.Include(x => x.MOL).Where(x => x.FInterID.Value == ds.BufferStockId).Select(x => x.MOL).ToList());
                            Mols = Mols.Distinct().ToList();
                            Dic.Add(ds.BufferStockId.ToString(), StockName);
                        }
                        catch (Exception e)
                        {

                        }
                    }
             
                    ViewBag.Mols = Mols;
                    ViewBag.Stocks = Dic;
                   // ViewBag.Mols = DS.MOL.FName.ToString();
                }
                catch
                {

                }

       


            }
            else
            {
                ViewBag.CurrentWorkId = 0;
                ViewBag.CurrentWork = "";
                ViewBag.Stocks = SearchStorages("", true, true);

                ViewBag.Mols = SearchMOL();
                
            }
            Dictionary<int,string> W = FindCurrentWorksICMO(WorkNumber).ToDictionary(x=>x.FInterID,x=>x.FBillNo);
            ViewBag.Works = W;
  
            return View();
        }


        [Culture]
        public ActionResult SuperKomplektovkaMenu(string WorkNumber = "")
        {
           
          
            Dictionary<int, string> W = FindCurrentWorksICMO(WorkNumber, false).ToDictionary(x => x.FInterID, x => x.FBillNo);
            ViewBag.Works = W;
            return View();
        }

        [Culture]
        public ActionResult ProstavitCheckerMenu(string FBillNo = "")
        {
            ICStockBill S = new ICStockBill();
            List<string> MOLS = new List<string>();
            if (FBillNo.Equals("") == false)
            {
               S = db.ICStockBill.Where(x => x.FBillNo.Equals(FBillNo)).Include(x => x.ICStockBillEntry).First();
                foreach (var se in S.ICStockBillEntry)
                {
                    MOLS.Add(FindMOLstring(se.FSCStockID.ToString()));
                }
                
                ViewBag.Checker = MOLS;
            }

            return View(S);
        }

        [Culture]
        public ActionResult ProstavitCheckerTable()
        {

            return View();
        }


        [Culture]
        public ActionResult AddBigQRViewTable(int WorkId =0)
        {
            WorkView WW = new WorkView();
          //  List<PPBOMEntry> B = new List<PPBOMEntry>();
            BigQR BQ = FindCurrentBigQR();
          /*  if (Session["BIGQR"] != null)
            {
                BigQR BQ = (BigQR)Session["BIGQR"];
                WorkId = BQ.WorkId.Value;
            }
          */
            if (BQ!=null&&BQ.WorkId > 0)
            {
                 WW.BOMEntrys = FindBOMSFromWork(BQ.WorkId.Value,0,true, true, "Поиск потребности в Большом коде");
               
            }


            return View(WW.BOMEntrys);
        }

        [Culture]
        public ActionResult SuperKomplektovka(int WorkId = 0)
        {
            List<BomEntry> B = new List<BomEntry>();
            B = FindBOMSFromWork(WorkId, 0, true, true);

            return View(B);
        }


        [Culture]
        public ActionResult AddBigQRViewScan(string QRData=null, string STATUS="ERROR",string TEXT ="" )
        {
            DvigenieNEW D = null;
            if (QRData!=null)
            {
                 D = FindQRString(QRData);
                D.CurrentFBillNo = STATUS;
                D.StartFBillNo = TEXT;
                D.Work = "success";
               if (STATUS.Equals("ERROR"))
                {
                    D.Work = "danger";
                }
               
            }
           

            return View(D);
        }

        public int CreateBigQR(int WorkId, int CurrentStock)
        {
           
            int Id = 0;
            BigQR BQ = new BigQR();
            BQ.CurrentStock = CurrentStock;
            BQ.InNZP = false;
            BQ.WorkId = WorkId;
            BQ.QRString = "BIGQR;0;";
            BQ.Date = DateTime.Now;
            try
            {
                ICMO W = db.ICMO.Where(x => x.FInterID == WorkId).First();
                db.BigQR.Add(BQ);
                db.SaveChanges();

                BQ.QRString = "BIGQR;"+BQ.Id.ToString()+";"+W.FBillNo;
                db.Entry(BQ).State = EntityState.Modified;
                db.SaveChanges();

                Session["BIGQR"] = BQ;


                
            }
            catch (Exception e)
            {

            }
            return BQ.Id;
        }


        //Убирает запись из большого кода и выдает в печать 
        public JsonResult RemoveFromBIGQR(int DvigenieId)
        {
            string PrintQRString = "";
            BigQR BQ = FindCurrentBigQR();
            DvigenieNEW D = new DvigenieNEW();
            try
            {
                D =db.DvigenieNEW.Where(x => x.Id == DvigenieId).First();
                D = db.DvigenieNEW.Where(x => x.QRString.Equals(D.QRString) && x.BigQR == BQ.Id).First();
                D.BigQR = null;
                db.Entry(D).State = EntityState.Modified;
                db.SaveChanges();
                PrintQRString = D.QRString;
            }
            catch
            {

            }
            return Json(PrintQRString);
        }

        public ActionResult BIGQRScan (string QRData="")
        {
            if (QRData.Contains("BIGQR"))
            {
                try
                {
                    string[] S = QRData.Split(';');
                    int QRID = Convert.ToInt32(S[1]);
                    LoadBigQR(QRID);
                    //BigQR QR = db.BigQR.Where(x => x.Id == QRID).First();


                }
                catch
                {

                }
            }

            return RedirectToAction("AddBigQRView");
        }
        public JsonResult LoadBigQR(int QRId)
        {

            int Id = 0;
            BigQR BQ = new BigQR();
           
            try
            {
               BQ = db.BigQR.Where(x => x.Id == QRId).First();
                Session["BIGQR"] = BQ;

            }
            catch
            {

            }
            return Json("Ok");
        }



        public JsonResult ClearBigQR()
        {
            Session["BIGQR"] = null;
            return Json("Ok");
        }
        //
        //Завершение создания кода
        public JsonResult EndBigQR()
        {
            ClearBigQR();


            return Json("Ok");
        }

        public JsonResult NewEndBigQR(int WorkId, int StockId )
        {
            int Id = 0;
            if (Session["BIGQR"] == null)
            {
               Id = CreateBigQR(WorkId, StockId);
                return Json(Id);
            }
            else
            {
                EndBigQR();
                return Json("end");
            }
            return Json("Ok");
        }


      

        public JsonResult PeremestitFromBigQR( int BigQRId, int ToStockId, int ManagerId)
        {

            int Id = 0;
           
            try
            {
                List<DvigenieNEW> Dvigs = new List<DvigenieNEW>();
                Dvigs = db.DvigenieNEW.Where(x => x.BigQR == BigQRId).ToList();
                foreach (var x in Dvigs) 
               // string r = PeremeshenieSoSkladaNaSkladNEWServer(ToStockId, ManagerId, x.QTYFact, x.Id);

                db.SaveChanges();
            }
            catch
            {

            }

            return Json(Id);
        }

        public List<DvigeniesView> FindDvigeniesQR(string QRData, bool Last = false)
        {
            List<DvigeniesView> Result = new List<DvigeniesView>();
            List<DvigenieNEW> D = new List<DvigenieNEW>();
            DvigenieNEW Start = new DvigenieNEW();
            DvigenieNEW End = new DvigenieNEW();
            DvigenieNEW Parent = new DvigenieNEW();
            List<NZPNEW> NZP = new List<NZPNEW>();
            ProverkaOTK OTK = new ProverkaOTK();
            ZakazPostavshiku Z = new ZakazPostavshiku();
           

            try
            {
                if (!Last)
                {//Если ищем все движения
                    D = db.DvigenieNEW.Where(x => x.QRString.Equals(QRData)&&!x.Otmena).Include(x => x.t_Item).Include(x => x.StartWIN).Include(x => x.ICStockBill).Include(x => x.t_Item.NomenklaturaEnterprise).OrderBy(x => x.Id).ToList();
                }
                else
                {//Если ищем только последнее движение
                    
                    D.Add(db.DvigenieNEW.Where(x => x.QRString.Equals(QRData)&&!x.Otmena).Include(x => x.t_Item).Include(x => x.StartWIN).Include(x => x.ICStockBill).Include(x => x.t_Item.NomenklaturaEnterprise).OrderByDescending(x => x.Id).First());

                }
                t_Item I = new t_Item();


                if (D.Count > 0)
                {
                    Start = D.First();//Первое движение и будет откуда все началось

                    ICStockBill StartDoc = new ICStockBill();
                    ICStockBillEntry Zakaz = new ICStockBillEntry();
                    int ZakazPostavshika = 0;
                    try
                    {
                        StartDoc = db.ICStockBill.Where(x => x.FInterID == Start.StartFInterId).Include(x=>x.ICStockBillEntry).First();
                        Zakaz = StartDoc.ICStockBillEntry.Where(x => x.FItemID == Start.ItemID).First();
                        Z.FindEntries(Zakaz.FSourceInterId, Zakaz.FSourceBillNo, Zakaz.FSourceEntryID);
                    }
                    catch
                    {

                    }

                    
                    End = D.OrderByDescending(x => x.Id).First();
                    try
                    {
                        Parent = db.DvigenieNEW.Where(x => x.Id == Start.DvigenieParent).First();
                    }
                    catch
                    {

                    }

                    I = D.Select(x => x.t_Item).First();
                    I = PerevestiItem(I);

                    OTK = FindProverkaOTK(QRData);

                    foreach (var d in D)
                    {
                        DvigeniesView R = new DvigeniesView();
                        d.t_Item = I;
                        R.Dvig = d;
                        R.ProverkaOTK = OTK;
                        R.Start = Start;
                        R.End = End;
                        R.Parent = Parent;
                        R.Zakaz = Z;
                        List<DvigenieNEW> CH = new List<DvigenieNEW>();
                        try
                        {
                            CH = db.DvigenieNEW.Where(x => x.ItemID == d.ItemID && x.StartFInterId == d.StartFInterId && x.DvigenieParent == d.Id).Include(x => x.t_Item).Include(x => x.StartWIN).Include(x => x.ICStockBill).Include(x => x.t_Item.NomenklaturaEnterprise).ToList();
                            R.Childrens.AddRange(CH);
                        }
                        catch
                        {

                        }

                       

                        Result.Add(R);
                    }
                }

            }
            catch
            {

            }

            return Result;


        }

        public List<string> FindAllZakazes(int ItemId, int Month)
        {
            DateTime D = DateTime.Now.AddMonths(-Month);
            List<ZakazPostavshiku> AllZakazes = new List<ZakazPostavshiku>();
            List<string> Result = new List<string>();
            try
            {
               var Zak = db.POOrderEntry.Where(x => x.FItemID == ItemId).Include(x=>x.POOrder).Where(x=>x.POOrder.FDate>=D).ToList();
                foreach (var z in Zak)
                {
                    ZakazPostavshiku Z = new ZakazPostavshiku();
                    Z.ZakazId = z.FInterID;
                    Z.Tip = "POORD";
                    Z.POOrder = z.POOrder;
                    Result.Add(Z.POOrder.FBillNo);
                }
            }
            catch
            {

            }

            try
            {
                var Zak = db.ICSubContractEntry.Where(x => x.FItemID == ItemId).Include(x => x.ICSubContract).Where(x => x.ICSubContract.FDate >= D).ToList();
                foreach (var z in Zak)
                {
                    ZakazPostavshiku Z = new ZakazPostavshiku();
                    Z.ZakazId = z.FInterID;
                    Z.Tip = "WW";
                    Z.Subcontract = z.ICSubContract;
                    Result.Add(Z.Subcontract.FBillNo);
                }
            }
            catch
            {

            }
            Result = Result.Distinct().ToList();
            return Result;

        }
        public ActionResult QRScanNEW(string QRData)
        {
            List<DvigeniesView> Result = new List<DvigeniesView>();
            List<DvigenieNEW> D = new List<DvigenieNEW>();
            DvigenieNEW Start = new DvigenieNEW();
            DvigenieNEW End = new DvigenieNEW();
            DvigenieNEW Parent = new DvigenieNEW();
            ProverkaOTK OTK = new ProverkaOTK();
            List<string> AllZakazes = new List<string>();
            

            Result = FindDvigeniesQR(QRData);
            /*
                        try
                        {
                          D =  db.DvigenieNEW.Where(x => x.QRString.Equals(QRData)).Include(x=>x.t_Item).Include(x=>x.StartWIN).Include(x=>x.ICStockBill).Include(x=>x.t_Item.NomenklaturaEnterprise).OrderBy(x=>x.Id).ToList();
                            t_Item I = new t_Item();


                            if (D.Count > 0)
                            {
                                Start = D.First();//Первое движение и будет откуда все началось
                                End = D.OrderByDescending(x => x.Id).First();
                                try
                                {
                                    Parent = db.DvigenieNEW.Where(x => x.Id == Start.DvigenieParent).First();
                                }
                                }
                                catch
                                {

                                }

                                I = D.Select(x => x.t_Item).First();
                                I = PerevestiItem(I);

                                OTK = FindProverkaOTK(QRData);






                                foreach (var d in D)
                                {
                                    DvigeniesView R = new DvigeniesView();
                                    d.t_Item = I;
                                    R.Dvig = d;
                                    R.ProverkaOTK = OTK;
                                    R.Start = Start;
                                    R.End = End;
                                    R.Parent = Parent;

                                    List<DvigenieNEW> CH = new List<DvigenieNEW>();
                                    try
                                    {
                                        CH = db.DvigenieNEW.Where(x => x.ItemID == d.ItemID && x.StartFInterId == d.StartFInterId && x.DvigenieParent == d.Id).Include(x => x.t_Item).Include(x => x.StartWIN).Include(x => x.ICStockBill).Include(x => x.t_Item.NomenklaturaEnterprise).ToList();
                                        R.Childrens.AddRange(CH);
                                    }
                                    catch
                                    {

                                    }
                                    Result.Add(R);
                                }
                            }

                        }
                        catch
                        {

                        }
            */

            try
            {
                AllZakazes = FindAllZakazes(Result.First().Dvig.ItemID, 6);
            }
            catch
            {

            }
            try
            {
                AllZakazes.Add(Result.First().Zakaz.FBillNo);
            }
            catch
            {
                
            }

            ViewBag.Start = Result.First();
            ViewBag.End = Result.OrderByDescending(x=>x.Dvig.Id).First();
            ViewBag.Stocks = SearchStorages();
            ViewBag.QRData = QRData;
            ViewBag.Roles = FindCurrentRoles();
            ViewBag.StatusesOTK = GetStatusesOTK();
            ViewBag.AllZakazes = AllZakazes;
            return View(Result);
        }

        public RedirectToRouteResult ScanirovanieQR(string QRData)
        {
            string[] S = QRData.Split(';');
            if (S != null && S.Length > 0)
            {

                //Если это новое поступление на скулад от WIN
                string WIN = "";
               // List<DvigenieNEW> Dvigs = new List<DvigenieNEW>();
                WIN = S[0];
                if (WIN.Contains("WIN") || WIN.Contains("JIN") || WIN.Contains("QIN") || WIN.Contains("CHG") || WIN.Contains("CIN"))
                {
                   // Dvigs = db.DvigenieNEW.Where(x => x.StartFBillNo.Equals(WIN)).OrderByDescending(x => x.Id).ToList();
                    return RedirectToAction("QRScanNEW", "POOrderEntries", new { QRData = QRData });
                }
                else
                {
                  DvigenieNEW D =  FindQRString(QRData);
                    if (D.Id>0)
                    {
                      //  Dvigs = db.DvigenieNEW.Where(x => x.StartFInterId == D.StartFInterId).OrderByDescending(x => x.Id).ToList();
                        return RedirectToAction("QRScanNEW", "POOrderEntries", new { QRData = D.QRString });
                    }
                }

            }
            return RedirectToAction("QRScan", "POOrderEntries", new { QRData = QRData });
        }

        public DateTime ConvertDate(string Date)
        {
            DateTime D = DateTime.Now;
            try
            {
                D = Convert.ToDateTime(Date);
            }
            catch
            {

            }
            return D;
        }
        public List<DateTime> FindDates()
        {
            DateTime D = DateTime.Now.Date;
            DateTime T = DateTime.Now.Date.AddDays(1);
            List<DateTime> Dates = new List<DateTime>();
            Dates.Add(D);
            Dates.Add(T);


            return (Dates);
        
        }

        public List<string> FindDatesString()
        {
            DateTime D = DateTime.Now.Date;
            DateTime T = DateTime.Now.Date.AddDays(1);
            List<string> Dates = new List<string>();
            Dates.Add(D.ToString("yyyy-MM-dd"));
            Dates.Add(T.ToString("yyyy-MM-dd"));

            


            return (Dates);

        }

        public JsonResult SetSmenaPlan(int Chas, string Date, int QTY)
        {
            int PlanshetId = FindPlanshetId();
            DateTime D = ConvertDate(Date);
            List<SmenaHour> SH = new List<SmenaHour>();
            List<ChasSmeni> HH = new List<ChasSmeni>();
          

            try
            {
                HH = db.ChasSmeni.ToList();
                
            }
            catch
            {

            }
            decimal QTYSumm = 0;
            try
            {
                QTYSumm = db.StarMehWorks.Where(x => x.PlanshetId == PlanshetId && x.DateStart.Value == D.Date).Sum(x => x.QTY);
            }
            catch
            {

            }

            int Count = 0;
            try
            {
                SH = db.SmenaHour.Where(x => x.PlanshetId == PlanshetId && x.DateSmeni.Year == D.Year && x.DateSmeni.Month == D.Month && x.DateSmeni.Day == D.Day && x.ChasSmeni == Chas).ToList();
                Count = SH.Count();
            }
            catch
            {

            }

            int SummaBezH = 0;
            try
            {
              SummaBezH = db.SmenaHour.Where(x => x.PlanshetId == PlanshetId && x.DateSmeni.Year == D.Year && x.DateSmeni.Month == D.Month && x.DateSmeni.Day == D.Day && x.ChasSmeni != Chas).Sum(x => x.QTYPlan);

            }
            catch
            {

            }
            if (SummaBezH + QTY> QTYSumm)
            {
                return Json("");
            }

            if (Count == 0)
            {
                try
                {
                    SmenaHour H = new SmenaHour();
 
                    H.DateSmeni = D;
                    H.ChasSmeni = Chas;
                    H.PlanshetId = PlanshetId;
                    H.QTYDatchik = 0;
                    H.QTYFact = 0;
                    H.QTYPlan = QTY;
                    H.Opisanie = HH.Where(x => x.Hour == Chas).Select(x => x.Opisanie).First();
                    db.SmenaHour.Add(H);
                    db.SaveChanges();
                }
                catch (Exception e)
                {

                }
            }
            else
            {

                SmenaHour H = SH.First();
                H.QTYPlan = QTY;
                H.Opisanie = HH.Where(x => x.Hour == Chas).Select(x => x.Opisanie).First();
                try
                {
                    db.Entry(H).State = EntityState.Modified;
                    db.SaveChanges();
                }
                catch
                {

                }
            }
            return Json("");
        }

        public void SetAutoSmena(string D, int SmenaHours )
        {
            DateTime Date = new DateTime();
            if (D != null && D != "")
            {
                try
                {
                    Date = Convert.ToDateTime(D);
                }
                catch
                {

                }
            }
            List<ChasSmeni> CS = new List<ChasSmeni>();
            int PlanshetId = FindPlanshetId();
            List<SmenaHour> SH = new List<SmenaHour>();
            decimal QTY = 0;
            List<int> SmenaMinutes = new List<int>();
            if (SmenaHours ==8)
            {
                SmenaMinutes = db.ChasSmeni.Where(x => x.Hour >= 8 && x.Hour <= 19).Select(x=>x.Minutes.Value).ToList();//new List<int> {60,60,60,60,60,60,60,60,50,60,30 };
                CS = db.ChasSmeni.Where(x => x.Hour >= 8 && x.Hour <= 19).ToList();
            }
          
            if (SmenaHours == 10)
            {
                SmenaMinutes = db.ChasSmeni.Where(x => x.Hour >= 7 && x.Hour <= 20).Select(x => x.Minutes.Value).ToList();//new List<int> { 60, 60, 60, 50, 60, 0, 50, 60, 50, 60, 30,60,60 };
                CS = db.ChasSmeni.Where(x => x.Hour >= 7 && x.Hour <= 20).ToList();
            }
            decimal AllMinutes = SmenaMinutes.Sum();
            try
            {
                SH = db.SmenaHour.Where(x => x.PlanshetId == PlanshetId && x.DateSmeni.Year == Date.Year && x.DateSmeni.Month == Date.Month && x.DateSmeni.Day == Date.Day).ToList();
            if (SH.Count>0)
                {
                    foreach (var s in SH)
                    {
                        db.SmenaHour.Remove(s);
                        db.SaveChanges();
                    }
                }
            }
            catch
            {

            }
            try
            {
                QTY = db.StarMehWorks.Where(x => x.PlanshetId == PlanshetId && x.DateStart.Value == Date).Sum(x=>x.QTY);
            }
            catch
            {

            }
            if (QTY <= 0)
            {
                return;
            }

            decimal QTYinMinute = QTY / AllMinutes;
            int ToHour = SmenaMinutes.Count() -1;
            int counter = 0;

            List<ChasSmeni> HH = new List<ChasSmeni>();

            try
            {
                HH = db.ChasSmeni.ToList();
            }
            catch
            {

            }

            for (int i = 0; i < SmenaMinutes.Count(); i++)
            {
                int QTYInThisHour = Convert.ToInt32(Math.Round(SmenaMinutes[i]*QTYinMinute,0));
                if (i == ToHour)
                {
                    QTYInThisHour = Convert.ToInt32(QTY);
                }
                QTY -= QTYInThisHour;
                try
                {
                   // int Count = SH.Where(x => x.ChasSmeni == i).Count();
                  
                        SmenaHour H = new SmenaHour();
                        H.DateSmeni = Date;
                        H.ChasSmeni = CS[i].Hour.Value;
                        H.PlanshetId = PlanshetId;
                        H.QTYDatchik = 0;
                        H.QTYFact = 0;
                    H.Opisanie = CS[i].Opisanie;//HH.Where(x => x.Hour == i).Select(x => x.Opisanie).First();
                    H.QTYPlan = QTYInThisHour;
                      //  SH.Add(H);
                      try
                        {
                            db.SmenaHour.Add(H);
                            db.SaveChanges();
                        }
                        catch
                        {

                        }
                    
                }
                catch
                {

                }
                counter++;
            }
         
        }

        public List<ChasSmeni> FindChasSmeni()
        {
            List<ChasSmeni> HH = new List<ChasSmeni>();
            HH = db.ChasSmeni.ToList();
            return HH;
        }

  


        public List<SmenaHour> FindSmena(int PlanshetId, DateTime D)
        {
            List<SmenaHour> SH = new List<SmenaHour>();
            List<ChasSmeni> HH = new List<ChasSmeni>();
            try
            {
                SH = db.SmenaHour.Where(x => x.PlanshetId == PlanshetId && x.DateSmeni.Year == D.Year && x.DateSmeni.Month == D.Month && x.DateSmeni.Day == D.Day).ToList();
            }
            catch
            {

            }
            try
            {
                HH = FindChasSmeni();
            }
            catch
            {

            }
          

            for (int i =7; i<=20;i++)
            {

                try
                {
                  int Count =  SH.Where(x => x.ChasSmeni == i).Count();
                    if (Count==0)
                    {
                        SmenaHour H = new SmenaHour();
                        H.DateSmeni = D;
                        H.ChasSmeni = i;
                        H.PlanshetId = PlanshetId;
                        H.QTYDatchik = 0;
                        H.QTYFact = 0;
                        H.QTYPlan = 0;
                        H.Opisanie = HH.Where(x => x.Hour == i).Select(x => x.Opisanie).First();
                        SH.Add(H);
                    }
                    else
                    {
                        SmenaHour ss = SH.Where(x => x.ChasSmeni == i).First();
                        if (ss.Opisanie == null || ss.Opisanie.Equals(""))
                        {
                            ss.Opisanie = HH.Where(x => x.Hour == i).Select(x => x.Opisanie).First();
                        }
                    }
                }
                catch
                {

                }
            }
            return SH.OrderBy(x=>x.ChasSmeni).ToList();
        }

        public ActionResult SmenaToPlanshet(string Date)
        {
            int PlanshetId = FindPlanshetId();
            List<SmenaHour> SH = new List<SmenaHour>();
            List<StarMehWorks> SW = new List<StarMehWorks>();
            DateTime D = DateTime.Now;
            if (Date != null&&Date != "")
            {
                try
                {
                    D = Convert.ToDateTime(Date);
                }
                catch
                {

                }
            }
            

            SW = FindStarMechWorks(PlanshetId);
            ViewBag.Planshets = FindPlanshets();
            ViewBag.PlanQTY = SW.Sum(x => x.QTY);
            ViewBag.Dates = FindDatesString();
            ViewBag.Date = D.ToString("yyyy-MM-dd");
            ViewBag.PlanshetId = PlanshetId;
            ViewBag.Summa = SW.Sum(x => x.QTY);
            SH = FindSmena(PlanshetId,D.Date);
            return View(SH);
        }

        public List<SmenaHour> FindVipuskCINInHour(List<StarMehWorks>SW, List<SmenaHour> SH )
        {
           
            List<string> Works = SW.Select(x => x.WorkNumber).Distinct().ToList();
            List<DvigenieNEW> DvigeniesNEW = new List<DvigenieNEW>();
            List<Dvigenie> Dvigenies = new List<Dvigenie>();
            List<SmenaHour> Res = new List<SmenaHour>();
            int SS = 0;

            try
            {
                Dvigenies = db.Dvigenie.Where(x => Works.Contains(x.Work)).ToList();

                //&&x.Date.Value.Date == D&&x.Date.Value.Hour==Hour
            }
            catch
            {

            }

            try
            {
                DvigeniesNEW = db.DvigenieNEW.Where(x => Works.Contains(x.Work)).ToList();
            }
            catch
            {

            }

            foreach (var sh in SH)
            {
                sh.QTYFact = Convert.ToInt32(Dvigenies.Where(x => x.Date.Value.Hour == sh.ChasSmeni && x.Date.Value.Date == sh.DateSmeni).Sum(x=>x.QTY));
            }

            Res = SH;

            return Res;
        }

        public int ReplacePlanshet (int PlanshetId)
        {
            if (PlanshetId == 26)
            {
                PlanshetId = 101;
            }
            if (PlanshetId == 28)
            {
                PlanshetId = 102;
            }
            if (PlanshetId == 23)
            {
                PlanshetId = 103;
            }
           /* if (PlanshetId == 21)
            {
                PlanshetId = 104;
            }
           */
            return PlanshetId;
        }

        public int FindDatchikResult(int PlanshetId, in List<SmenaHour> SH)
        {
            DateTime D = DateTime.Now.Date;
            DateTime DT = DateTime.Now;
            int Res = 0;
            int Replace = 0;
            List<DateTime> HH = new List<DateTime>();
            // 18 мая перебили т.к. датчик выдает 101 вместо 21
            if (PlanshetId == 26 || PlanshetId == 28|| PlanshetId == 23)
            try
            {
                    HH.AddRange(db.wk_iot.Where(x => x.name == PlanshetId && x.generated_at >= D).Select(x => x.generated_at).ToList());
            }
            catch
            {

            }

            PlanshetId =ReplacePlanshet(PlanshetId);
            List<ChasSmeni> CS = FindChasSmeni();
            
            try
            {
                 HH.AddRange(db.wk_iot.Where(x => x.name == PlanshetId && x.generated_at >= D).Select(x =>  x.generated_at ).ToList());
                foreach (var sh in SH)
                {
                    ChasSmeni cs = CS.Where(x => x.Hour == sh.ChasSmeni).First();
                    DateTime FromD = new DateTime(D.Year, D.Month, D.Day, cs.SmenaFromHour, cs.SmenaFromMinute, 0);
                    DateTime ToD = new DateTime(D.Year, D.Month, D.Day, cs.SmenaToHour, cs.SmenaToMinute, 0);
                    //sh.QTYDatchik = HH.Where(x => x == sh.ChasSmeni).Count();
                    sh.QTYDatchik = HH.Where(x => x >= FromD && x< ToD ).Count();
                }
                Res = HH.Count();
            }
            catch
            {

            }
           
            return Res;
        }


        public ActionResult DayResult()
        {
            DayView Day = new DayView();
            int PlanshetId = FindPlanshetId();
            List<StarMehWorks> SW = new List<StarMehWorks>();
            DateTime D = DateTime.Now.Date;
            
            SW = FindStarMechWorks(PlanshetId);
            Day.SW = SW;
            Day.SH = FindSmena(PlanshetId,D);
            Day.SH = FindVipuskCINInHour(SW,Day.SH);
           // Day.SH = Day.SH.Where(x => x.QTYPlan > 0).ToList();
            FindDatchikResult(PlanshetId, in Day.SH);
            ViewBag.Planshets = FindPlanshets();
            ViewBag.PlanshetId = PlanshetId;
            return View(Day);
        }

        public int FindMonitorId()
        {
            int PlanshetId = 0;
            string PId = Request.UserHostAddress;
            try
            {
              PlanshetId = db.MonitorToLine.Where(x => x.MonitorIPAdress.Equals(PId)).Select(x=>x.PlanshetId).First();
                
                //Сохраняем выбранный планшет в сессию
                ComputerNames P = new ComputerNames();
                try
                {
                    P = db.ComputerNames.Where(x => x.Id == PlanshetId).First();
                }
                catch
                {

                }
                Session["Planshet"] = P; 
                
                   
               
            }
            catch
            {

            }
            return PlanshetId;
        }

        public ActionResult DayResultBlue()
        {
            DayView Day = new DayView();
            int PlanshetId = FindMonitorId();//Ищем какой планшет показывать по IP адресу // FindPlanshetId();
            List<StarMehWorks> SW = new List<StarMehWorks>();
            DateTime D = DateTime.Now.Date;
            SaveToDocLog(0, 0, "Строим отчет DaysResultBlue за "+D.ToString(), 0, 0, 0, "");
            SW = FindStarMechWorks(PlanshetId);
            SaveToDocLog(0, 0, "Найдены задания старшего мастера " + SW.Count(), 0, 0, 0, "");
            Day.SW = SW;
            Day.SH = FindSmena(PlanshetId, D);
            SaveToDocLog(0, 0, "Найдена смена " + Day.SH.Count(), 0, 0, 0, "");
            Day.SH = FindVipuskCINInHour(SW, Day.SH);
            SaveToDocLog(0, 0, "Найден выпуск этого часа " + Day.SH.Count(), 0, 0, 0, "");
            // Day.SH = Day.SH.Where(x => x.QTYPlan > 0).ToList();
            FindDatchikResult(PlanshetId, in Day.SH);
            SaveToDocLog(0, 0, "Найден результат датчика на планшет " + PlanshetId, 0, 0, 0, "");
            ViewBag.Planshets = FindPlanshets();
            SaveToDocLog(0, 0, "Сохранен список планшетов " + PlanshetId, 0, 0, 0, "");
            ViewBag.PlanshetId = PlanshetId;
            SaveToDocLog(0, 0, "Возвращаем выбранный планшет " + PlanshetId, 0, 0, 0, "");
            SaveToDocLog(0, 0, "Результат ОК передаем на монитор  " + PlanshetId, 0, 0, 0, "");
            return View(Day);
        }

        public ActionResult DayResultTZ()
        {
            DayView Day = new DayView();
            int PlanshetId = FindMonitorId();//FindPlanshetId();
            List<StarMehWorks> SW = new List<StarMehWorks>();
            DateTime D = DateTime.Now.Date;

            SW = FindStarMechWorks(PlanshetId);
            Day.SW = SW;
            Day.SH = FindSmena(PlanshetId, D);
            Day.SH = FindVipuskCINInHour(SW, Day.SH);
            // Day.SH = Day.SH.Where(x => x.QTYPlan > 0).ToList();
            FindDatchikResult(PlanshetId, in Day.SH);
            ViewBag.Planshets = FindPlanshets();
            return View(Day);
        }

        public List<StarMehWorks> FindStarMechWorks(int PlanshetId)
        {
            DateTime D = DateTime.Now.Date;
            DateTime T = DateTime.Now.AddDays(1).Date;
            List<StarMehWorks> SW = new List<StarMehWorks>();
            try
            {
                SW = db.StarMehWorks.Where(x => x.PlanshetId == PlanshetId && x.DateStart >= D && x.DateStart <= T).ToList();
            }
            catch
            {

            }

            return SW;
        }

        public JsonResult PlansInHour()
        {
            int QTY = 0;
            DateTime D = DateTime.Now.Date;
            DateTime T = DateTime.Now.AddDays(1).Date;
            int PlanshetId = FindPlanshetId();
            List<StarMehWorks> SW = new List<StarMehWorks>();
            int PlanQTY = 0;
            int FactQTY = 0;
            int FactHeight = 0;
            int MaxHeight = 500;
            int DatchikQTY = 0;
            int DatchikHeight = 0;


            try
            {
                SW = FindStarMechWorks(PlanshetId);
                QTY = Convert.ToInt32(Math.Round(SW.Sum(x => x.QTY),0));
                PlanQTY = QTY;
                FactQTY = Convert.ToInt32(Math.Round(SW.Sum(x => x.QTYFact), 0));
                FactHeight = Convert.ToInt32(Math.Round(Convert.ToDecimal(FactQTY) / Convert.ToDecimal(PlanQTY) * MaxHeight, 0));
                if (FactHeight > MaxHeight) { FactHeight = MaxHeight; }


            }
            catch
            {

            }
            //18 мая зафиксено так как Женя накосячил
            PlanshetId = ReplacePlanshet(PlanshetId);
            try
            {
                if (PlanshetId == 26 || PlanshetId == 28 || PlanshetId == 23)
                {
                    DatchikQTY += db.wk_iot.Where(x => x.name == PlanshetId && x.generated_at >= D).Count();
                }
                PlanshetId = ReplacePlanshet(PlanshetId);
                DatchikQTY += db.wk_iot.Where(x => x.name == PlanshetId && x.generated_at >= D).Count();
               
               
                DatchikHeight = Convert.ToInt32(Math.Round(Convert.ToDecimal(DatchikQTY) / Convert.ToDecimal(PlanQTY) * MaxHeight, 0));
                if (DatchikHeight > MaxHeight) { DatchikHeight = MaxHeight; }
            }
            catch
            {

            }

            if (FactHeight < 50)
            {
                FactHeight = 50;
            }

            if (DatchikHeight < 50)
            {
                DatchikHeight = 50;
            }

            return Json(PlanQTY+";"+FactQTY+";"+FactHeight+";"+DatchikQTY+";"+DatchikHeight);
        }

        public JsonResult CinsInHour()
        {
            int QTY = 0;
            DateTime D = DateTime.Now.Date;
            DateTime T = DateTime.Now.AddDays(1).Date;
            int PlanshetId = FindPlanshetId();
            List<StarMehWorks> SW = new List<StarMehWorks>();
            List<int> Works = new List<int>();
            try
            {
                SW = FindStarMechWorks(PlanshetId);
                QTY = Convert.ToInt32(Math.Round(SW.Sum(x=>x.QTYFact), 0));
              //  Works = SW.Select(x => x.WorkId).ToList();
              //  QTY = Convert.ToInt32(Math.Round(db.ICStockBillEntry.Where(x => Works.Contains(x.FICMOInterID)).Include(x => x.ICStockBill).Where(x => x.ICStockBill.FDate <= T && x.ICStockBill.FDate >= D).Sum(x=>x.FQty))) ;

                //  QTY = Convert.ToInt32(Math.Round(SW.Sum(x => x.QTY) / 10, 0));
            }
            catch
            {

            }

            return Json(QTY);
        }


        public JsonResult SetPlanshet(int PlanshetId)
        {
            ComputerNames P = new ComputerNames();
            try
            {
                P = db.ComputerNames.Where(x => x.Id == PlanshetId).First();
            }
            catch
            {

            }
           


            Session["Planshet"] = P;
            return Json("Ok");

        }



            public ItemView FindQRScan(string QRData)
        {
            ZakazPostavshiku Z = new ZakazPostavshiku();

            ItemView I = new ItemView();
            string[] S = QRData.Split(';');
      
           

            if (S != null && S.Length > 0)
            {


                    int POId = 1;
                int Lev = 1;
                string ZakazPostavshiku = "";
                string Nomenklatura = S[0];
                string Tip = "POORD";
                try
                {
                    POId = Convert.ToInt32(S[2]);
                    Lev = Convert.ToInt32(S[3]);
                    ZakazPostavshiku = S[1];
                    if (ZakazPostavshiku.Contains("WW"))
                    {
                        Tip = "WW";
                    }
                    if (ZakazPostavshiku.Contains("CIN"))
                    {
                        Tip = "CIN";
                    }
                }
                catch
                {

                }

                Z.FindEntries(POId, Tip, 0, Nomenklatura);

                I.Z = Z;
                try
                {//Состав Item.FNumber, QTY, POOrderId
                    I.ZakazPostavshiku = ZakazPostavshiku;
                    I.Lev = Lev;
                    I.Item = db.t_Item.Where(x => x.FNumber.Equals(Nomenklatura)).First();
                    //   I.POOrder = db.POOrder.Where(x => x.FInterID == POId).First();

                }
                catch (Exception e)
                {
                    //    I.Item = Z.SelectedEntry.Item;
                }

            }
            else
            {

            }

            I.FindDvigenies();
            if (CultureRU() == false)
            {
                try
                {
                    I.LastControl.StatusOTK.NameRu = I.LastControl.StatusOTK.NameZh;

                }
                catch
                {

                }
            }
            else
            {
                I.Item = PerevestiItem(I.Item);
            }

            try
            {
                ViewBag.WorksNeed = null;//WorksNeedToday(I.LastDvig.ItemID);
            }
            catch
            {

            }
            if (I.LastDvig.Id > 0)
            {
                Session["ItemView"] = I;
                Session["DvigenieNEW"] = null;
            }
            //   I.LastDvig = FindDvigenie(I.LastDvig.Id);
            return I;
        }


        public List<StatusOTK> GetStatusesOTK()
        {
            List<StatusOTK> Statuses = new List<StatusOTK>();
            if (Session["StatusesOTK"] != null)
            {
                Statuses = (List<StatusOTK>)Session["StatusesOTK"];
            }
            else
            {
                try
                {
                    Statuses = db.StatusOTK.ToList();

                    foreach (var s in Statuses)
                    {
                        if (CultureRU() == false)

                        {
                            s.NameRu = s.NameZh;
                        }
                        s.NameRu = s.Tip + " " + s.NameRu;
                    }
                    Session["StatusesOTK"] = (List<StatusOTK>)Statuses;
                }
                catch
                {

                }
            }

            return Statuses;
        }

        [Culture]

        public ActionResult QRScan(string QRData)
        {
            ItemView I = new ItemView();
            I = FindQRScan(QRData);
            SavePlanogrammaStock(I.Stock.FItemID);
            ViewBag.Stocks = SearchStorages();
            ViewBag.QRData = QRData;
            ViewBag.Roles = FindCurrentRoles();
            ViewBag.StatusesOTK = GetStatusesOTK();
            return View(I);
        }
        /*     public ActionResult QRScan(string QRData)
             {
                 ItemView I = new ItemView();

                 string[] S = QRData.Split(';');
                 if (S!=null&&S.Length > 0)
                 {
                     string partnumber = S[0].Replace(" ","");
                     string Order = S[4].Replace(" ", "");

                     try
                     {
                         int StockId = Convert.ToInt32(S[6]);
                         I.Stock = db.t_Stock.Where(x => x.FItemID == StockId).First();
                         I.Item = db.t_Item.Where(x => x.FNumber.Equals(partnumber)).Include(x=>x.NomenklaturaEnterprise).First();
                         I.QTY = Convert.ToDecimal(S[2]);
                         ViewBag.QTYNaSklade = QTYNaSklade(StockId,I.Item.FItemID);
                         if (Order.Contains("WORK"))
                         {
                             I.Work = db.ICMO.Where(x => x.FBillNo == Order).First();

                         }
                         if (Order.Contains("POORD"))
                         {
                             I.POOrder = db.POOrder.Where(x => x.FBillNo == Order).First();
                         }

                     }
                     catch (Exception e)
                     {
                         ViewBag.Message = e.Message;
                     }
                    I.Item =  PerevestiItem(I.Item);  
                 }


                 ViewBag.Stocks = SearchStorages();
                 return View(I);
             }
        */

        public t_Item PerevestiItem(t_Item I)
        {
            string RusName = "";
            if (CultureRU())
            {
                try
                {
                    RusName = I.NomenklaturaEnterprise.First().RusName;
                    if (RusName == null || RusName.Equals(""))
                    {
                        I.FName = I.FName;
                    }
                    else
                    {
                        I.FName = I.NomenklaturaEnterprise.First().RusName;
                    }
                }
                catch
                {
                    using (var db2 = new KingDeeDB())
                    {
                        try
                        {
                            RusName = db2.NomenklaturaEnterprise.Where(x => x.KingDeeId == I.FItemID).Select(x => x.RusName).First();
                            I.FName = RusName;
                        }
                        catch (Exception e)
                        {

                        }
                    }

                }
            }
            return (I);

        }

        public JsonResult PeremeshenieSoSklada(string Partnumber, decimal QTY, int SkladFrom, int SkladTo)
        {
            string Message = "Ok";



            return Json(Message);
        }


        [Culture]
        public ActionResult StornoPostupleniyaNaSklad(int DvigenieId)
        {

            ItemView I = new ItemView();
            if (DvigenieId != 0)
            {
                try
                {
                    I.LastDvig = FindDvigenie(DvigenieId);
                    I.Item = I.LastDvig.Item;
                    I.ZakazPostavshiku = I.LastDvig.ZakazPostavshiku;
                    I.QTY = I.LastDvig.QTYFact;
                    I.Lev = I.LastDvig.Lev;
                    I.StockOrDep = I.LastDvig.Stock;
                    if (CultureRU())
                    {
                        try
                        {
                            I.LastDvig.Stock.FName = I.LastDvig.Stock.StocksRusKit.First().FRusName;
                        }
                        catch
                        {

                        }
                    }
                }
                catch
                {

                }
            }

            I.Item = PerevestiItem(I.Item);
            ViewBag.Users = SearchMOLS(I.LastDvig.StockId.ToString());


            return View(I);
        }

        [Culture]
        public ActionResult StornoPeremesheniyeNaProizvodstvo(int DvigenieId)
        {

            ItemView I = new ItemView();
            if (DvigenieId != 0)
            {
                try
                {
                    I.LastDvig = FindDvigenie(DvigenieId);
                    I.Item = I.LastDvig.Item;
                    I.POOrder = I.LastDvig.POOrder;
                    I.QTY = I.LastDvig.QTYFact;
                    I.Lev = I.LastDvig.Lev;
                    I.StockOrDep = I.LastDvig.Stock;
                }
                catch
                {

                }
            }

            I.Item = PerevestiItem(I.Item);
            ViewBag.Users = SearchMOL();
            ViewBag.Stocks = SearchStorages();

            return View(I);
        }


        [Culture]
        public ActionResult PeremeshenieSoSkladaNaSkladQR(int DvigenieId, bool brak = false)
        {
            string a = CurrentUserNow();
            if (a.Equals(""))
            {
                return RedirectToAction("Login");
            }
            ItemView I = new ItemView();
            if (DvigenieId != 0)
            {
                try
                {
                    I.LastDvig = FindDvigenie(DvigenieId);
                    I.Item = I.LastDvig.Item;
                    I.POOrder = I.LastDvig.POOrder;
                    I.QTY = I.LastDvig.QTYFact;
                    I.Lev = I.LastDvig.Lev;
                    I.StockOrDep = I.LastDvig.Stock;
                }
                catch
                {

                }
            }



            I.Item = PerevestiItem(I.Item);
            if (!brak)
            {
                ViewBag.Stocks = SearchStorages();
            }
            else
            {
                Dictionary<string, string> StocksBrak = new Dictionary<string, string>();
                StocksBrak = SearchStorages("", false);
                /*   if (CultureRU())
                   {
                       StocksBrak = db.t_Stock.Where(x => x.FItemID == 3587 || x.FItemID == 9500 || x.FItemID == 19182 || x.FItemID == 19183 || x.FItemID == 23832 || x.FItemID == 19184 || x.FItemID == 12976).Include(x => x.StocksRusKit).ToDictionary(x => x.StocksRusKit.FirstOrDefault().FRusName, x => x.FItemID);//.Select(x => x.StocksRusKit.FirstOrDefault().FRusName)

                   }
                   else
                   {

                       StocksBrak = db.t_Stock.Where(x => x.FItemID == 3587 || x.FItemID == 9500 || x.FItemID == 19182 || x.FItemID == 19183 || x.FItemID == 23832 || x.FItemID == 19184 || x.FItemID == 12976).ToDictionary(x => x.FName, x => x.FItemID);//.Select(x => x.FName)

                   }
                */
                ViewBag.Stocks = StocksBrak;
            }
            ViewBag.Users = SearchMOL();
            ViewBag.Stends = new List<string>();

            return View(I);
        }

        [Culture]
        public ActionResult ICStockBill()
        {
            DateTime D = DateTime.Now.Date.AddDays(3);
            var result = db.ICStockBill.Where(x => x.FDate >= D && x.FBillNo.Contains("SOUT")).ToList();
            return View(result);
        }





        [Culture]
        public ActionResult PeremeshenieSoSkladaNaSkladNEW(int DvigenieId, bool brak = false)
        {
            int UserId = CurrentKDWUserModel().Id;
            if (UserId == 0)
            {
                return RedirectToAction("Login");
            }
            ItemView I = new ItemView();
            DvigenieNEW D = new DvigenieNEW();
            if (DvigenieId != 0)
            {
                try
                {
                   D = db.DvigenieNEW.Where(x => x.Id == DvigenieId).Include(x=>x.t_Stock).Include(x=>x.t_Item).First();
                }
                catch
                {

                }
            }



            D.t_Item = PerevestiItem(D.t_Item);
            if (!brak)
            {
                ViewBag.Stocks = SearchStorages("",false,true,true,true,false,false,true);
            }
            else
            {
                Dictionary<string, string> StocksBrak = new Dictionary<string, string>();

                StocksBrak = SearchStorages("", false);

                ViewBag.Stocks = StocksBrak;
            }


            List<DvigeniesView> Result = new List<DvigeniesView>();
            ViewBag.StatusesOTK = FindProverkaOTK(D.QRString);
            ViewBag.Users = SearchMOL();
            ViewBag.Stends = new List<string>();
            //ViewBag.Start = Result.First();
            return View(D);
        }

        public List<PlanoviWorks> FindPlanoviWorks(string Date = "")
        {
            DateTime D = DateTime.Now.Date;
            List<PlanoviWorks> PW = new List<PlanoviWorks>();
            if (Date == "")
            {

                try
                {
                    PW = db.PlanoviWorks.Where(x => x.Date == D).Include(x => x.ICMO).Include(x => x.ICMO.t_Department).Include(x => x.ICMO.PPBOMEntry).ToList();
                }
                catch
                {

                }
            }
            else
            {
                try
                {
                    D = Convert.ToDateTime(Date).Date;
                    PW = db.PlanoviWorks.Where(x => x.Date == D).Include(x => x.ICMO).Include(x => x.ICMO.t_Department).Include(x => x.ICMO.PPBOMEntry).ToList();
                }
                catch
                {

                }
            }

            return PW;
        }



        [Culture]
        public ActionResult PeremeshenieNaProizvodstvoQR(int DvigenieId)
        {
            string a = CurrentUserNow();
            if (a.Equals(""))
            {
                return RedirectToAction("Login");
            }
            DateTime D = DateTime.Now.AddMonths(-6);
            ItemView I = new ItemView();
            // List<PlanoviWorks> PW = FindPlanoviWorks();
            List<StarMehWorks> SW = FindStarMehWorks();
            if (DvigenieId != 0)
            {
                try
                {
                    I.LastDvig = FindDvigenie(DvigenieId);
                    I.Item = I.LastDvig.Item;
                    I.POOrder = I.LastDvig.POOrder;
                    I.QTY = I.LastDvig.QTYFact;
                    I.Lev = I.LastDvig.Lev;
                    I.StockOrDep = I.LastDvig.Stock;


                }
                catch
                {

                }

                try
                {

                    PPBOMEntry Entry = new PPBOMEntry();// db.PPBOMEntry.Where(x => x.FItemID == I.Item.FItemID && x.FQty < x.FQtyMust).Include(x=>x.PPBOM).ToList();


                    foreach (var E in SW)
                    {

                        try
                        {
                            Entry = db.PPBOMEntry.Where(x => x.FICMOInterID == E.WorkId && x.FItemID == I.LastDvig.ItemID).First();
                            if (E.QTY < E.QTYFact)
                            {
                                ItemToWork IW = new ItemToWork();

                                IW.QTY = E.QTY * Entry.FQtyScrap - Entry.FWIPQTY.Value * Entry.FQtyScrap;
                                IW.Work = E.WorkNumber;
                                I.ItemToWork.Add(IW);
                            }
                        }
                        catch
                        {

                        }





                    }
                    // List<PPBOM> Boms = db.PPBOM.Where(x => x.FDate >= D && x.FICMOBillNo != null).Include(x=>x.PPBOMEntry).ToList();

                    /*     foreach(PPBOMEntry e in Entrys)
                         {
                             if (e.PPBOM.FHeadSelfY0227 != null && e.PPBOM.FHeadSelfY0227 != "")
                             {
                                 ItemToWork IW = new ItemToWork();
                                 IW.QTY = e.FQtyMust - e.FQty;
                                 IW.Work = e.PPBOM.FHeadSelfY0227;
                                 I.ItemToWork.Add(IW);
                             }
                         }
                    */


                }
                catch
                {

                }
            }

            /*    if (ItemID != 0)
                {
                    try
                    {
                        I.Item = db.t_Item.Where(x => x.FItemID == ItemID).First();
                    }
                    catch
                    {

                    }

                }

                if (StockFrom != 0)
                {
                    try
                    {
                        I.Stock = db.t_Stock.Where(x => x.FItemID == StockFrom).First();
                        ViewBag.QTYNaSklade = QTYNaSklade(StockFrom, I.Item.FItemID);
                    }
                    catch
                    {

                    }
                }
            */
            decimal QTYVZakaze = 0;
            string KQR = "";
            if (I.ItemToWork.Count > 0)
            {
                QTYVZakaze = I.ItemToWork[0].QTY;
                GenerateKomplektovkaByWork(I.ItemToWork[0].Work);
                //    KQR= GenerateKomplektovkaString(I.Work.FInterID, 0, I.Work.t_Department.FItemID, 0, I.Work.FQty- I.Work.FCommitQty);

            }
            //    ViewBag.KQR = KQR;
            ViewBag.QTYVZakaze = QTYVZakaze;
            I.Item = PerevestiItem(I.Item);
            ViewBag.Stocks = SearchStorages();
            ViewBag.Users = SearchMOL();
            ViewBag.Departments = SearchDepartments();
            ViewBag.LiniiSborki = SearchLiniiSborki();

            return View(I);

        }

        public JsonResult GenerateKomplektovkaByWork(string Work)
        {
            string Result = "";
            try
            {
                ICMO W = db.ICMO.Where(x => x.FBillNo.Equals(Work)).First();
                string S = GenerateKomplektovkaString(W.FInterID, 0, W.FWorkShop.Value, 0, W.FQty - W.FCommitQty);
                NewKomplektovka(S);
                Result = "Ok";
            }
            catch (Exception e)
            {
                Result = e.Message;
            }
            return Json(Result);
        }

        public JsonResult SearchSborkaLine(int WorkId)
        {
            string Result = "";

            try
            {
                //         int Id =    db.ICMO.Where(x=>x.FInterID== WorkId).Select(x=>x.FHeadSelfB0436)
                //            FHeadSelfB0436
            }
            catch
            {

            }


            return Json(Result);
        }


        [Culture]
        public ActionResult PeremeshenieSoSkladaNaSklad(int ItemID, decimal QTY, int StockFrom)
        {
            string a = CurrentUserNow();
            if (a.Equals(""))
            {
                return RedirectToAction("Login");
            }
            ItemView I = new ItemView();
            if (ItemID != 0)
            {
                try
                {
                    I.Item = db.t_Item.Where(x => x.FItemID == ItemID).First();
                }
                catch
                {

                }

            }

            if (StockFrom != 0)
            {
                try
                {
                    I.Stock = db.t_Stock.Where(x => x.FItemID == StockFrom).First();
                    ViewBag.QTYNaSklade = QTYNaSklade(StockFrom, I.Item.FItemID);
                }
                catch
                {

                }
            }
            I.QTY = QTY;
            I.Item = PerevestiItem(I.Item);
            ViewBag.Stocks = SearchStorages();
            ViewBag.Users = SearchUsers();

            return View(I);
        }




        [Culture]
        public ActionResult PeremeshenieNaProizvodstvo(int ItemID, decimal QTY, int StockFrom)
        {
            string a = CurrentUserNow();
            if (a.Equals(""))
            {
                return RedirectToAction("Login");
            }
            ItemView I = new ItemView();
            if (ItemID != 0)
            {
                try
                {
                    I.Item = db.t_Item.Where(x => x.FItemID == ItemID).First();
                }
                catch
                {

                }

            }

            if (StockFrom != 0)
            {
                try
                {
                    I.Stock = db.t_Stock.Where(x => x.FItemID == StockFrom).First();
                    ViewBag.QTYNaSklade = QTYNaSklade(StockFrom, I.Item.FItemID);
                }
                catch
                {

                }
            }

            // I.Works = db.ICMO.Where(y => y.FCommitQty != y.FQty&&y.FStatus<3).Take(100).ToList();

            // var PPBOM = db.PPBOMEntry.Where(x => x.FInterID == ItemID).Include(x => x.PPBOM).Include(x => x.PPBOM.ICMO.Where(y => y.FCommitQty != y.FQty && y.FStatus < 3)).ToList();
            //  db.PPBOMEntry.Where(x=>x.FItemID== ItemID).Include(x=>x.PPBOM).Include(x=>x.PPBOM.ICMO.Where(y=>y.FCommitQty!=y.FQty).ToList())

            I.QTY = QTY;
            I.Item = PerevestiItem(I.Item);
            ViewBag.Stocks = SearchStorages();
            ViewBag.Departments = SearchDepartments();
            ViewBag.Users = SearchMOL();

            return View(I);
        }

        //Перемещение на производство
        [Culture]
        public ActionResult PeremeshenieNaProizvodstvoFromWork(int ToWork)
        {
            string a = CurrentUserNow();
            if (a.Equals(""))
            {
                return RedirectToAction("Login");
            }
            ItemView I = new ItemView();
            ICMO work = new ICMO();
            List<t_Item> Nomenklaturs = new List<t_Item>();
            if (ToWork != null)
            {
                work = db.ICMO.Where(x => x.FInterID == ToWork).Include(x => x.PPBOM).Include(x => x.t_Item).First();
                if (work.PPBOM != null)
                {
                    int BOM = work.PPBOM.Select(x => x.FInterID).Distinct().First();

                    Nomenklaturs = db.PPBOMEntry.Where(x => x.FInterID == BOM).Include(x => x.t_Item).Select(x => x.t_Item).ToList();



                }
            }
            ViewBag.Work = work.FBillNo;
            ViewBag.WorkID = work.FInterID;
            work.t_Item = PerevestiItem(work.t_Item);
            ViewBag.Item = work.t_Item.FName;

            // I.Works = db.ICMO.Where(y => y.FCommitQty != y.FQty&&y.FStatus<3).Take(100).ToList();

            // var PPBOM = db.PPBOMEntry.Where(x => x.FInterID == ItemID).Include(x => x.PPBOM).Include(x => x.PPBOM.ICMO.Where(y => y.FCommitQty != y.FQty && y.FStatus < 3)).ToList();
            //  db.PPBOMEntry.Where(x=>x.FItemID== ItemID).Include(x=>x.PPBOM).Include(x=>x.PPBOM.ICMO.Where(y=>y.FCommitQty!=y.FQty).ToList())


            ViewBag.Stocks = SearchStorages();
            ViewBag.Departments = SearchDepartments();
            ViewBag.Users = SearchMOL();

            return View(Nomenklaturs);
        }


        public t_Stock PerevestiStock(t_Stock S)
        {
            t_Stock Result = S;
            if (CultureRU())
            {
                try
                {
                    S.FName = db.StocksRusKit.Where(x => x.FInterID == S.FItemID).Select(x => x.FRusName).First();
                }
                catch
                {

                }
            }
            return Result;
        }
        /*    public t_Stock PerevestiAllStocks(List<t_Stock> S)
            {
                List<t_Stock> Result = S;
                if (CultureRU())
                {
                    try
                    {
                     //   S.FName = db.StocksRusKit.Where(x => x.FInterID == S.FItemID).Select(x => x.FRusName).First();
                    }
                    catch
                    {

                    }
                }
                return Result;
            }
        */

        [Culture]
        public ActionResult PeremestitNomenklaturuStroka(int ItemID, int WorkID)
        {
            // int ItemID = 100;
            //  int WorkID = 100;
            ItemView I = new ItemView();
            decimal QtyMust = 0;
            decimal QtyPick = 0;
            try
            {
                I.Item = db.t_Item.Where(x => x.FItemID == ItemID).First();
                I.Item = PerevestiItem(I.Item);
                I.Stocks = db.ICInventory.Where(x => x.FItemID == ItemID).Include(x => x.t_Stock).Select(x => x.t_Stock).ToList();
                for (int i = 0; i < I.Stocks.Count; i++)
                {
                    I.Stocks[i] = PerevestiStock(I.Stocks[i]);
                }
                I.Work = db.ICMO.Where(x => x.FInterID == WorkID).Include(x => x.t_Department).Include(x => x.PPBOM).First();
                int BOM = I.Work.PPBOM.First().FInterID;
                var Entry = db.PPBOMEntry.Where(x => x.FInterID == BOM && x.FItemID == ItemID).First();
                QtyMust = Math.Round(Entry.FQtyMust, 3);
                QtyPick = Math.Round(Entry.FQty, 3);
            }
            catch
            {

            }
            ViewBag.Managers = SearchMOL();
            ViewBag.QtyMust = QtyMust;
            ViewBag.QtyPick = QtyPick;
            ViewBag.QtyKPerevodu = Math.Round(QtyMust - QtyPick, 3);


            return View(I);
        }

        [Culture]
        public ActionResult ScanQR()
        {

            Session["Dvigenie"] = null;
            return View();
        }

        [Culture]
        public ActionResult YZScan()
        {

            return View();
        }

        public int SetYZUserId (int UserId = 0)
        {
            if (UserId > 0)
            {
                Session["YZUser"] = UserId;
            }
            else
            {
                if (Session["YZUser"] != null)
                {
                    UserId = (int)Session["YZUser"];
                }
            }
            return UserId;
        }

        [Culture]
        public JsonResult YZSetPeriod(string Date1 = "", string Date2 ="" )
        {
            try
            {
                Session["YZDateStart"] = Convert.ToDateTime(Date1);
                Session["YZDateEnd"] = Convert.ToDateTime(Date2);
            }
            catch
            {

            }

            return Json("");
        }


        [Culture]
        public ActionResult YZ(int UserId = 0)
        {
            UserId = SetYZUserId(UserId);
            DateTime D = DateTime.Now.Date;
            List<YZActiveWorks> AW = new List<YZActiveWorks>();

             YZUsers User = new YZUsers();
            try
            {
              User =  db.YZUsers.Where(x => x.Id == UserId).Include(x => x.YZUserDepartments).Include(x => x.YZUserRoles).First();
            }
            catch
            {

            }
            try
            {
                AW = db.YZActiveWorks.Where(x => x.Complete==false&& x.UserId == UserId).Include(x => x.YZWorks).ToList();
                ViewBag.AW = AW.OrderBy(x=>x.DateStart).ToList();
                //User.YZActiveWorks = AW;
            }
            catch
            {

            }
            ViewBag.UserId = UserId;
            return View(User);
        }

        public DateTime LoadDateStart()
        {
            DateTime D = DateTime.Now.Date;

            if (Session["YZDateStart"]!=null)
            {
                D = (DateTime)Session["YZDateStart"];
            }
            return D;
        }

        public DateTime LoadDateEnd()
        {
            DateTime D = DateTime.Now.Date;

            if (Session["YZDateEnd"] != null)
            {
                D = (DateTime)Session["YZDateEnd"];
            }
            return D;
        }

        public void AddToEnterLog()
        {
           UsersKDW U = FindCurrentKDWUser();
            string hostName = Request.UserHostAddress; // Retrive the Name of HOST  
            string compname = Request.LogonUserIdentity.Name.ToString();

            EnteryLogs EL = new EnteryLogs();
            EL.IPAdress = hostName;
            EL.Name = compname;
            EL.KingDeeUserName = U.Name;
            EL.WebUserId = U.Id;
            EL.KingDeeUserName = "ItemName=" +U.t_Item.FName + " BaseUser=" + U.t_Base_User.FName;
            try
            {
                db.EnteryLogs.Add(EL);
                db.SaveChanges();
            }
            catch
            {

            }

        }

        [Culture]
        public ActionResult YZInfo()
        {
            
            DateTime D = DateTime.Now.Date;
            DateTime DateStart = LoadDateStart();
            DateTime DateEnd = LoadDateEnd();
            ViewBag.DateStart = DateStart;
            ViewBag.DateEnd = DateEnd;
            if (DateStart == DateEnd)
            {
                DateEnd = DateTime.Now.Date.AddDays(1);
            }
            List<YZActiveWorks> AW = new List<YZActiveWorks>();
            try
            {
                AW = db.YZActiveWorks.Where(x => x.DateStart >= DateStart && x.DateStart< DateEnd).Include(x => x.YZWorks).Include(x=>x.YZUsers).OrderByDescending(x=>x.Id).ToList();
               
            }
            catch
            {

            }
            return View(AW);
        }

        public JsonResult YZAddActiveWork (int WorkId =0)
        {
            int UserId = SetYZUserId(0);
            if (UserId==0)
            {
                return Json("LOGIN");
            }

            try
            {
              int CountWorks =  db.YZActiveWorks.Where(x=>x.Complete==false&&x.UserId == UserId).Count();
                if (CountWorks>0)
                {
                    return Json("WORKS");
                }
            }
            catch
            {

            }

            if (WorkId > 0 && UserId>0)
            {
                try
                {
                    YZActiveWorks AW = new YZActiveWorks();
                    AW.DateStart = DateTime.Now;
                    AW.DateEnd = new DateTime(2023, 1, 1);
                    AW.UserId = UserId;
                    AW.WorkId = WorkId;
                    AW.Comment = "";
                    AW.Complete = false;
                    db.YZActiveWorks.Add(AW);
                    db.SaveChanges();

                }
                catch (Exception e)
                {
                
                }


            }
            return Json("OK");
        }

        public JsonResult YZEndActiveWork(int ActiveWorkId = 0, string Comment="")
        {
            int UserId = SetYZUserId(0);
            if (ActiveWorkId > 0 || UserId > 0)
            {
                try
                {
                   var AW = db.YZActiveWorks.Where(x => x.Id == ActiveWorkId && x.UserId == UserId).First();
                    AW.DateEnd = DateTime.Now;
                    AW.Complete = true;
                    AW.Comment = Comment;
                    db.Entry(AW).State = EntityState.Modified;
                    db.SaveChanges();

                }
                catch (Exception e)
                {

                }


            }
            return Json("");
        }


        [Culture]
        public ActionResult YZSelectWork()
        {
            int UserId = SetYZUserId(0);
            List<int> Departments = new List<int>();
            List<int> Roles = new List<int>();
            List<YZWorks> DepWorks = new List<YZWorks>();
            List<int> RoleWorks = new List<int>();
            //Ищем доступные подразделения
            try
            {
                Departments = db.YZUserDepartments.Where(x => x.UserId == UserId).Select(x => x.DepartmentId).ToList();
            }
            catch
            {

            }
            
            //Ищем доступные роли
            try
            {
                Roles = db.YZUserRoles.Where(x => x.UserId == UserId).Select(x => x.RoleId).ToList();
            }
            catch
            {

            }
            //Ищем работы для роли
            try
            {
                RoleWorks = db.YZRoleWorks.Where(x => Roles.Contains(x.RoleId)).Select(x => x.WorkId).ToList();
            }
            catch
            {

            }

            //Ищем Проверяем все работы подразделения, не удаленные и при этом чтоб в ролях были разрешены эти работы
            try
            {
                DepWorks = db.YZWorks.Where(x => Departments.Contains(x.DepartmentId) && x.Deleted == false&& RoleWorks.Contains(x.Id)).ToList();
            }
            catch
            {

            }


            return View(DepWorks);
        }


        public void CurrentUser()
        {
            string User = "";
            if (Session["CurrentUser"] != null)
            {
                User = (string)Session["CurrentUser"];
            }
            else
            {
                RedirectToAction("Login", "Home");
            }

        }

        public UsersKDW CurrentKDWUserModel()
        {

            UsersKDW model = new UsersKDW();
            if (Session["CurrentUserKDWModel"] != null)
            {
                try
                {
                    model = (UsersKDW)Session["CurrentUserKDWModel"];
                }
                catch
                {


                }
            }
            else
            {
                RedirectToAction("Login", "Home");
            }

            return model;
        }

        public int CurrentKDWUserID()
        {

            int model = 0;
            if (Session["CurrentUserKDWId"] != null)
            {
                try
                {
                    model = (int)Session["CurrentUserKDWId"];
                }
                catch
                {


                }
            }
            else
            {
                RedirectToAction("Login", "Home");
            }

            return model;
        }

        public string FindCurrentUser()
        {
            string User = "";


            /*if (Session["CurrentUser"] != null)
            {
                User = (string)Session["CurrentUser"];
            }
            else
            {
                RedirectToAction("Login", "Home");
            }
            */



            HttpCookie cultureCookie = HttpContext.Request.Cookies["user"];
            if (cultureCookie != null)
            {
                User = cultureCookie.Value;
                // cultureCookie.SameSite = SameSiteMode.Lax;
            }
            else
            {
                RedirectToAction("Login", "Home");
            }


            return User;
        }
        public UsersKDW FindCurrentKDWUser(bool Fast = false)
        {
            UsersKDW U = new UsersKDW();

            int UserId = 0;
            HttpCookie userCookie = HttpContext.Request.Cookies["CurrentUser"];
            if (userCookie != null)
            {
                try
                {
                    UserId = Convert.ToInt32(userCookie.Value);
                }
                catch
                {

                }
            }
            else
            {
                RedirectToAction("Login", "Home");
            }

            if (UserId > 0)
            {

                if (!Fast)
                {

                    try
                    {

                        U = db.UsersKDW.Where(x => x.Id == UserId).Include(x => x.t_Base_User).Include(x => x.t_Item).Include(x => x.DepartmentsToUsers).Include(x => x.KingDeeWebRoles).First();
                    }
                    catch
                    {
                        RedirectToAction("Login", "Home");

                    }
                }
                else
                {
                    try
                    {
                        U = db.UsersKDW.Where(x => x.Id == UserId).First();
                    }
                    catch
                    {
                        RedirectToAction("Login", "Home");
                    }
                }
                
            }
            else
            {

              
            }

            return U;
        }


        public List<string> FindCurrentRoles()
        {
            List<string> Roles = new List<string>();
            if (Session["Roles"] != null)
            {
                Roles = (List<string>)Session["Roles"];
            }
            else
            {
                try
                {

                    string User = FindCurrentUser();
                    //   t_Item U = db.t_Item.Where(x => x.FName.Equals(User)).First();
                    var U = db.UsersKDW.Where(x => x.Name.Equals(User)).First();
                    List<KingDeeWebRoles> WR = db.KingDeeWebRoles.Where(x => x.UserId == U.Id).Include(x => x.WebRoles).ToList();

                    Roles = WR.Select(x => x.WebRoles.Name).ToList();
                    Session["Roles"] = Roles;
                }
                catch
                {

                }
            }

            return Roles;
        }

        public void CurrentDepartment()
        {
            string User = "";
            if (Session["CurrentDepartment"] != null)
            {
                User = (string)Session["CurrentDepartment"];
            }
            else
            {
                RedirectToAction("Index", "Home");
            }

        }

        public string FindCurrentDepartment()
        {
            string Dept = "";
            if (Session["CurrentDepartment"] != null)
            {
                Dept = (string)Session["CurrentDepartment"];
            }
            else
            {
                try
                {
                    int Id = FindUserID(FindCurrentUser());
                    Dept = db.DepartmentsToUsers.Where(x => x.UserId == Id).Include(x => x.Department).Select(x => x.Department.FName).First();
                    Session["CurrentDepartment"] = Dept;
                }
                catch
                {

                }
            }
            return Dept;

        }

        public List<int> FindCurrentDepartmentIdArray()
        {
            List<int> Dept = new List<int>();
       /*     if (Session["CurrentDepartmentIdArray"] != null)
            {
                Dept = (List<int>)Session["CurrentDepartmentIdArray"];
            }
            else
            {
       */
                try
                {
                    UsersKDW U = FindCurrentKDWUser();

                    // int Id = U.Id;

                    Dept = U.DepartmentsToUsers.Select(x => x.DepartmentId).ToList();//db.DepartmentsToUsers.Where(x => x.UserId == Id).Select(x => x.DepartmentId).ToList();
                    Session["CurrentDepartmentIdArray"] = Dept;
                }
                catch
                {

                }
           // }
            return Dept;

        }

        public List<int> FindCurrentStoragesIdArray(bool Brak = true, bool Standart = true )
        {
            List<int> Stocks = new List<int>();
            /*     if (Session["CurrentDepartmentIdArray"] != null)
                 {
                     Dept = (List<int>)Session["CurrentDepartmentIdArray"];
                 }
                 else
                 {
            */
            List<int> SM = new List<int>();
            if (Brak)
            try
            {
               SM.AddRange(db.StocksMOL.Where(x => x.SkladBraka == Brak|| x.SkladBrakaUchastka ==Brak).Select(x=>x.FInterID.Value).ToList());
            }
            catch
            {

            }
            if (Standart)
            {
                SM.AddRange(db.StocksMOL.Where(x => x.SkladUchastka == Standart).Select(x => x.FInterID.Value).ToList());
            }

            SM = SM.Distinct().ToList();

            try
            {

                List<int> Depts = FindCurrentDepartmentIdArray();
                Stocks =db.DepartmentToStocks.Where(x => Depts.Contains(x.DepartmentId)&& SM.Contains(x.StockId)).Select(x => x.StockId).ToList();
               
                

                Session["CurrentStocksIdArray"] = Stocks;
            }
            catch
            {

            }
            // }
            return Stocks;

        }
        public int FindCurrentDepartmentId()
        {
            int Dept = 0;
            if (Session["CurrentDepartmentId"] != null)
            {
                Dept = (int)Session["CurrentDepartmentId"];
            }
            else
            {
                try
                {
                    // string User = FindCurrentUser();
                    // int Id = FindKDWUserID(User);
                    UsersKDW U = FindCurrentKDWUser();

                    Dept = U.DepartmentsToUsers.Select(x => x.DepartmentId).First();//db.DepartmentsToUsers.Where(x => x.UserId == Id).Select(x=>x.DepartmentId).First();
                    Session["CurrentDepartmentId"] = Dept;
                }
                catch
                {

                }
            }
            return Dept;

        }

        public JsonResult AutocompleteSearchManager(string term)
        {

            List<string> Result = new List<string>();
            if (Session["Managers"] == null)
            {
                //Получаем всех пользаков
                Result = db.t_Item.Where(x => x.FItemClassID == 3) // && x.FName.Contains(term)
                            .Select(a => a.FName)
                            .Distinct().ToList();

                //Сохраняем в сессию чтобы все было свеженькое
                Session["Managers"] = Result;


            }
            else
            {//Загружаем из сессии
                Result = (List<string>)Session["Managers"];


            }
            try
            {
                Result = Result.Where(x => x.Contains(term)).ToList();
            }
            catch
            {
                Result = new List<string>();
            }
            if (Result.Count == 0)
            {
                Result.Add(Resources.Resource.PoZaprosuNeNaideno);
            }
            return Json(Result, JsonRequestBehavior.AllowGet);

        }
        public JsonResult AutocompleteSearchUser(string term)
        {

            List<string> Result = new List<string>();
            if (Session["Users"] == null)
            {
                //Получаем всех пользаков
                /*     Result = db.t_Item.Where(x => x.FItemClassID == 3) // && x.FName.Contains(term)
                                 .Select(a => a.FName )
                                 .Distinct().ToList();
                */
                term = term.ToLower();
                Result = db.UsersKDW.Where(x => x.Name.ToLower().Contains(term)).Select(x => x.Name).ToList();

                //  Result = db.UsersKDW.Where(x => x.Name.Contains(term)).Select(x => x.Name).ToList();
                //Сохраняем в сессию чтобы все было свеженькое
                Session["Users"] = Result;


            }
            else
            {//Загружаем из сессии
                Result = (List<string>)Session["Users"];


            }
            try
            {
                Result = Result.Where(x => x.Contains(term)).ToList();
            }
            catch
            {
                Result = new List<string>();
            }
            if (Result.Count == 0)
            {
                Result.Add(Resources.Resource.PoZaprosuNeNaideno);
            }
            return Json(Result, JsonRequestBehavior.AllowGet);

        }

        public JsonResult AutocompleteSearchItem(string term)
        {

            List<string> Result = new List<string>();
            //   if (Session["Users"] == null)
            //    {
            //Получаем всех пользаков
            /*     Result = db.t_Item.Where(x => x.FItemClassID == 3) // && x.FName.Contains(term)
                             .Select(a => a.FName )
                             .Distinct().ToList();
            */
            term = term.ToLower();
            try
            {
                Result = db.t_Item.Where(x => x.FItemClassID == 4 && x.FNumber.Contains(term) || x.FName.Contains(term)).Select(x => x.FNumber).Take(10).ToList();
            }
            catch
            {

            }

            //  Result = db.UsersKDW.Where(x => x.Name.Contains(term)).Select(x => x.Name).ToList();
            //Сохраняем в сессию чтобы все было свеженькое
            //   Session["Items"] = Result;


            //   }
            //   else
            //  {//Загружаем из сессии
            //      Result = (List<string>)Session["Users"];
            //

            //    }

            if (Result.Count == 0)
            {
                Result.Add(Resources.Resource.PoZaprosuNeNaideno);
            }
            return Json(Result, JsonRequestBehavior.AllowGet);

        }

        public List<string> SearchMOLByStock(string term)
        {
            List<string> Result = new List<string>();
            Result = SearchMOL();
            int PlanshetId = FindPlanshetId();
            int StockId = FindStockID(term);

            try
            {
                Result = db.DepartmentToStocks.Where(x => x.StockId == StockId && x.PlanshetId == PlanshetId).Include(x => x.MOL).Select(x => x.MOL.FName).ToList();
            }
            catch
            {
                Result = new List<string>();
            }

            try
            {
                //    Result = db.DepartmentToStocks.Where(x => x.StockId == StockId && x.PlanshetId == PlanshetId).ToList();

            }
            catch
            {

            }
            if (Result.Count == 0)
            {
                Result.Add(Resources.Resource.PoZaprosuNeNaideno);
            }
            return Result;
        }

        public JsonResult AutocompleteSearchMOLByStock(string term)
        {
            List<string> Result = new List<string>();
            Result = SearchMOLByStock(term);

            return Json(Result, JsonRequestBehavior.AllowGet);

        }

        public JsonResult AutocompleteSearchMOL(string term)
        {

            List<string> Result = new List<string>();
            Result = SearchMOL();
            try
            {
                Result = Result.Where(x => x.Contains(term)).ToList();
            }
            catch
            {
                Result = new List<string>();
            }
            if (Result.Count == 0)
            {
                Result.Add(Resources.Resource.PoZaprosuNeNaideno);
            }
            return Json(Result, JsonRequestBehavior.AllowGet);

        }

        public List<string> SearchMOLS(string Stock)
        {
            List<string> Result = new List<string>();
            int StockId = FindStockID(Stock);
            if (!CultureRU())
            {
                try
                {
                    Result = db.StocksMOL.Include(x => x.t_Item1).Where(x => x.t_Item1.FItemClassID == 3 && x.FInterID == StockId) // && x.FName.Contains(term)
                             .Select(a => a.t_Item1.FName)
                             .Distinct().ToList();
                }
                catch
                {
                    Result = SearchUsers();
                }
            }
            else
            {
                try
                {
                    Result.AddRange(db.StocksMOL.Include(x => x.t_Item1).Where(x => x.t_Item1.FItemClassID == 3 && x.FInterID == StockId) // && x.FName.Contains(term)
                     .Select(a => a.MOL)
                     .Distinct().ToList());
                }
                catch
                {
                    Result = SearchUsers();
                }
            }

            if (Result.Count == 0)
            {
                Result = SearchMOL();
                //  Result.Add(Resources.Resource.PoZaprosuNeNaideno);
            }
            return Result;
        }
        public JsonResult AutocompleteSearchMOLs(string Stock)
        {

            return Json(SearchMOLS(Stock), JsonRequestBehavior.AllowGet);

        }
        public JsonResult AutocompleteSearchDepartment(string term)
        {

            List<string> Result = new List<string>();
            if (Session["Departments"] == null)
            {
                //Получаем всех пользаков
                Result = db.t_Item.Where(x => x.FItemClassID == 2) // && x.FName.Contains(term)
                            .Select(a => a.FName)
                            .Distinct().ToList();

                //Сохраняем в сессию чтобы все было свеженькое
                Session["Departments"] = Result;


            }
            else
            {//Загружаем из сессии
                Result = (List<string>)Session["Departments"];


            }
            try
            {
                Result = Result.Where(x => x.Contains(term)).ToList();
            }
            catch
            {
                Result = new List<string>();
            }
            if (Result.Count == 0)
            {
                Result.Add(Resources.Resource.PoZaprosuNeNaideno);
            }
            return Json(Result, JsonRequestBehavior.AllowGet);

        }

        public JsonResult AutocompleteSearchWork(string term)
        {

            List<string> Result = new List<string>();

            try
            {
                Result = db.ICMO.Where(x => x.FBillNo.Contains(term)).Select(x => x.FBillNo).ToList();
            }
            catch
            {
                Result = new List<string>();
            }
            if (Result.Count == 0)
            {
                Result.Add(Resources.Resource.PoZaprosuNeNaideno);
            }
            return Json(Result, JsonRequestBehavior.AllowGet);

        }



        public bool CultureRU()
        {
            string Culture = "zh";

            HttpCookie cultureCookie = HttpContext.Request.Cookies["lang"];
            if (cultureCookie != null)
            {
                Culture = cultureCookie.Value;
                // cultureCookie.SameSite = SameSiteMode.Lax;
            }


            bool Result = false;
            if (Culture.Contains("ru"))
            {
                Result = true;
            }
            return Result;
        }
        public List<string> SearchMOL()
        {

            List<string> Result = new List<string>();

            if (Session["MOL"] == null)
            {
                //Получаем всех пользаков
                if (!CultureRU())
                {
                    try
                    {
                        Result = db.StocksMOL.Include(x => x.t_Item1).Where(x => x.t_Item1.FItemClassID == 3) // && x.FName.Contains(term)
                                 .Select(a => a.t_Item1.FName)
                                 .Distinct().ToList();
                    }
                    catch
                    {
                        Result = SearchUsers();
                    }
                }
                else
                {
                    try
                    {
                        Result.AddRange(db.StocksMOL.Include(x => x.t_Item1).Where(x => x.t_Item1.FItemClassID == 3) // && x.FName.Contains(term)
                         .Select(a => a.MOL)
                         .Distinct().ToList());
                    }
                    catch
                    {
                        Result = SearchUsers();
                    }
                }

                //   Result = db.StocksMOL.Include(x => x.t_Item1).Where(x => x.t_Item1.FItemClassID == 3).Select(x =>  x.MOL ).Union(db.StocksMOL.Include(x => x.t_Item1).Where(x => x.t_Item1.FItemClassID == 3).Select(x => x.t_Item1.FName)).Distinct().ToList();


                //Сохраняем в сессию чтобы все было свеженькое
                Session["MOL"] = Result;


            }
            else
            {//Загружаем из сессии

                Result = (List<string>)Session["MOL"];


            }
            if (Result.Count == 0)
            {
                Result.Add(Resources.Resource.PoZaprosuNeNaideno);
            }
            return Result;

        }
        public List<string> SearchUsers()
        {
            List<string> Result = new List<string>();
            List<string> Filter = new List<string>();



            if (Session["Users"] == null)
            {
                //Получаем всех пользаков
                Result = db.t_Item.Where(x => x.FItemClassID == 3) // && x.FName.Contains(term)
                            .Select(a => a.FName)
                            .Distinct().ToList();

                //Сохраняем в сессию чтобы все было свеженькое
                Session["Users"] = Result;


            }
            else
            {//Загружаем из сессии
                Result = (List<string>)Session["Users"];


            }

            if (Result.Count == 0)
            {
                Result.Add(Resources.Resource.PoZaprosuNeNaideno);
            }


            return Result;
        }

        public List<string> SearchLiniiSborki()
        {
            List<string> Result = new List<string>();

            if (Session["LiniiSborki"] == null)
            {
                //Получаем все lines
                Result.Add("-");//Первая пустая
                Result.AddRange(db.t_Item.Where(x => x.FItemClassID == 3004) // && x.FName.Contains(term)
                            .Select(a => a.FName)
                            .Distinct().ToList());

                //Сохраняем в сессию чтобы все было свеженькое
                Session["LiniiSborki"] = Result;


            }
            else
            {//Загружаем из сессии
                Result = (List<string>)Session["LiniiSborki"];
            }

            if (Result.Count == 0)
            {
                Result.Add(Resources.Resource.PoZaprosuNeNaideno);
            }

            return Result;

        }


        public JsonResult AutocompleteSearchLiniiSborki(string Work)
        {
            List<string> Result = new List<string>();
            int Department = 0;
            try
            {
                Department = db.ICMO.Where(x => x.FBillNo.Equals(Work)).Select(x => x.FWorkShop.Value).First();
            }
            catch
            {

            }
            if (Department == 0)
            {
                return Json("Error");
            }
            Result = SearchLiniiSborki(Department);
            return Json(Result);
        }

        public JsonResult AutocompleteSearchDvigeniesFromKomplektovka(string ItemId)
        {
            List<string> Result = new List<string>();
            KomplektovkaView komplektovka = LoadKomplektovka();

            int Department = 0;
            try
            {
                Result = db.NZP.Where(x => x.WorkId == komplektovka.WorkId && ItemId == ItemId).Include(x => x.POOrder).Select(x => x.POOrder.FBillNo).ToList();

            }
            catch
            {

            }

            return Json(Result);
        }

        public decimal FindQTYFromStarWork(int WorkId, int ItemId, DateTime D)
        {
            decimal result = 0;
            List<StarMehWorks> SW = new List<StarMehWorks>();
            PPBOMEntry BOM = new PPBOMEntry();
            try
            {
                SW = db.StarMehWorks.Where(x => x.WorkId == WorkId && x.DateStart == D).ToList();
            }
            catch
            {

            }

            try
            {
                BOM = db.PPBOMEntry.Where(x => x.FInterID == ItemId && x.FICMOInterID == WorkId).First();
            }
            catch
            {

            }

            if (SW.Count > 0)
            {
                foreach (StarMehWorks s in SW)
                {
                    result += BOM.FQtyScrap * (s.QTY - s.QTYFact);


                }
            }
            return result;
        }

        public decimal FindQTYFromPlanWork(int WorkId, int ItemId, DateTime D)
        {
            decimal result = 0;
            List<PlanoviWorks> PW = new List<PlanoviWorks>();
            PPBOMEntry BOM = new PPBOMEntry();
            try
            {
                PW = db.PlanoviWorks.Where(x => x.WorkId == WorkId && x.Date == D).ToList();
            }
            catch
            {

            }

            try
            {
                BOM = db.PPBOMEntry.Where(x => x.FItemID == ItemId && x.FICMOInterID == WorkId).First();
            }
            catch
            {

            }

            if (PW.Count > 0)
            {
                foreach (PlanoviWorks p in PW)
                {
                    result += BOM.FQtyScrap * (p.QTY - BOM.FWIPQTY.Value);


                }
            }
            return result;
        }
        public JsonResult AutocompleteSearchDvigeniesQTYFromKomplektovka(string QRData)
        {
            ItemView qrt = QRTrace(QRData);

            DateTime D = DateTime.Now.Date;
            decimal NZPQTY = 0;
            KomplektovkaView komplektovka = LoadKomplektovka();
            decimal MaxVQR = 0;
            decimal MaxVozvrat = 0;
            try
            {

                MaxVQR = FindQTYFromStarWork(komplektovka.WorkId, qrt.Item.FItemID, D);// qrt.LastSOUT.QTYFact;
            }
            catch
            {

            }

            int Department = 0;
            try
            {
                NZPQTY = Math.Round(db.PPBOMEntry.Where(x => x.FICMOInterID == komplektovka.WorkId && x.FItemID == qrt.Item.FItemID).Select(x => x.FWIPQTY.Value).First(), 3);
                //  NZPQTY = db.NZP.Where(x => x.WorkId == komplektovka.WorkId && qrt.Item.FItemID == x.ItemId).Include(x => x.POOrder).Sum(x =>x.QTY);

            }
            catch (Exception e)
            {

            }
            MaxVozvrat = NZPQTY;
            /*  if (NZPQTY>=MaxVQR)
              {
                  MaxVozvrat = MaxVQR;
              }
           */


            PPBOMEntry BOM = new PPBOMEntry();
            try
            {
                BOM = komplektovka.BOMs.Where(x => x.FItemID == qrt.Item.FItemID).First();
            }
            catch
            {

            }

            return Json(NZPQTY + ";" + Math.Round(BOM.FQty, 3) + ";" + Math.Round(BOM.FQtyMust, 3) + ";" + BOM.FStockQty + ";" + MaxVozvrat);
        }

        public JsonResult AutocompleteSearchQTYByQR(string QRData)
        {
            ItemView qrt = QRTrace(QRData);
            if (qrt.LastDvig.Work != "" && qrt.LastDvig.Work != null && qrt.LastDvig.Work.Equals("STORNO") == false)
            {
                qrt.LastDvig.QTYFact = 0;
            }
            decimal QTY = qrt.LastDvig.QTYFact;
            decimal QTYMax = qrt.LastDvig.QTY;

            return Json(qrt.Item.FNumber + ";" + QTY + ";" + QTYMax + ";" + qrt.LastDvig.Stock.FName);
        }

        public JsonResult AutocompleteSearchQTYStornoByQR(string QRData)
        {
            ItemView qrt = QRTrace(QRData);
            decimal QTY = 0;// qrt.LastDvig.QTYFact;
            decimal QTYMax = 0;// qrt.LastDvig.QTY;
            if (qrt.LastDvig.Work != "" && qrt.LastDvig.Work != null && qrt.LastDvig.Work.Equals("STORNO") == false)
            {
                qrt.LastDvig.QTYFact = 0;
            }
            try
            {
                QTY = qrt.LastSOUT.QTYFact;// qrt.LastDvig.QTYFact;
                QTYMax = qrt.LastSOUT.QTY;// qrt.LastDvig.QTY;
            }
            catch
            {

            }


            return Json(qrt.Item.FNumber + ";" + QTY + ";" + QTYMax + ";" + qrt.LastDvig.Stock.FName);
        }

        public List<string> SearchLiniiSborki(int DepartmentId)
        {
            List<string> Result = new List<string>();
            Result.Add("-");


            //Ищем подразделение
            List<t_Item> Departments = new List<t_Item>();
            t_Item D = new t_Item();
            try
            {
                Departments = SearchFullDepartments();
                D = Departments.Where(x => x.FItemID == DepartmentId).First();

            }
            catch
            {

            }
            //Ищем линии сборки к этому подразделению
            try
            {

                Result.AddRange(db.DepartmentToLine.Where(x => x.DepartmentId == D.FItemID).Include(x => x.Line).Select(x => x.Line.FName).ToList());
            }
            catch
            {

            }


            return Result;

        }

        //Поиск наименований подразделений
        public List<string> SearchDepartments()
        {
            List<string> Result = new List<string>();
            if (Session["Departments"] == null)
            {
                //Получаем всех пользаков
                Result = db.t_Item.Where(x => x.FItemClassID == 2) // && x.FName.Contains(term)
                            .Select(a => a.FName)
                            .Distinct().ToList();

                //Сохраняем в сессию чтобы все было свеженькое
                Session["Departments"] = Result;


            }
            else
            {//Загружаем из сессии
                Result = (List<string>)Session["Departments"];
            }

            if (Result.Count == 0)
            {
                Result.Add(Resources.Resource.PoZaprosuNeNaideno);
            }

            return Result;

        }

        //Поиск всех данных подразделений
        public List<t_Item> SearchFullDepartments()
        {
            List<t_Item> Result = new List<t_Item>();
            if (Session["FullDepartments"] == null)
            {
                //Получаем всех пользаков
                Result = db.t_Item.Where(x => x.FItemClassID == 2) // && x.FName.Contains(term)
                            .Distinct().ToList();

                //Сохраняем в сессию чтобы все было свеженькое
                Session["FullDepartments"] = Result;


            }
            else
            {//Загружаем из сессии
                Result = (List<t_Item>)Session["FullDepartments"];
            }



            return Result;

        }


        public JsonResult GenerateMnimiQRNEW(string ItemNum, string QTY, string ToStock, string Mesto = "",string WIN = "WIN000001", string Price="", int PostavshikId = 3591)
        {
          
            
            int ToStockId = 0;
            int ItemId = 0;
            t_Item I = null;

            decimal CurrentPrice = 0;
            decimal QTYNEW = 0;
            try
            {
                QTY = QTY.Replace(',', '.');
                QTYNEW = Convert.ToDecimal(QTY);
            }
            catch
            {

            }

            try
            {
                

                Price = Price.Replace(',', '.');
                CurrentPrice = Convert.ToDecimal(Price);
            }
            catch
            {

            }
            try
            {
               
                try
                {
                    ItemId = Convert.ToInt32(ItemNum);
                   // I = db.t_Item.Where(x => x.FItemID== ItemId).First();
                }
                catch
                {

                }
                if (ItemId == 0)
                {
                    I = db.t_Item.Where(x => x.FNumber.Equals(ItemNum)).First();

                    ItemId = I.FItemID;
                }
            }
            catch
            {
                return Json(Resources.Resource.PartNumber + Resources.Resource.Error);
            }
            ToStockId = FindStockID(ToStock);
            if (ToStockId == 0)
            {
                return Json(Resources.Resource.Stock + Resources.Resource.Error);
            }
            string Result = "True;";
            decimal QTYStock = QTYNaSklade(ToStockId, ItemId);
            if (QTYStock < QTYNEW)
            {
                return Json(Resources.Resource.NetNaSklade + "QTYStock=" + QTYStock);
            }

        
          
            DvigenieNEW Dvigenie = new DvigenieNEW();
            try
            {
                Dvigenie = CreateNewQRCode(WIN, ItemId, ToStockId, QTYNEW, WIN, CurrentPrice, PostavshikId, "", 0, 0, 0, true, false, 0, 0, "");
            }
            catch (Exception e)
            {
                return Json(e.Message);
            }

            if (Mesto.Equals("") == false && Dvigenie.Id != 0)
            {
               // MestoPrikrutit(Mesto, DvigenieId, ItemId);
            }

            if (Dvigenie.Id != 0)
            {
                AddProverkaOTK(Dvigenie.QRString, 2);

                Result += Dvigenie.Id.ToString();
            }
            return Json(Result);
        }


        public JsonResult GenerateMnimiQR(string ItemNum, decimal QTY, string ToStock, string Mesto = "")
        {
            string ZakazBillNo = "POORD000022";
            int ZakazId = 1151;
            int ToStockId = 0;
            int ItemId = 0;
            t_Item I = new t_Item();
            try
            {
                I = db.t_Item.Where(x => x.FNumber.Equals(ItemNum)).First();
                ItemId = I.FItemID;
            }
            catch
            {
                return Json(Resources.Resource.PartNumber + Resources.Resource.Error);
            }
            ToStockId = FindStockID(ToStock);
            if (ToStockId == 0)
            {
                return Json(Resources.Resource.Stock + Resources.Resource.Error);
            }
            string Result = "True;";
            decimal QTYStock = QTYNaSklade(ToStockId, ItemId);
            if (QTYStock < QTY)
            {
                return Json(Resources.Resource.NetNaSklade + "QTYStock=" + QTYStock);
            }

            int MaxLev = SelectMaxLev(ZakazId, ItemId, ZakazBillNo);
            MaxLev++;

            int QRID = SaveQR(I, ZakazBillNo, ZakazId, MaxLev);



            // int   StockID = FindStockID(Stock);//  db.t_Stock.Where(x => x.FName.Equals(Stock)).Select(a => a.FItemID).First();


            int DvigenieId = 0;
            try
            {
                DvigenieId = SaveDvigenie(ZakazBillNo, "WIN000001", QTY, ItemId, ZakazId, 0, ToStockId, QRID, MaxLev, 0, "", true);
            }
            catch (Exception e)
            {
                return Json(e.Message);
            }

            if (Mesto.Equals("") == false && DvigenieId != 0)
            {
                MestoPrikrutit(Mesto, DvigenieId, ItemId);
            }

            if (DvigenieId != 0)
            {
                AddStatusOTK(DvigenieId, 2);
                Result += QRID.ToString();
            }
            return Json(Result);
        }


        public Dictionary<int, string> SearchStoragesPostuplenie()
        {
            Dictionary<int, string> Result = new Dictionary<int, string>();
            List<string> Filter = new List<string>();


            if (CultureRU())
            {
                try
                {
                    Result = db.StockPriem.Include(x => x.Stock).Include(x => x.Stock.StocksRusKit).ToDictionary(x => x.StockId, x => x.Stock.StocksRusKit.FirstOrDefault().FRusName);
                }
                catch
                {
                    Result = db.StockPriem.Include(x => x.Stock).ToDictionary(x => x.StockId, x => x.Stock.FName);
                }

            }
            else
            {
                Result = db.StockPriem.Include(x => x.Stock).ToDictionary(x => x.StockId, x => x.Stock.FName);
            }



            if (Result.Count == 0)
            {
                Result.Add(0, Resources.Resource.PoZaprosuNeNaideno);
            }

            return Result;
        }


        public Dictionary<string, string> SearchAllDepartments(bool AddPusto = false)
        {
            Dictionary<string, string> Result = new Dictionary<string, string>();
           
            try
            {
                if (CultureRU())
                {
                    Result = db.DepartmentToStocks.Where(x => x.NameRus != null && x.DepartmentId != 0 && x.Main).Select(x => new { Name = x.NameRus, Id = x.DepartmentId }).Distinct().ToDictionary(x => x.Id.ToString(), y => y.Name);
                }
                else
                {
                    Result = db.t_Item.Where(x => x.FItemClassID == 2).ToDictionary(x => x.FItemID.ToString(), y => y.FName);
                }
                if (AddPusto)
                {
                    Result.Add("0", Resources.Resource.NeVibrano);
                    Result.Reverse();
                }
            }
            catch (Exception e)
            {

            }
            return Result;
        }
        
        [Culture]
        public Dictionary<string, string> SearchStorages(string term = "", bool Nobrak = true, bool Uchastok = false, bool Priem = false, bool Bufer = false, bool brak = true, bool brakUchastka = false, bool Pustoi = false)
        {
            Dictionary<string, string> Result = new Dictionary<string, string>();
            List<string> Filter = new List<string>();
            List<t_Stock> Stocks = new List<t_Stock>();
            List<StocksMOL> StocksMOL = new List<StocksMOL>();
            List<StocksMOL> StocksWithFilter = new List<StocksMOL>();



         
                //Получаем все склады



                //   Result = db.t_Stock
                //               .Select(a => a.FName)
                //               .Distinct().ToList();
                if (CultureRU())
                {
                    try
                    {
                        StocksMOL = db.StocksMOL.Where(x => x.Actual).Include(x => x.t_Stock).Include(x => x.t_Stock.StocksRusKit).ToList();// db.t_Stock.Include(x => x.StocksRusKit).Distinct().ToList();

                    }
                    catch
                    {
                        //  StocksMOL = db.StocksRusKit.Include(x => x.t_Stock).Select(x => x.t_Stock).Distinct().ToList();//Stocks.Where(x => x.FNumber.Contains(term) || x.FName.Contains(term)).ToDictionary( x => x.FName, x => x.FItemID);

                        // Stocks = db.t_Stock.Include(x => x.StocksRusKit).Distinct().ToList();
                    }
                }
                else
                {

                    try
                    {
                        StocksMOL = db.StocksMOL.Where(x => x.Actual).Include(x => x.t_Stock).ToList();
             
                    }
                    catch
                    {

                    }
                }

                try
                {

              //  StocksWithFilter = StocksMOL.ToList();//Если все вкл берем все склады

                if (brak && Nobrak)
                    {
                        StocksWithFilter = StocksMOL.ToList();//Если все вкл берем все склады
                    }
                    else
                    {

                     /*   if (brak || !Nobrak)
                        {
                            StocksWithFilter.AddRange(StocksMOL.Where(x => x.SkladBraka == true).ToList());
                        }
                     */
                        if (Nobrak)
                        {
                            StocksWithFilter.AddRange(StocksMOL.Where(x => x.SkladBraka == false).ToList());
                        }
                    }
                if (brak)
                {
                    StocksWithFilter.AddRange(StocksMOL.Where(x => x.SkladBraka == true).ToList());
                }
                if (brakUchastka)
                {
                    StocksWithFilter.AddRange(StocksMOL.Where(x => x.SkladBrakaUchastka == true).ToList());
                }


                if (Uchastok)
                    {
                        StocksWithFilter.AddRange(StocksMOL.Where(x => x.SkladUchastka == true).ToList());
                    }
                 

                if (Priem)
                    {
                        StocksWithFilter.AddRange(StocksMOL.Where(x => x.YacheikaPriem != null && x.YacheikaPriem != "").ToList());
                    }
                    if (Bufer)
                    {
                        StocksWithFilter.AddRange(StocksMOL.Where(x => x.YacheikaBufer != null && x.YacheikaBufer != "").ToList());
                    }

                    StocksWithFilter = StocksWithFilter.Distinct().ToList();//удаляем дубликаты

                    Stocks = StocksWithFilter.Select(x => x.t_Stock).ToList();
                if (CultureRU())
                {
                    foreach (var s in Stocks)
                    {
                        try
                        {

                            s.FName = s.FItemID + " " + s.StocksRusKit.First().FRusName;

                        }
                        catch
                        {

                        }
                    }

                }
                }
                catch
                {

                }

                //.Select(x => x.StocksRusKit.FirstOrDefault().FRusName)
                //  string SkladProverki = db.t_Stock.Where(x => x.FItemID == 13689).Include(x => x.StocksRusKit).Select(x => x.StocksRusKit.FirstOrDefault().FRusName).First();


                //  else
                //   {
                // Stocks =  db.t_Stock.Distinct().ToDictionary(x => x.FItemID, x => x.FName);//Select(x => x.t_Stock.FName).ToList());

                //  string SkladProverki = db.t_Item.Where(x => x.FItemID == 13689).Select(x => x.FName).First();
                //   Result.Insert(0, SkladProverki);
                //    }

                if (Stocks != null && Stocks.Count > 0 && term.Equals("") == false)
                {
                    if (CultureRU())
                    {
                        try
                        {
                            Result = Stocks.Where(x => x.FName.Contains(term) || x.FNumber.Contains(term)).Distinct().ToDictionary(x => x.FItemID.ToString(), x => x.FName);//Stocks.Where(x => x.FNumber.Contains(term) || x.FName.Contains(term)).ToDictionary( x => x.FName, x => x.FItemID);
                        }
                        catch
                        {

                        }
                    }
                    else
                    {
                        Result = Stocks.Where(x => x.FNumber.Contains(term) || x.FName.Contains(term)).ToDictionary(x => x.FItemID.ToString(), x => x.FItemID + " " + x.FName);
                    }

                }
                else
                {

                    if (CultureRU())
                    {

                        try
                        {
                            if (term.Equals("") == false)
                            {
                                Result = Stocks.Where(x => x.FName.Contains(term) || x.FNumber.Contains(term)).Distinct().ToDictionary(x => x.FItemID.ToString(), x => x.FName);//Stocks.Where(x => x.FNumber.Contains(term) || x.FName.Contains(term)).ToDictionary( x => x.FName, x => x.FItemID);
                            }
                            else
                            {
                                Result = Stocks.Distinct().ToDictionary(x => x.FItemID.ToString(), x => x.FName);//Stocks.Where(x => x.FNumber.Contains(term) || x.FName.Contains(term)).ToDictionary( x => x.FName, x => x.FItemID);

                            }
                        }
                        catch
                        {
                            Result = Stocks.ToDictionary(x => x.FItemID.ToString(), x => x.FName);
                        }
                    }
                    else
                    {
                        Result = Stocks.Distinct().ToDictionary(x => x.FItemID.ToString(), x => x.FName);
                    }
                }

                if (term.Equals(""))
                {
                    //Сохраняем в сессию чтобы все было свеженькое

                    //  Session["Stocks"] = Result;

                }
           

            //  Result = Stocks.ToLookup(x => x.FName, x => x.FItemID);


            // string Dept = FindCurrentDepartment();
            // int PlanshetId = FindPlanshetId();
            /* List<string> Stocks = new List<string>();
             try
             {
                 Stocks = db.DepartmentToStocks.Where(x => x.PlanshetId == PlanshetId).Include(x => x.Stock).Select(x => x.Stock.FName).ToList();
             }
             catch
             {

             }
             if (Stocks.Count > 0)
             {
                 Result = Stocks;
             }
            */
            if (Pustoi)
            {
               
                Result.Add("0","-");
            }

            if (Result.Count == 0)
            {

                Result.Add("0", Resources.Resource.PoZaprosuNeNaideno);
            }

            return Result;





            ///   var models = db.t_Stock.Where(x => x.FName.Contains(term))
            //                    .Select(a => new { value = a.FName })
            //                   .Distinct();

            //   return Json(models, JsonRequestBehavior.AllowGet);
        }

        public Dictionary<int, string> SearchBuildings()
        {
            Dictionary<int, string> Result = new Dictionary<int, string>();
            if (Session["Buildings"] == null)
            {
                //Получаем все помещения
                if (CultureRU())
                {
                    try
                    {
                        Result = db.Buildings.Distinct().ToDictionary(x => x.Id, x => x.NameRU);
                    }
                    catch
                    {

                    }

                }
                else
                {
                    Result = db.Buildings.Distinct().ToDictionary(x => x.Id, x => x.NameZH);
                }

                //Сохраняем в сессию чтобы все было свеженькое
                Session["Buildings"] = Result;


            }
            else
            {//Загружаем из сессии
                Result = (Dictionary<int, string>)Session["Buildings"];
            }

            if (Result.Count == 0)
            {
                Result.Add(0, Resources.Resource.PoZaprosuNeNaideno);
            }

            return Result;

        }

        public List<string> SearchStoragesString()
        {
            List<string> Result = new List<string>();
            List<string> Filter = new List<string>();



            if (Session["Stocks"] == null)
            {
                //Получаем все склады



                //   Result = db.t_Stock
                //               .Select(a => a.FName)
                //               .Distinct().ToList();
                if (CultureRU())
                {
                    Result.AddRange(db.t_Stock.Include(x => x.StocksRusKit).Select(x => x.StocksRusKit.FirstOrDefault().FRusName).ToList().Distinct());
                    string SkladProverki = db.t_Stock.Where(x => x.FItemID == 13689).Include(x => x.StocksRusKit).Select(x => x.StocksRusKit.FirstOrDefault().FRusName).First();
                    Result.Insert(0, SkladProverki);
                }
                else
                {
                    Result.AddRange(db.StocksMOL.Include(x => x.t_Stock).Select(x => x.t_Stock.FName).ToList());
                    string SkladProverki = db.t_Item.Where(x => x.FItemID == 13689).Select(x => x.FName).First();
                    Result.Insert(0, SkladProverki);
                }
                Result.Remove(null);
                //Сохраняем в сессию чтобы все было свеженькое
                Session["Stocks"] = Result;


            }
            else
            {//Загружаем из сессии
                Result = (List<string>)Session["Stocks"];
            }

            string Dept = FindCurrentDepartment();
            int PlanshetId = FindPlanshetId();
            List<string> Stocks = new List<string>();
            try
            {
                Stocks = db.DepartmentToStocks.Where(x => x.PlanshetId == PlanshetId).Include(x => x.Stock).Select(x => x.Stock.FName).ToList();
            }
            catch
            {

            }
            if (Stocks.Count > 0)
            {
                Result = Stocks;
            }

            /*    if (Dept != "")// Фильтруем склады по выбранному подразделению
                {
                    t_Department D = db.t_Department.Where(x => x.FName.Equals(Dept)).Include(x => x.DepartmentToStock).First();
                    if (D.DepartmentToStock != null && D.DepartmentToStock.Count > 0)
                    {
                        foreach (DepartmentToStock DS in D.DepartmentToStock)
                        {
                            Filter.Add(db.t_Stock.Where(x => x.FItemID == DS.StockId).Select(x => x.FName).First());
                            Filter.Add(db.StocksRusKit.Where(x => x.FInterID == DS.StockId).Select(x => x.FRusName).First());
                        }
                    }
                    Result = Result.Where(x => Filter.Contains(x)).ToList();
                }
            */



            if (Result.Count == 0)
            {
                Result.Add(Resources.Resource.PoZaprosuNeNaideno);
            }

            return Result;





            ///   var models = db.t_Stock.Where(x => x.FName.Contains(term))
            //                    .Select(a => new { value = a.FName })
            //                   .Distinct();

            //   return Json(models, JsonRequestBehavior.AllowGet);
        }


        public Dictionary<string, string> SearchStoragesByItem(int ItemId)
        {
            Dictionary<string, string> Result = new Dictionary<string, string>();
            List<string> Filter = new List<string>();
            List<StocksRusKit> SR = new List<StocksRusKit>();
            List<ICInventory> ST = new List<ICInventory>();
            try
            {
              
                    try
                    {
                        SR = db.StocksRusKit.ToList();
                    }
                    catch
                    {

                    }
                    try
                    {
                       // ST = db.ICInventory.Where(x => x.FItemID == ItemId && x.FQty > 0).Include(x => x.t_Stock).ToList(); //.ToDictionary(x => x.FStockID.ToString(), x => x.t_Stock.FName);
                       var Inv = db.ICInventory.Where(x => x.FItemID == ItemId && x.FQty > 0).Include(x => x.t_Stock).Select(x=> new { ID=x.FStockID, NAME=x.t_Stock.FName}).Distinct().ToList();
                   /*     foreach (var R in Inv)
                        {
                            R.NAME = SR.Where(x => x.FInterID.Value == R.ID).Select(x => x.FRusName).First();
                        }
                   */
                        Result = Inv.ToDictionary(x => x.ID.ToString(),x=> x.NAME.ToString());
                    }
                    catch
                    {
                        Result = db.ICInventory.Where(x => x.FItemID == ItemId && x.FQty > 0).Include(x => x.t_Stock).ToDictionary(x => x.FStockID.ToString(), x => x.t_Stock.FName);

                    }
         

            }
            catch
            {
                Result.Add("0", "Выпал в ошибку при поиске складов");
            }
            return Result;
        }
        /*
        public List<string> SearchStoragesByItem(int ItemId)
        {
            List<string> Result = new List<string>();
            List<string> Filter = new List<string>();

            try
            {
                  if (CultureRU())
                {
                    Result = db.ICInventory.Where(x => x.FItemID == ItemId && x.FQty > 0).Distinct().Include(x => x.t_Stock).Select(x => x.t_Stock.FName).ToList();
                    
                }
                  else
                {
                    Result = db.ICInventory.Where(x => x.FItemID == ItemId && x.FQty > 0).Distinct().Include(x => x.t_Stock).Select(x => x.t_Stock.FName).ToList();

                }

            }
            catch
            {

            }


            if (Result.Count == 0)
            {
                Result.Add(Resources.Resource.PoZaprosuNeNaideno);
            }

            return Result;
        }
        */
        public JsonResult AutocompleteSearchStends(string Stock)
        {
            List<string> Result = new List<string>();



            int StockId = FindStockID(Stock);
            try
            {
                Result = db.Planogramma.Where(x => x.StockId == StockId).Select(x => x.Num + ";" + x.Name).ToList();
            }
            catch
            {

            }


            return Json(Result, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutocompleteSearchZakazPostavshiku(string Text, int ItemId)
        {

            List<string> Zakaz = new List<string>();
            try
            {
                Zakaz = db.POOrderEntry.Where(x => x.FItemID == ItemId).Include(x => x.POOrder).Where(x => x.POOrder.FBillNo.Contains(Text)).Select(x => x.POOrder.FBillNo).Distinct().ToList();
            }
            catch (Exception e)
            {

            }

            try
            {
                Zakaz.AddRange(db.ICSubContractEntry.Where(x => x.FItemID == ItemId).Include(x => x.ICSubContract).Where(x => x.ICSubContract.FBillNo.Contains(Text)).Select(x => x.ICSubContract.FBillNo).Distinct().ToList());
            }
            catch (Exception e)
            {

            }
            return Json(Zakaz, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutocompleteSearchStorage(string term)
        {
            Dictionary<string, string> Result = new Dictionary<string, string>();
            List<string> Filter = new List<string>();



            Result = SearchStorages(term);

            // string Dept = FindCurrentDepartment();
            /*   if (Dept != "")// Фильтруем склады по выбранному подразделению
               {
                   t_Department D = db.t_Department.Where(x => x.FName.Equals(Dept)).Include(x => x.DepartmentToStock).First();
                   if (D.DepartmentToStock != null && D.DepartmentToStock.Count > 0)
                   {
                       foreach (DepartmentToStock DS in D.DepartmentToStock)
                       {
                           Filter.Add(db.t_Stock.Where(x => x.FItemID == DS.StockId).Select(x => x.FName).First());
                           Filter.Add(db.StocksRusKit.Where(x=>x.FInterID == DS.StockId).Select(x=>x.FRusName).First());
                       }
                   }
                  Result =  Result.Where(x => Filter.Contains(x)).ToList();
               }
            */

            try
            {
                //    Result = Result.Where(x => x.Value.Contains(term)).ToDictionary( x => x.Value, x => x.Key);
            }
            catch
            {
                //   Result = new Dictionary<string,int>();
            }

            //   if (Result.Count == 0)
            //  {
            //     Result.Add( Resources.Resource.PoZaprosuNeNaideno, 0);
            // }

            return Json(Result, JsonRequestBehavior.AllowGet);





            ///   var models = db.t_Stock.Where(x => x.FName.Contains(term))
            //                    .Select(a => new { value = a.FName })
            //                   .Distinct();

            //   return Json(models, JsonRequestBehavior.AllowGet);
        }

        public decimal SearchQTYInStock(string Stock, string Item)
        {
            int ItemId = 0;
          
            try
            {
                ItemId = Convert.ToInt32(Item);
            }
            catch
            {

            }

            if (ItemId == 0)
            {
                try
                {
                    ItemId = db.t_Item.Where(x => x.FNumber.Equals(Item)).Select(x => x.FItemID).First();
                }
                catch
                {

                }
            }
            if (ItemId == 0)
            {
                return 0;
            }

            int StockId = FindStockID(Stock);
            decimal QTY = 0;
            try
            {
                List<ICInventory> Inv = db.ICInventory.Where(x => x.FStockID == StockId && x.FItemID == ItemId).ToList();
                QTY = Inv.Sum(x => x.FQty);
            }
            catch (Exception e)
            {

            }
            return QTY;
        }
        public JsonResult AutocompleteSearchQTYInStock(string Stock, string Item)
        {
            decimal QTY = 0;
            try
            {
                QTY = SearchQTYInStock(Stock, Item);
            }
            catch
            {

            }
            return Json(QTY);
        }
        public JsonResult AutocompleteSearchStorageByItem(string term)
        {
            Dictionary<string, string> Result = new Dictionary<string, string>();
            List<string> Filter = new List<string>();
            Dictionary<string, int> RD = new Dictionary<string, int>();
               UsersKDW U = FindCurrentKDWUser(true);
            // UsersKDW U = CurrentKDWUserModel();
           // int UID = CurrentKDWUserID();
          

            int ItemId = 0;
            try
            {
                ItemId = Convert.ToInt32(term);
            }
            catch
            {

            }
            if (ItemId == 0)
            {

                try
                {
                    ItemId = db.t_Item.Where(x => x.FNumber.Equals(term)).Select(x => x.FItemID).First();

                }
                catch
                {

                }
            }
            if (ItemId == 0)
            {
                return Json("Не бывает такой номенклатуры!");
            }

            Result = SearchStoragesByItem(ItemId);

            List<KingDeeWebRoles> WR = new List<KingDeeWebRoles>();
            List<string> Roles = new List<string>();
            try
            {
                WR = db.KingDeeWebRoles.Where(x => x.UserId == U.Id).Include(x => x.WebRoles).ToList();
                Roles = WR.Select(x => x.WebRoles.Name).ToList();
            }
            catch
            {

            }

            if (Roles.Contains("Комплектовщик")|| Roles.Contains("Мастер") || Roles.Contains("Старший мастер"))  //if (FindCurrentRoles().Contains("Комплектовщик"))
            {
                List<string> StoragesFilter = FindCurrentStoragesIdArray().Distinct().Select(x => x.ToString()).ToList();
                try
                {
                    Result = Result.Where(x => StoragesFilter.Contains(x.Key)).Distinct().ToDictionary(x => x.Key, x => x.Value);
                }
                catch
                {

                }
            }
        

            if (Result.Count == 0)
            {
                // Dictionary<string, int> D = new Dictionary<string, int>();

                Result.Add("0", Resources.Resource.PoZaprosuNeNaideno);
            }

            return Json(Result, JsonRequestBehavior.AllowGet);
        }

        public JsonResult SearchUserID(string term)
        {

            int model = db.t_Item.Where(x => x.FItemClassID == 3 && x.FName.Equals(term))
                            .Select(a => a.FItemID)
                            .First();

            return Json(model, JsonRequestBehavior.AllowGet);
        }


        public UsersKDW FindKDWUserModel(string term)
        {

            int model = 0;
            UsersKDW U = new UsersKDW();
            if (Session["CurrentUserKDWModel"] == null)
            {
                try
                {

                    U = db.UsersKDW.Where(x => x.Name.Equals(term)).Include(x => x.t_Item).Include(x => x.t_Base_User).Include(x => x.DepartmentsToUsers).First();

                    Session["CurrentUserKDWModel"] = U;
                    /*   model = db.t_Item.Where(x => x.FItemClassID == 3 && x.FName.Equals(term))
                                       .Select(a => a.FItemID)
                                       .First();
                     */
                }
                catch (Exception e)
                {


                }
            }
            else
            {
                U = (UsersKDW)Session["CurrentUserKDWModel"];

            }

            return U;
        }



        public int FindUserID(string term)
        {

            int model = 0;
            try
            {

                model = db.UsersKDW.Where(x => x.Name.Equals(term)).Select(a => a.UserID).First();
                /*   model = db.t_Item.Where(x => x.FItemClassID == 3 && x.FName.Equals(term))
                                   .Select(a => a.FItemID)
                                   .First();
                 */
            }
            catch
            {

                try
                {
                    model = db.StocksMOL.Include(x => x.t_Item1).Where(x => x.t_Item1.FItemClassID == 3 && (x.MOL.Equals(term))).Select(x => x.MOLID.Value).First(); // && x.FName.Contains(term)

                    // model = db.HR_Base_User.Where(x => x.FUserName.Equals(term)).Select(a => a.FUserID.Value).First();
                }
                catch
                {

                }

            }

            return model;
        }

        public ActionResult UploadPlanovi()
        {
            return View();
        }
        public void LoadPlanWorks()
        {
            DateTime D = DateTime.Now.Date;
            Session["PlanWorks"] = db.PlanoviWorks.Where(x => x.Date.Value.Year == D.Year && x.Date.Value.Month == D.Month && x.Date.Value.Day == D.Day).ToList();
        }
        public bool PoiskPlanWork(DateTime D, string WorkNumber)
        {
            bool Go = false;
            int f = 0;
            try
            {
                if (Session["PlanWorks"] != null)
                {
                    var PlanWorks = (List<PlanoviWorks>)Session["PlanWorks"];
                    f = PlanWorks.Where(x => x.Date.Value.Year == D.Year && x.Date.Value.Month == D.Month && x.Date.Value.Day == D.Day && x.WorkNumber == WorkNumber).Count();
                }
                else
                {
                    LoadPlanWorks();
                    f = db.PlanoviWorks.Where(x => x.Date.Value.Year == D.Year && x.Date.Value.Month == D.Month && x.Date.Value.Day == D.Day && x.WorkNumber == WorkNumber).Count();
                }

            }
            catch
            {

            }
            if (f > 0)
            {
                Go = true;
            }
            return Go;
        }


        public ActionResult PlanoviWorks()
        {
            DateTime D = DateTime.Now.Date.AddDays(-30);
            List<PlanoviWorks> PW = new List<PlanoviWorks>();
            List<PlanoviView> Result = new List<PlanoviView>();
            List<StarMehWorks> SW = new List<StarMehWorks>();
            try
            {
                SW = db.StarMehWorks.Where(x => x.DateStart >= D).ToList();
            }
            catch
            {

            }
            try
            {
                PW = db.PlanoviWorks.Where(x => x.Date >= D && x.QTY > 0).Include(x => x.ICMO).Include(x => x.ICMO.t_Department).Include(x => x.ICMO.t_Item).Where(x=>x.ICMO.FQty>x.ICMO.FCommitQty).OrderBy(x => x.Date).ToList();
                foreach (var p in PW)
                {
                    PlanoviView V = new PlanoviView();
                    V.PW = p;
                    try
                    {
                        V.SW = SW.Where(x => x.WorkId == p.WorkId && p.Date == x.DateStart && x.QTY > 0).First();
                    }
                    catch
                    {

                    }
                    Result.Add(V);
                }

            }
            catch
            {

            }
            return View(Result);
        }

        public bool ChistkaPlanWork(DateTime D, int DepartmentId)
        {
            //DateTime D = DateTime.Now;
            bool go = false;
            using (var db2 = new KingDeeDB())
            {
                var PW = db2.PlanoviWorks.Where(x => x.Date.Value == D && x.ICMO.FWorkShop == DepartmentId).ToList();
                foreach (PlanoviWorks p in PW)
                {
                    try
                    {

                        db2.PlanoviWorks.Remove(p);
                        db2.SaveChanges();
                        go = true;

                    }
                    catch (Exception e)
                    {
                        SaveToDocLog(0, 0, "Ошибка очистки подразделения " + DepartmentId + " на " + D.ToString("dd.MM.yy") + " причина " + e.Message, 0, 0, 0, "");
                    }
                }
            }
            return go;

        }

        [HttpPost]
        public ActionResult Upload(HttpPostedFileBase upload)
        {
            string warning = "";
            string log = "";
            int Counter = 0;
            List<string> errors = new List<string>();
            List<string> uploaded = new List<string>();
            if (upload != null)
            {



                //call this method inside your working action
                ProgressHub.SendMessage("Инициализация и подготовка...", 0);

                // получаем имя файла
                string fileName = System.IO.Path.GetFileName(upload.FileName);
                ProgressHub.SendMessage("Загружаем файл " + fileName, 0);
                // сохраняем файл в папку Files в проекте
                if (Directory.Exists(Server.MapPath("~/Files/")) == false)
                {
                    try
                    {
                        Directory.CreateDirectory(Server.MapPath("~/Files/"));
                    }
                    catch
                    {
                        warning += "Невозможно создать дирректорию Files";
                        ProgressHub.SendMessage("Невозможно создать дирректорию Files на сервере", 0);
                    }

                }
                ProgressHub.SendMessage("Нашли директорию Files на диске", 0);
                try
                {
                    upload.SaveAs(Server.MapPath("~/Files/" + fileName));
                    ProgressHub.SendMessage("Сохранили файл " + fileName, 0);
                }
                catch
                {
                    warning += "Невозможно сохранить в папку Files файл " + fileName;
                    ProgressHub.SendMessage("Невозможно сохранить файл " + fileName + " на червер", 0);
                }
                //обрабатываем файл после загрузки

                // LoadPlanWorks();
                // System.Text.ASCIIEncoding.ASCII
                string[] readText = System.IO.File.ReadAllLines(Server.MapPath("~/Files/" + fileName), Encoding.Default);//Encoding.GetEncoding("UTF8"));

                DateTime[] Dates = new[] { DateTime.Now.Date, DateTime.Now.Date, DateTime.Now.Date };
                int[] QTYs = new int[] { 10, 12, 14 };
                List<PlanoviWorks> PW = new List<PlanoviWorks>();
                foreach (string s in readText)
                {
                    Counter++;

                    if (Counter == 2)
                    {
                        string Error = "";
                        int DC = 0;
                        foreach (int Q in QTYs)
                        {
                            try
                            {
                                string[] S = s.Split(';');
                                Error = "Ошибка в дате Ячейка " + Q + "! " + S[Q];
                                Dates[DC] = DateTime.ParseExact(S[Q], "dd.MM.yyyy", CultureInfo.GetCultureInfo("ru-RU")); //yyyy/MM/dd
                                                                                                                          // Convert.ToDateTime(S[Q]);
                                uploaded.Add("Найдена дата " + Dates[DC].ToString());



                            }
                            catch (Exception ex)
                            {
                                errors.Add(Error + ex.Message);
                                goto EX;
                                //  break;
                            }
                            DC++;
                        }
                    }
                    if (Counter > 2)
                    {
                        if (s.Contains(";"))
                        {
                            string[] S = s.Split(';');
                            if (S[1].Contains("WORK") && S[1].Length > 5)
                            {
                                //Если в файле есть Work
                                string WorkNumber = S[1];
                                DateTime D = DateTime.Now.Date;
                                //  bool sovpalo = PoiskPlanWork(D, WorkNumber);
                                //  if (!sovpalo) //если нет совпадений
                                //   {

                                try
                                {
                                    int DD = -1;
                                    string Error = "";
                                    foreach (int Q in QTYs)
                                    {
                                        PlanoviWorks P = new PlanoviWorks();
                                        //  P.Date = DateTime.Now;
                                        P.Poryadok = Counter;
                                        DD++;
                                        try
                                        {
                                            try
                                            {
                                                if (S[Q].Equals("") == false)
                                                {

                                                    Error = "Не смогли считать количество " + S[Q] + " " + S[1] + " Date=" + Dates[DD] + "! ";
                                                    S[Q] = S[Q].Replace(" ", "").Replace(".", ",");
                                                    P.QTY = Convert.ToDecimal(S[Q]);
                                                }

                                            }
                                            catch (Exception e)
                                            {
                                                errors.Add(Error + e.Message);
                                                continue;
                                            }

                                            P.WorkNumber = S[1];
                                            P.Date = Dates[DD];
                                            Error = "Не нашли номер WORK в базе " + S[1] + "! ";
                                            P.ICMO = db.ICMO.Where(x => x.FBillNo.Equals(P.WorkNumber)).First();
                                            P.WorkId = P.ICMO.FInterID;
                                            if (P.QTY > 0)
                                            {
                                                PW.Add(P);
                                            }
                                        }
                                        catch (Exception e)
                                        {
                                            errors.Add(Error + e.Message);

                                            continue;
                                        }



                                    }
                                }
                                catch (Exception e)
                                {
                                    Console.WriteLine(e.Message);
                                    errors.Add("Ошибка добавления! " + S[1] + e.Message);
                                    continue;
                                }

                                //  }
                                //   else
                                //  {

                                //  }

                            }
                        }
                    }


                }



                if (PW.Count > 0)
                {
                    //Теперь чистим ворки за дату+ подразделение
                    List<int> Depts = new List<int>();
                    Depts = PW.Select(x => x.ICMO.FWorkShop.Value).Distinct().ToList();
                    // Depts =  DDD.ToDictionary(x => x.DeptId, x => x.Date);
                    //   for (int i = 0; i < 3; i++)
                    //  {
                    foreach (var D in Depts)
                    {
                        List<DateTime> DeptsDate = new List<DateTime>();
                        try
                        {
                            DeptsDate = PW.Where(x => x.ICMO.FWorkShop.Value == D).Select(x => x.Date.Value).Distinct().ToList();
                            foreach (var dd in DeptsDate)
                            {
                                bool go = false;
                                go = ChistkaPlanWork(dd, D);
                                if (go)
                                {
                                    uploaded.Add("Очишено подразделение  " + D);
                                }
                                else
                                {
                                    errors.Add("Не смогли очистить подразделение " + D);
                                }
                            }
                        }

                        catch (Exception e)
                        {
                            errors.Add("Не смогли очистить подразделение " + D + " по ошибке " + e.Message);
                        }
                    }
                    //  }
                    //Теперь грузим новые ворки
                    foreach (var pw in PW)
                    {
                        try
                        {
                            db.PlanoviWorks.Add(pw);
                            db.SaveChanges();

                            uploaded.Add("Добавлено новое задание " + pw.ICMO.FBillNo + " на " + pw.Date + " QTY = " + pw.QTY);
                        }
                        catch (Exception e)
                        {
                            Console.WriteLine(e.Message);
                            errors.Add("Ошибка добавления! " + pw.ICMO.FBillNo + e.Message);
                        }
                    }

                }


            }
            EX:
            ViewBag.Errors = errors;
            ViewBag.Zagrugeno = uploaded;
            ViewBag.Counter = Counter;
            return View();
        }

        public Dictionary<string, string> FindPostavshiks()
        {


            Dictionary<string, string> Result = new Dictionary<string, string>();

            if (Session["Postavshiks"] == null)
            {
                try
                {
                    Result = db.t_Supplier.Select(x => new { x.FName, x.FItemID }).Distinct().ToDictionary(x => x.FItemID.ToString(), x => x.FName);

                    //db.t_Supplier.ToDictionary(x => x.FItemID.ToString(), x => x.FName);
                    Session["Postavshiks"] = Result;
                }
                catch
                {

                }
            }
            else
            {
                Result = (Dictionary<string, string>)Session["Postavshiks"];
            }

            return Result;
        }


        public JsonResult AutocompleteFindPostavshiks(string term)
        {
            List<string> Postavshiks = new List<string>();
            var P = FindPostavshiks();
            try
            {
                Postavshiks = P.Where(x => x.Value.Contains(term)).Select(x => x.Value).ToList();
            }
            catch
            {

            }
            return Json(Postavshiks, JsonRequestBehavior.AllowGet);
        }


        public JsonResult AutocompleteFindPostavshiksPostuplenie(string term)
        {
            DateTime D = DateTime.Now.AddYears(-2);
            List<string> Postavshiks = new List<string>();
            List<t_Supplier> Suppliers = new List<t_Supplier>();
            try
            {
               Suppliers.AddRange(db.POOrderEntry.Where(x => x.FQty > x.FCommitQty ).Include(x => x.POOrder).Where(x=>x.POOrder.FDate>=D).Include(x => x.POOrder.t_Supplier).Select(x => x.POOrder.t_Supplier).Where(x=>x.FName.Contains(term)).Distinct().ToList());//.ToDictionary(x => x.FItemID, y => y.FName);
            }
            catch
            {

            }

            try
            {
                Suppliers.AddRange(db.ICSubContractEntry.Where(x => x.FQty > x.FCommitQty ).Include(x => x.ICSubContract).Where(x=>x.ICSubContract.FDate>=D).Include(x => x.ICSubContract.Supplier).Select(x => x.ICSubContract.Supplier).Where(x => x.FName.Contains(term)).Distinct().ToList());//.ToDictionary(x => x.FItemID, y => y.FName);
            }
            catch
            {

            }



            return Json(Suppliers.Distinct().ToDictionary(x=>x.FItemID.ToString(),y=>y.FName), JsonRequestBehavior.AllowGet);
        }


        public string CurrentUserNow()
        {
            string User = "";
            User = FindCurrentUser();
            return User;
        }
        public ActionResult PostuplenieNaSkladTSD()
        {
            string a = CurrentUserNow();
            if (a.Equals(""))
            {
                return RedirectToAction("Login");
            }
            return View();
        }

        public ActionResult PostuplenieNaSkladTSDMenu()
        {
            ViewBag.Postavshiks = FindPostavshiks();
            ViewBag.Stocks = SearchStoragesPostuplenie();
            ViewBag.Yacheika = db.StockPriem.First().Yacheika;
            ViewBag.Managers = SearchMOL();
            return View();
        }
        public ActionResult PostuplenieNaSkladTSDTable(string Postavshik = "", string POORD = "", string Name = "")
        {

            Session["Dvigenie"] = null;
            int PostId = 0;

            DateTime Date = DateTime.Now.AddMonths(-24);
            List<POOrderEntry> POE = new List<POOrderEntry>();
            List<ICSubContractEntry> SCE = new List<ICSubContractEntry>();
            List<POOrder> PO = new List<POOrder>();
            List<ICSubContract> SC = new List<ICSubContract>();
            if (Postavshik.Equals("") == false)
            {
                try
                {
                    PostId = Convert.ToInt32(FindPostavshiks().Where(x => x.Value.Equals(Postavshik)).Select(x => x.Key).First());
                }
                catch
                {

                }
            }
            //Ищем заказы по поставшику
            if (PostId != 0)
            {
                try
                {
                    PO = db.POOrder.Where(x => x.FCancellation == false && x.FDate > Date && x.FSupplyID == PostId && x.FClosed == 0 && x.FCheckerID > 0).Include(x => x.t_Supplier).ToList();

                }
                catch
                {

                }
                try
                {
                    SC = db.ICSubContract.Where(x => x.FClosed == 0 && x.FDate > Date && x.FSupplyID == PostId && x.FCheckerID > 0).Include(x => x.Supplier).ToList();
                }
                catch
                {

                }
            }
            //Ищем заказы по заказу
            if (POORD != "")
            {
                if (PO.Count > 0)
                {
                    PO = PO.Where(x => x.FBillNo.Contains(POORD) && x.FCheckerID > 0).ToList();
                }
                else
                {
                    PO = db.POOrder.Where(x => x.FCancellation == false && x.FBillNo.Contains(POORD) && x.FClosed == 0&&x.FCheckerID>0).Include(x => x.t_Supplier).ToList();

                }

                if (SC.Count > 0)
                {
                    SC = SC.Where(x => x.FBillNo.Contains(POORD) && x.FCheckerID > 0).ToList();
                }
                else
                {
                    SC = db.ICSubContract.Where(x => x.FBillNo.Contains(POORD) && x.FClosed == 0 && x.FCheckerID > 0).Include(x => x.Supplier).ToList();

                }
            }

            //Ищем все строки выбранных заказов
            if (PO.Count > 0)
            {
                var POid = PO.Select(x => x.FInterID).Distinct().ToList();
                POE = db.POOrderEntry.Where(x => POid.Contains(x.FInterID) && x.FQty != x.FCommitQty).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Include(x => x.POOrder).Include(x => x.POOrder.t_Supplier).ToList();

            }

            if (SC.Count > 0)
            {
                var SCid = SC.Select(x => x.FInterID).Distinct().ToList();
                SCE = db.ICSubContractEntry.Where(x => SCid.Contains(x.FInterID) && x.FQty != x.FCommitQty).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Include(x => x.ICSubContract).Include(x => x.ICSubContract.Supplier).ToList();

            }

            //Ищем по номенклатуре 
            if (Name != "")
            {
                int ItemId = 0;

                try
                {
                    ItemId = db.t_Item.Where(x => x.FName.Contains(Name) || x.FNumber.Contains(Name)).Select(x => x.FItemID).First();
                }
                catch
                {

                }
                if (ItemId != 0)
                {
                    if (POE.Count > 0)
                    {
                        try
                        {
                            POE = POE.Where(x => x.t_Item.FNumber.Contains(Name) || x.t_Item.FFullName.Contains(Name)).OrderBy(x => x.t_Item.FNumber).ToList();
                        }
                        catch
                        {

                        }
                    }
                    else
                    {

                        try
                        {
                            POE = db.POOrderEntry.Include(x => x.POOrder).Where(x => x.FDate > Date && x.FQty > x.FCommitQty && x.FMrpClosed == 0 && x.POOrder.FCancellation == false).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Include(x => x.POOrder.t_Supplier).Where(x => x.t_Item.FNumber.Contains(Name) || x.t_Item.FFullName.Contains(Name)).OrderBy(x => x.t_Item.FNumber).ToList();
                        }
                        catch
                        {

                        }
                    }

                    if (SCE.Count > 0)
                    {
                        try
                        {
                            POE = POE.Where(x => x.t_Item.FNumber.Contains(Name) || x.t_Item.FFullName.Contains(Name)).OrderBy(x => x.t_Item.FNumber).ToList();
                        }
                        catch
                        {

                        }
                    }
                    else
                    {
                        try
                        {
                            SCE = db.ICSubContractEntry.Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Include(x => x.ICSubContract).Where(x => x.ICSubContract.FDate > Date && x.FQty > x.FCommitQty && x.FMrpClosed == 0).Include(x => x.ICSubContract.Supplier).Where(x => x.t_Item.FNumber.Contains(Name) || x.t_Item.FFullName.Contains(Name)).OrderBy(x => x.t_Item.FNumber).ToList();
                        }
                        catch
                        {

                        }
                    }
                }
            }



            if (CultureRU() && (POE.Count > 0 || SCE.Count > 0))
            {
                if (CultureRU())
                {
                    foreach (var Z in POE)
                    {
                        Z.t_Item.FName = FindRussianName(Z.t_Item);

                    }
                    foreach (var F in SCE)
                    {
                        F.t_Item.FName = FindRussianName(F.t_Item);
                    }
                }
            }
            ViewBag.SCE = SCE;
            return View(POE);

        }
        public ActionResult CHGKDW()
        {
            /*   string a = CurrentUserNow();
               if (a.Equals(""))
               {
                   return RedirectToAction("Login");
               }
            */
            return View();
        }

        public ActionResult CHGKDWSobrano()
        {
            List<DvigenieNEW> Result = FindCurrentCHGs();
            DateTime D = DateTime.Now.Date;
            ViewBag.CurrentWin = CurrentWIN();
            ViewBag.CurrentPostavshik = CurrentPostavshik();
            ViewBag.CurrentStock = CurrentStock();
            ViewBag.CurrentMOL = CurrentMOL();
            ViewBag.CurrentMOLName = CurrentMOLName();
            ViewBag.CurrentStockName = CurrentStockName();
            ViewBag.CurrentPostavshikName = CurrentPostavshikName();


           
            return View(Result);
        }

        public ActionResult PostuplenieKDW()
        {
            /*   string a = CurrentUserNow();
               if (a.Equals(""))
               {
                   return RedirectToAction("Login");
               }
            */

           UsersKDW U = FindCurrentKDWUser(true);
            if (U.Id==0)
            {
                return RedirectToAction("Login", "Home");
            }
            return View();
        }

        public ActionResult PostuplenieKDWSelectSupplier()
        {
            DateTime D = DateTime.Now.AddMonths(-24);
            UsersKDW U = FindCurrentKDWUser(true);
            if (U.Id == 0)
            {
                return RedirectToAction("Login", "Home");
            }


            var Suppliers = db.POOrderEntry.Where(x => x.FQty > x.FCommitQty && x.FDate >= D).Include(x => x.POOrder).Include(x => x.POOrder.t_Supplier).Select(x => x.POOrder.t_Supplier).Distinct().ToList();//.ToDictionary(x => x.FItemID, y => y.FName);

            return View(Suppliers);
        }

        public JsonResult AddEntryCHGJson(string QRData)
        {
            string Result = "False";
            List<DvigenieNEW> Dvigs = FindCurrentCHGs();
            try
            {

            }
            catch
            {

            }
            string QRString = FindConvertQR(QRData);

            if (Dvigs.Where(x => x.QRString.Equals(QRString)).Count() == 0)
            {
                bool GO = AddEntryCHG(QRString);
                if (GO)
                {
                    Result = "True";
                }
            }

           // FindDvigeniesQR(QRData);

            return Json(Result);
        }

        public JsonResult EndCHGJson()
        {
            string Result = "True";
            List<DvigenieNEW> Dvigs = new List<DvigenieNEW>();
            SaveCurrentCHGs(Dvigs);
         

            // FindDvigeniesQR(QRData);

            return Json(Result);
        }

        public List<DvigenieNEW> FindCurrentCHGs()
        {
            List<DvigenieNEW> Result = new List<DvigenieNEW>();
            if (Session["CHG"]!=null)
            {
                Result = (List<DvigenieNEW>)Session["CHG"];
            }
            else
            {
                
            }
            return Result;
        }

        public void SaveCurrentCHGs(List<DvigenieNEW> CHGs)
        {
   
            Session["CHG"] = CHGs;

        }

        public bool AddEntryCHG(string QRData)
        {
            if (QRData.Equals(""))
            {
                return false;
            }
            List<DvigenieNEW> Result = FindCurrentCHGs();
            DvigenieNEW D = new DvigenieNEW();

            List<DvigeniesView> Dvigs =  FindDvigeniesQR(QRData,true);
            D = Dvigs.OrderByDescending(x => x.Dvig.Id).First().Dvig;
            bool R = false;
            try
            {
                Result.Add(D);
                SaveCurrentCHGs(Result);
                R = true;
            }
            catch (Exception e)
            {

            }

            return R;
        }
        public bool RemoveEntryCHG(string QRData)
        {
            List<DvigenieNEW> Result = FindCurrentCHGs();
            DvigenieNEW D = new DvigenieNEW();
            bool R = false;

            try
            {
                D = Result.Where(x => x.QRString.Equals(QRData)).First();
               
                Result.Remove(D);
                SaveCurrentCHGs(Result);
                R = true;
            }
            catch (Exception e)
            {

            }

            return R;
        }

        [Culture]
        public ActionResult CHGKDWMenu()
        {

            ViewBag.Stocks = SearchStorages();
            ViewBag.Mols = SearchMOL();

            return View();
        }
        public JsonResult ChangeEntryCHGJson(string QRData, decimal QTY)
        {
            string Result = "False";
            bool GO = ChangeEntryCHG(QRData, QTY);
            if (GO)
            {
                Result = "True";
            }
            return Json(Result);
        }

        public bool ChangeEntryCHG(string QRData, decimal QTY)
        {
            DvigenieNEW D = new DvigenieNEW();
            DvigenieNEW Res = new DvigenieNEW();
            List<DvigeniesView> Dvigs = FindDvigeniesQR(QRData);
            List<DvigenieNEW> Result = FindCurrentCHGs();
            decimal QTYQR  = Dvigs.OrderByDescending(x => x.Dvig.Id).First().Dvig.QTYFact;
            Res = Result.Where(x => x.QRString.Equals(QRData)).First();
            bool R = false;
        
            try
            {
                D = Result.Where(x => x.QRString.Equals(QRData)).First();
                if (QTY <= QTYQR)
                {
                    D.QTY = QTY;
                }

                Res.QTY = D.QTY;
                Res.QTYFact = D.QTY;
                SaveCurrentCHGs(Result);
                R = true;
            }
            catch (Exception e)
            {

            }
            return R;
        }


        public JsonResult ChangeEntryPostuplenieJson(int POOrder, int POOrderEntry, decimal QTY, string FBillNo)
        {
            string Result = "False";
            bool GO = ChangeEntryPostuplenie(FBillNo, POOrder, POOrderEntry,QTY);
            if (GO)
            {
                Result = "True";
            }
            return Json(Result);
        }

        public JsonResult ChangeEntryPostuplenieFactJson(int POOrder, int POOrderEntry, decimal QTY, string FBillNo, int DvigenieId, int StrokaDoka)
        {
            string Result = "False";
            int userId = CurrentKDWUserModel().Id;
            DvigenieNEW D = new DvigenieNEW();
         /*   if (QTY==0)
            {
                return Json("False");
            }
         */
            try
            {
                D = db.DvigenieNEW.Where(x => x.Id == DvigenieId).First();
                ZakazPostavshiku Z = new ZakazPostavshiku();
                Z.FindEntries(POOrder, FBillNo, POOrderEntry);
              
                ICStockBillEntry SE = db.ICStockBillEntry.Where(x => x.FEntryID == StrokaDoka && D.CurrentFInterId == x.FInterID).First(); ;
                SaveToDocLog(D.Id, D.ItemID, "Начали корректировку поступления на склад", QTY, D.StockId, 0, D.CurrentFBillNo);

                decimal QTYInQR = D.QTYFact;
                decimal QTYInStock = SearchQTYInStock(D.StockId.ToString(),D.ItemID.ToString());
                decimal QTYFactInPOOrder = Z.SelectedEntry.FCommitQty;
                decimal QTYMustInPOOrder = Z.SelectedEntry.FQtyMust- Z.SelectedEntry.FCommitQty;
                decimal QTYInEntry = SE.FCommitQty;
                decimal QTYDelta = QTY - QTYInEntry;


                SaveToDocLog(D.Id, D.ItemID, "Разница между принятым "+ Z.SelectedEntry.FCommitQty + " и корректировкой "+QTY +" равна " + QTYDelta, QTY, D.StockId, 0, D.CurrentFBillNo);
                //Если принимаем меньше чем было
                if (QTYDelta<0)
                {
                    if (QTYInStock< Math.Abs(QTYDelta))
                    {
                        //Если на складе нет столько то отменяем операцию
                        return Json("False");
                    }
                    if (QTYFactInPOOrder < Math.Abs(QTYDelta))
                    {
                        //Если на складе нет столько то отменяем операцию
                        return Json("False");
                    }

                  bool StrokaZakaza =  Z.EditEntryZakaza(QTYDelta, userId);//Уменьшаем принятое кол-во в строке заказа 
                    SaveToDocLog(D.Id, D.ItemID, "Отредактировали строку заказа Статус = " + StrokaZakaza, QTY, D.StockId, 0, D.CurrentFBillNo);
                    bool Sklad =  PeremeshenieNaSklad(D.CurrentFInterId, D.StockId, D.ItemID, Math.Abs(QTYDelta), false);//Минусуем на складе
                    SaveToDocLog(D.Id, D.ItemID, "Отняли со склада "+ QTYDelta+ "Статус = "+Sklad, QTY, D.StockId, 0, D.CurrentFBillNo);

                }
                else
                {//Если принимаем больше чем было
                    if (QTYMustInPOOrder < Math.Abs(QTYDelta))
                    {
                        //Если на складе нет столько то отменяем операцию
                        return Json("False");
                    }

                    bool StrokaZakaza = Z.EditEntryZakaza(QTYDelta, userId);//Увеличиваем принятое кол-во в строке заказа 
                    SaveToDocLog(D.Id, D.ItemID, "Отняли из заказа поставщику строку заказа Статус = " + StrokaZakaza, QTY, D.StockId, 0, D.CurrentFBillNo);
                    bool Sklad = PeremeshenieNaSklad(D.CurrentFInterId, D.StockId, D.ItemID, QTYDelta, true); // Плюсуем на склад
                    SaveToDocLog(D.Id, D.ItemID, "Добавили на склад " + QTYDelta + "Статус = " + Sklad, QTY, D.StockId, 0, D.CurrentFBillNo);
                }

                //Меняем количество в строке
                try
                {
                    SE.FCommitQty +=QTYDelta;
                    SE.FQtyMust += QTYDelta;
                    SE.FAuxQtyMust += QTYDelta;
                    SE.FAuxCommitQty += QTYDelta;
                    SE.FQty += QTYDelta;
                    SE.FAuxQty += QTYDelta;
                    db.Entry(SE).State = EntityState.Modified;
                    db.SaveChanges();
                    SaveToDocLog(D.Id, D.ItemID, "Изменили количество в строке документа поступления " + QTYDelta , QTY, D.StockId, 0, D.CurrentFBillNo);
                }

                catch
                {
                    SaveToDocLog(D.Id, D.ItemID, "Ошибка изменения количествоа в строке документа поступления " + QTYDelta, QTY, D.StockId, 0, D.CurrentFBillNo);
                }

                //Правим количество в QR
                try
                {
                    ICStockBill S = db.ICStockBill.Where(x => x.FBillNo.Equals(D.CurrentFBillNo)).Include(x => x.ICStockBillEntry).First();

                    decimal NewSumQR = S.ICStockBillEntry.Where(x => x.FItemID == D.ItemID).Sum(x => x.FQty);
                    EditDvigenieNEW(D, NewSumQR);
                    Result = "True";
                }
                catch
                {

                }



            }
            catch
            {

            }

            return Json(Result);
        }


        public JsonResult RemoveEntryPostuplenieJson(int POOrder, int POOrderEntry, int ItemId)
        {
            string Result = "False";
            bool GO = RemoveEntryPostuplenie(POOrder,POOrderEntry, ItemId);
            if (GO)
            {
                Result = "True";
            }
            return Json(Result);
        }

        public JsonResult AddEntryPostuplenieJson(int POOrder, string POOrderBillNo, int POOrderEntry, int ItemId, decimal QTY)
        {
            string Result = "False";
            bool GO = AddEntryPostuplenie(POOrder, POOrderBillNo,  POOrderEntry, ItemId, QTY);
            if (GO)
            {
                Result = "True";
            }
            return Json(Result);
        }

        public bool RemoveEntryPostuplenie(int POOrder, int POOrderEntry, int ItemId)
        {
            List<PostuplenieNaSklad> P = CurrentPostuplenie();
            PostuplenieNaSklad PE = new PostuplenieNaSklad();
            bool Result = false;
            try
            {
                PE = P.Where(x => x.ZakazEntryId == POOrderEntry && x.ZakazId == POOrder && x.ItemId == ItemId).First();//Находим строку
                P.Remove(PE); //Удаляем строку
                SaveCurrentPostuplenie(P);//Сохраняем поступление в оперативе
                Result = true;
            }
            catch
            {

            }
            return Result;
        }

        public bool ChangeEntryPostuplenie(string FBillNo, int POOrder, int POOrderEntry, decimal QTY)
        {
            List<PostuplenieNaSklad> P = CurrentPostuplenie();
            PostuplenieNaSklad PE = new PostuplenieNaSklad();
            bool Result = false;
            try
            {
                PE = P.Where(x => x.ZakazEntryId == POOrderEntry && x.ZakazId == POOrder).First();//Находим строку
                ZakazPostavshiku Z = new ZakazPostavshiku();
                Z.FindEntries(POOrder, FBillNo, POOrderEntry);
                decimal MaxQTY = Z.SelectedEntry.FQtyMust - Z.SelectedEntry.FCommitQty;
                if (QTY <= MaxQTY)
                {
                    PE.Qty = QTY;
                    SaveCurrentPostuplenie(P);//Сохраняем поступление в оперативе
                    Result = true;
                }
                else
                {
                    Result = false;
                }
            }
            catch
            {

            }
            return Result;
        }

        public bool AddEntryPostuplenie(int POOrder, string POOrderBillNo, int POOrderEntry, int ItemId, decimal QTY)
        {
            List<PostuplenieNaSklad> P = CurrentPostuplenie();
            PostuplenieNaSklad PE = new PostuplenieNaSklad();
            ZakazPostavshiku Z = new ZakazPostavshiku();
            //  ZakazPostavshiku Z = new ZakazPostavshiku();

            //    Z.FindEntries(POOrder,POOrderBillNo,POOrderEntry, ItemId.ToString()); //Ищем заказ поставщику и его строки
            bool Result = false;
            bool EstStroka = true;
            try
            {
               // foreach (var i in P)
               // {
               //     if (i.ItemId == ItemId&& i.)
              //      i.ItemId = 
             //   }

                var pp = P.Where(x => x.ZakazId == POOrder && x.ZakazEntryId == POOrderEntry&&x.ItemId==ItemId).First();
                if (pp== null)
                {
                    EstStroka = false;
                }


            }
            catch (Exception e)
            {
                EstStroka = false;
                
            }
       
            if (EstStroka)
            {
                return Result;
            }
            decimal Price = 0;
            int PostavshikId = 0;
            string PostavshikName = "";
            try
            {
                Z.FindEntries(POOrder, POOrderBillNo, POOrderEntry);
                Price = Z.SelectedEntry.PurchasePrice;
                PostavshikId = Z.SupplierId;
                PostavshikName = Z.SupplierName;

            }
            catch
            {

            }
            try
            {


                PE.DateCreate = DateTime.Now;
                PE.ItemId = ItemId;
                PE.Otmenen = false;
                PE.ZakazEntryId = POOrderEntry;
                PE.ZakazId = POOrder;
                PE.ZakazNumber = POOrderBillNo;
                PE.Qty = QTY;
                PE.t_Item = db.t_Item.Where(x => x.FItemID == ItemId).First();
                PE.FactPrice = Price;
                PE.PostavshikId = Z.SupplierId;
                PE.PostavshikName = Z.SupplierName;
                P.Add(PE);
                SaveCurrentPostuplenie(P);//Сохраняем поступление в оперативе
                Result = true;
            }
            catch
            {

            }
            return Result;
        }


        public void SaveCurrentPostuplenie(List<PostuplenieNaSklad> P)
        {
            //Сохраняем поступление в оперативе
            Session["Postuplenie"] = P;
          
        }

        public JsonResult SetSupplierJson(string Supplier)
        {
            SetSupplier(Supplier);
          //  Session["Supplier"] = null;
            return Json("");
        }
        public void SetSupplier(string Supplier)
        {
            int SupplierId = 0;
            try
            {
                SupplierId =db.t_Supplier.Where(x => x.FName.Equals(Supplier)).Select(x=>x.FItemID).First();
            }
            catch
            {

            }

            if (SupplierId != 0)
            {
                Session["Supplier"] = SupplierId;
            }

        }

        public int CurrentSupplier()
        {
            int P = 0;
            try
            {
                if (Session["Supplier"] == null)
                {
                    //  db.PostuplenieNaSklad.Where(x=>x.Pos)
                }
                else
                {
                    P = (int)Session["Supplier"];
                }
            }
            catch
            {

            }
            return P;
        }

      //  HttpCookie cultureCookie = HttpContext.Request.Cookies["user"];
     //       if (cultureCookie != null)
    //        {
    //            User = cultureCookie.Value;
                
 //           }

public List<PostuplenieNaSklad> CurrentPostuplenie()
        {
            List<PostuplenieNaSklad> P = new List<PostuplenieNaSklad>();
            try
            {
                if (Session["Postuplenie"] == null)
                {
                    //  db.PostuplenieNaSklad.Where(x=>x.Pos)
                    if (Session["WIN"]!=null)
                    {
                        string WIN = (string)Session["WIN"];
                     ICStockBill S = db.ICStockBill.Where(x => x.FBillNo == WIN).Include(x=>x.ICStockBillEntry).First();
                       
                        foreach (ICStockBillEntry E in S.ICStockBillEntry)
                        {
                            decimal Summa = Math.Round(S.ICStockBillEntry.Where(x => x.FItemID == E.FItemID).Sum(x => x.FAuxCommitQty),3);
                            PostuplenieNaSklad pp = new PostuplenieNaSklad();
                                
                              pp.Qty = E.FAuxCommitQty;
                            pp.QTYInStock = Summa;
                            pp.ItemId = E.FItemID.Value;
                            pp.Otmenen = false;
                            pp.DateCreate = S.FDate.Value;
                            pp.ZakazEntryId = E.FOrderEntryID;
                            pp.ZakazId = E.FOrderInterID;
                            pp.ZakazNumber = E.FOrderBillNo;
                            pp.t_Item = db.t_Item.Where(x => x.FItemID == E.FItemID).First();
                            P.Add(pp);
                        }
                        SaveCurrentPostuplenie(P);
                    }
                }
                else
                {
                    P = (List<PostuplenieNaSklad>)Session["Postuplenie"];
                }
            }
            catch
            {

            }
            return P;
        }

        public ActionResult PostuplenieKDWEdit(string CurrentBillNo)
        {
            ViewBag.CurrentWIN = CurrentBillNo;
           // ViewBag.CurrentPostavshik = CurrentPostavshik();
          //  ViewBag.CurrentStock = CurrentStock();
          //  ViewBag.CurrentMOL = CurrentMOL();
          //  ViewBag.CurrentMOLName = CurrentMOLName();
          //  ViewBag.CurrentStockName = CurrentStockName();
         //   ViewBag.CurrentPostavshikName = CurrentPostavshikName();
            List<DvigenieNEW> Dvigenies = new List<DvigenieNEW>();
            List<PostuplenieNaSklad> Postuplenies = new List<PostuplenieNaSklad>();
            ICStockBill S = new ICStockBill();
            try
            {
                Dvigenies = db.DvigenieNEW.Where(x => x.CurrentFBillNo.Equals(CurrentBillNo)).Include(x=>x.t_Item).ToList();
            }
            catch
            {

            }
         
            try
            {
                S = db.ICStockBill.Where(x => x.FBillNo.Equals(CurrentBillNo)).Include(x => x.ICStockBillEntry).First();
            }
            catch
            {

            }

            foreach (var s in S.ICStockBillEntry)
            {
                try
                {
                    DvigenieNEW D = new DvigenieNEW();
                    D = Dvigenies.Where(x => x.ItemID == s.FItemID).First();
                    PostuplenieNaSklad P = new PostuplenieNaSklad();
                    ZakazPostavshiku Z = new ZakazPostavshiku();
                    Z.FindEntries(s.FOrderInterID,s.FOrderBillNo,s.FOrderEntryID);
                    P.DateCreate = D.Date.Value;
                    P.DvigenieNEW = D;
                    P.FactPrice = D.PurchasePrice;
                    P.Id = D.Id;
                    P.ItemId = D.ItemID;
                    P.PlanPrice = D.PlanPrice;
                    P.PostavshikId = D.PostavshikId;
                    P.PostuplenieEntryId = s.FEntryID;
                    P.PostuplenieId = s.FInterID;
                    P.PostuplenieNumber = D.CurrentFBillNo;
                    P.QRId = D.Id;
                    P.Qty = s.FCommitQty;
                    P.QTYInStock = Z.SelectedEntry.FCommitQty;
                    P.t_Item = D.t_Item;
                    P.ZakazId = s.FOrderInterID;
                    P.ZakazEntryId = s.FOrderEntryID;
                    P.ZakazNumber = s.FOrderBillNo;
                    P.PostuplenieEntryId = s.FEntryID;
                    Postuplenies.Add(P);
                }
                catch (Exception e)
                {

                }
            }

            ViewBag.CurrentNo = CurrentBillNo;



            return View(Postuplenies);
        }

        public ActionResult PostuplenieKDWSobrano()
        {
            DateTime D = DateTime.Now.Date;
            ViewBag.CurrentWin = CurrentWIN();
            ViewBag.CurrentPostavshik = CurrentPostavshik();
            ViewBag.CurrentStock = CurrentStock();
            ViewBag.CurrentMOL = CurrentMOL();
            ViewBag.CurrentMOLName = CurrentMOLName();
            ViewBag.CurrentStockName = CurrentStockName();
            ViewBag.CurrentPostavshikName = CurrentPostavshikName();


            List<PostuplenieNaSklad> P =  CurrentPostuplenie();
            return View(P);
        }

        [Culture]
        public ActionResult PostuplenieKDWMenu(string Postavshik = "")
        {
            DateTime D = DateTime.Now.AddYears(-2).Date;
            Dictionary<string, string> Suppliers = new Dictionary<string, string>();
            Dictionary<string, string> Suppliers2 = new Dictionary<string, string>();
            if (Postavshik != "")
            {
                try
                {

                    Suppliers = FindPostavshiks().Where(x => x.Value.Contains(Postavshik)).ToDictionary(x => x.Key.ToString(), x => x.Value);
                  //  Suppliers = db.POOrder.Where(x => x.FCancellation == false && x.FClosed == 0 && x.FDate > D).Include(x => x.t_Supplier).Select(x => new { x.t_Supplier.FName, x.t_Supplier.FItemID }).Distinct().Where(x => x.FName.Contains(Postavshik)).ToDictionary(x => x.FItemID.ToString(), x => x.FName);
                 
                
                    // ViewBag.Suppliers = db.t_Supplier.Where(x=>x.FName.Contains(Postavshik)).ToList();
                }
                catch
                {

                }
            }
            else
            {
                // ViewBag.Suppliers = db.POOrder.Where(x => x.FCancellation == false && x.FClosed == 0 && x.FDate > D).Include(x => x.t_Supplier).Select(x => new { x.t_Supplier.FName, x.t_Supplier.FItemID }).Distinct().ToDictionary(x => x.FItemID.ToString(), x => x.FName);
                // ViewBag.Suppliers = FindPostavshiks();
                Suppliers = FindPostavshiks();

            }
            ViewBag.Suppliers = Suppliers;
            ViewBag.Stocks = SearchStorages();
            ViewBag.Mols = SearchMOL();
            ViewBag.CurrentWIN = CurrentWIN();
            /*
                        if (ZakazPostavshiku != "")
                        {

                            try
                            {
                                ViewBag.Zakaz = db.POOrder.Where(x => x.FName.Contains(Postavshik)).ToList();
                            }
                            catch
                            {

                            }
                        }
                        else
                        {
                            ViewBag.Suppliers = db.t_Supplier.ToList();
                        }
            */
            return View();
        }

        

        public ActionResult PostuplenieKDWTable( string Name = "", string Nomenklatura = "")
        {

            ViewBag.CurrentWIN = CurrentWIN();
            DateTime Date = DateTime.Now.AddMonths(-24);
            List<POOrderEntry> POE = new List<POOrderEntry>();
            List<ICSubContractEntry> SCE = new List<ICSubContractEntry>();


           int  SupplierId = CurrentSupplier();

            if (SupplierId > 0)
            {
                int OldId = 0;
                if (Name != "")
                {
                    try
                    {
                        POE = db.POOrderEntry.Where(x => x.FDate > Date && x.FQty != x.FCommitQty).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Include(x => x.POOrder).Include(x => x.POOrder.t_Supplier).Where(x => x.POOrder.FSupplyID == SupplierId).Where(x=>x.POOrder.FCheckerID>0).Where(x => x.t_Item.FNumber.Contains(Name) || x.t_Item.FFullName.Contains(Name) || x.POOrder.FBillNo.Contains(Name)).OrderBy(x => x.t_Item.FNumber).ToList();
                    }
                    catch
                    {

                    }

                    try
                    {
                        SCE = db.ICSubContractEntry.Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Include(x => x.ICSubContract).Where(x => x.ICSubContract.FSupplyID == SupplierId).Where(x => x.ICSubContract.FDate > Date && x.FQty > x.FCommitQty).Include(x => x.ICSubContract.Supplier).Where(x => x.ICSubContract.FCheckerID > 0).Where(x => x.t_Item.FNumber.Contains(Name) || x.t_Item.FFullName.Contains(Name) || x.ICSubContract.FBillNo.Contains(Name)).OrderBy(x => x.t_Item.FNumber).ToList();
                    }
                    catch
                    {

                    }



                    if (CultureRU())
                    {
                        foreach (var Z in POE)
                        {
                            Z.t_Item.FName = FindRussianName(Z.t_Item);

                        }
                        foreach (var F in SCE)
                        {
                            F.t_Item.FName = FindRussianName(F.t_Item);
                        }
                    }


                }
                else
                {
                    try
                    {
                        POE = db.POOrderEntry.Where(x => x.FDate > Date && x.FQty != x.FCommitQty).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Include(x => x.POOrder).Include(x => x.POOrder.t_Supplier).Where(x => x.POOrder.FCheckerID > 0).Where(x => x.POOrder.FSupplyID == SupplierId).OrderBy(x => x.t_Item.FNumber).ToList();
                    }
                    catch
                    {

                    }

                    try
                    {
                        SCE = db.ICSubContractEntry.Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Include(x => x.ICSubContract).Where(x => x.ICSubContract.FSupplyID == SupplierId).Where(x => x.ICSubContract.FCheckerID > 0).Where(x => x.ICSubContract.FDate > Date && x.FQty > x.FCommitQty).Include(x => x.ICSubContract.Supplier).OrderBy(x => x.t_Item.FNumber).ToList();
                    }
                    catch
                    {

                    }
                }
            }
            ViewBag.SCE = SCE;
            return View(POE);

        }

        public ActionResult PostuplenieTSD()
        {
            string a = CurrentUserNow();
            if (a.Equals(""))
            {
                return RedirectToAction("Login");
            }
            return View();
        }

        public ActionResult PostuplenieTSDMenu()
        {
            return View();
        }
        public ActionResult PostuplenieTSDTable(string Name)
        {

            Session["Dvigenie"] = null;


            DateTime Date = DateTime.Now.AddMonths(-24);
            List<POOrderEntry> POE = new List<POOrderEntry>();
            List<ICSubContractEntry> SCE = new List<ICSubContractEntry>();
            int OldId = 0;
            if (Name != "")
            {
                try
                {
                    POE = db.POOrderEntry.Where(x => x.FDate > Date && x.FQty != x.FCommitQty).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Include(x => x.POOrder).Include(x => x.POOrder.t_Supplier).Where(x => x.t_Item.FNumber.Contains(Name) || x.t_Item.FFullName.Contains(Name) || x.POOrder.FBillNo.Contains(Name)).OrderBy(x => x.t_Item.FNumber).ToList();
                }
                catch
                {

                }

                try
                {
                    SCE = db.ICSubContractEntry.Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Include(x => x.ICSubContract).Where(x => x.ICSubContract.FDate > Date && x.FQty > x.FCommitQty).Include(x => x.ICSubContract.Supplier).Where(x => x.t_Item.FNumber.Contains(Name) || x.t_Item.FFullName.Contains(Name) || x.ICSubContract.FBillNo.Contains(Name)).OrderBy(x => x.t_Item.FNumber).ToList();
                }
                catch
                {

                }



                if (CultureRU())
                {
                    foreach (var Z in POE)
                    {
                        Z.t_Item.FName = FindRussianName(Z.t_Item);

                    }
                    foreach (var F in SCE)
                    {
                        F.t_Item.FName = FindRussianName(F.t_Item);
                    }
                }


            }
            ViewBag.SCE = SCE;
            return View(POE);

        }

        public ActionResult VosstanovitTSD()
        {
            return View();
        }

        public ActionResult VosstanovitTSDMenu()
        {
            ViewBag.Stocks = SearchStorages();
            ViewBag.Managers = SearchMOL();
            ViewBag.Roles = FindCurrentRoles();
            return View();
        }

        public ActionResult VosstanovitTSDNEWTable(string Name = "")
        {

            // Session["Stocks"] = null;
            Session["Dvigenie"] = null;
            DateTime Date = DateTime.Now.AddMonths(-6);
            List<int> Stocks = new List<int>();
            List<ICStockBillEntry> S = new List<ICStockBillEntry>();
            List<ICStockBillEntry> Result = new List<ICStockBillEntry>();
            t_Item I = null;
            try
            {
                I = db.t_Item.Where(x => x.FNumber.Equals(Name)).First();
                if (CultureRU())
                {

                    I = PerevestiItem(I);

                }
            }
            catch
            {

            }
            if (I != null)
            {



                try
                {
                    Stocks = db.ICInventory.Where(x => x.FItemID == I.FItemID && x.FQty > 0).Select(x => x.FStockID).ToList();
                }
                catch
                {

                }

                try
                {
                    S = db.ICStockBillEntry.Where(x => x.FItemID == I.FItemID && Stocks.Contains(x.FDCStockID)).Include(x => x.ICStockBill).Where(x => x.ICStockBill.FDate >= Date && (x.ICStockBill.FBillNo.Contains("WIN") || x.ICStockBill.FBillNo.Contains("JIN") || x.ICStockBill.FBillNo.Contains("CHG") || x.ICStockBill.FBillNo.Contains("CIN"))).ToList();
                }
                catch
                {

                }


                foreach (var s in S)
                {
                    try
                    {
                        decimal QTYSTock = SearchQTYInStock(s.FDCStockID.ToString(), s.FItemID.Value.ToString());
                        if (QTYSTock < s.FQty)
                        {
                            s.FQty = QTYSTock;
                        }
                        if (s.FQty > 0)
                        {
                            Result.Add(s);
                        }
                    }
                    catch
                    {

                    }
                }
            }
            ViewBag.Item = I;

              


            
           



            return View(Result);

        }

        public ActionResult VosstanovitTSDTable(string Name = "")
        {

            // Session["Stocks"] = null;
            Session["Dvigenie"] = null;
            DateTime Date = DateTime.Now.AddYears(-6);
            List<ICSubContractEntry> SCE = new List<ICSubContractEntry>();
            List<POOrderEntry> POE = new List<POOrderEntry>();
            if (Name != "")
            {
                try
                {
                    POE = db.POOrderEntry.Where(x => x.FDate > Date && x.FQty <= x.FCommitQty).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Include(x => x.POOrder).Include(x => x.POOrder.t_Supplier).Where(x => x.t_Item.FNumber.Contains(Name) || x.t_Item.FFullName.Contains(Name) || x.POOrder.FBillNo.Contains(Name)).OrderBy(x => x.t_Item.FNumber).ToList();
                }
                catch
                {

                }

                try
                {
                    SCE = db.ICSubContractEntry.Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Include(x => x.ICSubContract).Where(x => x.ICSubContract.FDate > Date && x.FQty <= x.FCommitQty).Include(x => x.ICSubContract.Supplier).Where(x => x.t_Item.FNumber.Contains(Name) || x.t_Item.FFullName.Contains(Name) || x.ICSubContract.FBillNo.Contains(Name)).OrderBy(x => x.t_Item.FNumber).ToList();
                }
                catch
                {

                }



                if (CultureRU())
                {
                    foreach (var Z in POE)
                    {
                        Z.t_Item.FName = FindRussianName(Z.t_Item);

                    }
                    foreach (var F in SCE)
                    {
                        F.t_Item.FName = FindRussianName(F.t_Item);
                    }
                }


            }
            ViewBag.SCE = SCE;


        
            return View(POE);

        }

        public JsonResult FindMOL(string storage)
        {
            string model = Resources.Resource.VyberiteMOLaSami;
            try
            {
                int MOLID = db.t_Stock.Where(x => x.FName.Equals(storage)).Include(x => x.StocksMOL)
                                .Select(a => a.StocksMOL.FirstOrDefault().MOLID.Value).First();
                model = db.t_Item.Where(x => x.FItemID == MOLID).First().FName;
            }
            catch (Exception e)
            {
                model = Resources.Resource.VyberiteMOLaSami;
            }

            return Json(model, JsonRequestBehavior.AllowGet);
        }

        public List<MolsOfDepartments> SessionMolsOfDepartments()
        {
            List<MolsOfDepartments> MOLS = new List<MolsOfDepartments>();
            if (Session["MolsOfDepartments"] != null)
            {
                MOLS = (List<MolsOfDepartments>)Session["MolsOfDepartments"];
            }
            else
            {

                try
                {
                    MOLS = db.MolsOfDepartments.Include(x => x.Department).Include(x => x.Mol).ToList();
                    Session["MolsOfDepartments"] = MOLS;
                }
                catch
                {

                }

            }
            return MOLS;
        }
        public JsonResult AutocompleteMOLfromWORK(string WORK)
        {
            string model = Resources.Resource.VyberiteMOLaSami;
            try
            {
                int DeptId = db.ICMO.Where(x => x.FBillNo.Equals(WORK)).Select(x => x.FWorkShop.Value).First();
                model = SessionMolsOfDepartments().Where(x => x.DepartmentId == DeptId).Select(x => x.Mol.FName).First();
            }
            catch (Exception e)
            {

            }

            return Json(model, JsonRequestBehavior.AllowGet);
        }
        public JsonResult FindDepartmentMOL(string department)
        {
            string model = Resources.Resource.VyberiteMOLaSami;
            try
            {
                int MOLID = db.t_Item.Where(x => x.FName.Equals(department)).Include(x => x.MolsOfDepartments)
                                .Select(a => a.MolsOfDepartments.FirstOrDefault().MolId).First();
                model = db.t_Item.Where(x => x.FItemID == MOLID).First().FName;
            }
            catch (Exception e)
            {
                model = Resources.Resource.VyberiteMOLaSami;
            }

            return Json(model, JsonRequestBehavior.AllowGet);
        }

        public string FindMOLstring(string storage)
        {
            string model = Resources.Resource.VyberiteMOLaSami;
            int StockId = 0;
            try
            {
                StockId = Convert.ToInt32(storage);
            }
            catch
            {

            }
            if (StockId==0)
            {
               StockId = db.t_Stock.Where(x => x.FName.Equals(storage)).Select(x=>x.FItemID).First();

            }
            if (StockId==0)
            {
                return model;
            }
            try
            {
                int MOLID = db.t_Stock.Where(x => x.FItemID == StockId).Include(x => x.StocksMOL)
                                .Select(a => a.StocksMOL.FirstOrDefault().MOLID.Value).First();
                model = db.t_Item.Where(x => x.FItemID == MOLID).First().FName;
            }
            catch (Exception e)
            {
                model = Resources.Resource.VyberiteMOLaSami;
            }

            return model;
        }



        public JsonResult SearchStockID(string term)
        {
            int model = db.t_Stock.Include(x => x.StocksRusKit).Where(x => x.FName.Equals(term) || x.StocksRusKit.FirstOrDefault().Equals(term))
                            .Select(a => a.FItemID)
                            .First();

            return Json(model, JsonRequestBehavior.AllowGet);
        }



        [Culture]
        public ActionResult LastDvigeniesNew()
        {
            int a = CurrentKDWUserModel().Id;
            var Roles = FindCurrentRoles();
            bool All = false;
            if (Roles.Contains("Администратор")|| Roles.Contains("Начальник склада"))
            {

                All = true;

            }
          
            DateTime Date = DateTime.Now.AddMonths(-1);
            DateTime D = DateTime.Now.AddDays(-3);
            List<DvigenieNEW> Postuplenies = new List<DvigenieNEW>();
            if (!All)
            {
                try
                {
                    Postuplenies = db.DvigenieNEW.Where(x => (x.CurrentFBillNo.Contains("WIN") || x.CurrentFBillNo.Contains("QIN") || x.CurrentFBillNo.Contains("JIN") || x.CurrentFBillNo.Contains("CHG")) && x.QTYFact > 0 && x.UserId == a).Include(x => x.t_Stock).Include(x => x.t_Item).ToList();
                }
                catch
                {

                }
            }
            else
            { 
                try
                {
                    Postuplenies = db.DvigenieNEW.Where(x => (x.CurrentFBillNo.Contains("WIN") || x.CurrentFBillNo.Contains("QIN") || x.CurrentFBillNo.Contains("JIN") || x.CurrentFBillNo.Contains("CHG")) && x.QTYFact > 0&& x.Date>=D ).Include(x => x.t_Stock).Include(x => x.t_Item).ToList();
                }
                catch
                {

                }
            }
            ViewBag.Stocks = new SelectList(db.t_Stock, "FItemID", "FName");

            return View(Postuplenies);
        }


        [Culture]
        public ActionResult Peremeshenie()
        {
            string a = CurrentUserNow();
            if (a.Equals(""))
            {
                return RedirectToAction("Login");
            }
            DateTime Date = DateTime.Now.AddMonths(-6);
            ViewBag.Stocks = new SelectList(db.t_Stock, "FItemID", "FName");

            return View();
        }



        [Culture]
        public ActionResult PrintToPrinterNew(int QRID)
        {
            string CodeTtoPrint = "";
            DvigenieNEW QR = db.DvigenieNEW.Where(x => x.Id == QRID).Include(x=>x.t_Item).Include(x=>x.ICStockBill).First();
            string[] S = QR.QRString.Split(';');

            t_Item Item = new t_Item();
            ItemView I = new ItemView();
            int Lvl = 0;
            int ItemId = 0;
            string WINNo = "";
            decimal Summa = 0;
         try
            {

                Item = QR.t_Item;
                if (CultureRU())
                {
                   Item = PerevestiItem(Item);
                }
            }
            catch
            {

            }

 
            ViewBag.WIN = QR.ICStockBill;
            ViewBag.Item = Item;
            ViewBag.Summa = QR.QTYFact;
            return View(QR);
        }

        [Culture]
        public ActionResult PrintToPrinter(int QRID)
        {
            string CodeTtoPrint = "";
            QRTable QR = db.QRTable.Where(x => x.Id == QRID).First();
            string[] S = QR.QRstring.Split(';');
            int POOrderId = 0;
            int Lvl = 0;
            string Number = S[0];
            Dvigenie D = new Dvigenie();
            ItemView I = new ItemView();
            ZakazPostavshiku Z = new ZakazPostavshiku();
            Z.FBillNo = S[1];

            POOrder P = new POOrder();
            try
            {
                POOrderId = Convert.ToInt32(S[2]);
                if (S[1].Contains("POORD"))
                {
                    P = db.POOrder.Where(x => x.FInterID == POOrderId).First();
                    ViewBag.POOrder = P.FBillNo;
                }
                else
                {
                    var V = db.ICSubContract.Where(x => x.FInterID == POOrderId).First();
                    ViewBag.POOrder = V.FBillNo;
                }
            }
            catch
            {

            }

            try
            {
                D = db.Dvigenie.Where(x => x.QRID.Value == QRID).OrderByDescending(x => x.Id).First();
            }
            catch
            {

            }

            ViewBag.Item = S[0];
            ViewBag.QTY = D.QTYFact;
            ViewBag.Roles = FindCurrentRoles();
            /*       try
                   {
                       POOrderId = Convert.ToInt32(S[2]);
                       Lvl = Convert.ToInt32(S[3]);
                       I.Lev = Lvl;
                       I.POOrder = db.POOrder.Where(x=>x.FInterID == POOrderId).First();
                       I.Item = db.t_Item.Where(x => x.FNumber.Equals(Number)).Include(x=>x.t_Stock).Include(x=>x.StocksRusKit).First();
                       I.FindDvigenies();
                       if (CultureRU())
                       {
                           I.Item = PerevestiItem(I.Item);
                       }
                    //   I.FindDvigenies();

                   }
                   catch
                   {

                   }

       */
            //   QR.QRstring = Number + ";" + I.Item.FName + ";" + S[1] + ";" + I.LastDvig.Date + ";" + I.LastDvig.FBillNo + ";" + I.Item.FName + ";" + I.LastDvig.Stock.FName ;
            //   var dir = Server.MapPath("/Images");
            //   var path = Path.Combine(dir, id + ".jpg"); //validate the path for security or use other means to generate the path.
            //    return base.File(path, "image/jpeg");
            //  var entityItem = new byte[QR.QR.Length];
            // File F = InputStream.Read(entityItem, 0, QR.QR.Length);
            //  file.InputStream.Close();

            //   return RedirectToAction("GenerateQrCode",new { QRText = QR.QRstring });
            //   return  File(QR.QR, "application/jpeg", "QR.jpg");
            return View(QR);
        }

        public ActionResult PrintImage(string QRText)
        {
            string qrtext = QRText; //считываем текст из TextBox'a
            QRCodeEncoder encoder = new QRCodeEncoder(); //создаем объект класса QRCodeEncoder
            Bitmap qrCodeImage = encoder.Encode(qrtext);
            //write your own methode to convert your bit map to byte array, here is a link
            //http://stackoverflow.com/questions/7350679/convert-a-bitmap-into-a-byte-array-in-c
            byte[] byteArray = ConvertToByteArray(qrCodeImage);
            return File(byteArray, "image/jpeg");
        }

        public ActionResult GetDvigenies()
        {

            return View();
        }
        public ActionResult GetDvigeniesMenu()
        {

            return View();
        }
        public ActionResult GetDvigeniesTable(string D = "")
        {
            List<Dvigenie> Dvigs = new List<Dvigenie>();
            DateTime Date = DateTime.Now.AddMonths(6);
            if (D == "")
            {
                try
                {
                    Dvigs = db.Dvigenie.Include(x => x.Item).Include(x => x.Stock).Include(x => x.POOrder).Include(x => x.POOrder.t_Supplier).Where(x => x.Date >= Date).OrderByDescending(x => x.Date).ToList();
                }
                catch
                {

                }
            }
            else
            {
                try
                {
                    Dvigs = db.Dvigenie.Include(x => x.Item).Include(x => x.Stock).Include(x => x.POOrder).Include(x => x.POOrder.t_Supplier).Where(x => x.FBillNo.Contains(D) || x.Item.FName.Contains(D) || x.Item.FNumber.Contains(D) || x.Stock.FName.Contains(D)).ToList();
                }
                catch
                {

                }
            }
            return View(Dvigs);
        }

        //Восстановить поступление на склад
        public JsonResult VostPostJson(int POOrderId, int ItemId, string Stock, string FCommitQty, string FBillNo, string ZakazPostavshiku)
        {

            int MaxLVL = SelectMaxLev(POOrderId, ItemId, FBillNo);
            MaxLVL++;
            int StockId = 0;
            try
            {
                StockId = FindStockID(Stock);//db.t_Item.Where(x => x.FName.Equals(Stock)).Select(x=>x.FItemID).First();

            }
            catch
            {

            }
            decimal QTY = 0;
            try
            {
                FCommitQty = FCommitQty.Replace(',', '.');
                QTY = Math.Round(Convert.ToDecimal(FCommitQty), 3);
            }
            catch (Exception e)
            {

            }
            t_Item I = db.t_Item.Where(x => x.FItemID == ItemId).First();
            int QRID = SaveQR(I, FBillNo, POOrderId, MaxLVL);
            int DvigenieId = SaveDvigenie(ZakazPostavshiku, FBillNo, QTY, ItemId, POOrderId, 0, StockId, QRID, MaxLVL, 0, "", true);
            AddStatusOTK(DvigenieId, 2);
            return Json("Ok" + ";" + QRID + ";true");
        }

        public ActionResult PredNZPQRs(int WorkId, int itemId)
        {
            List<PredNZP> Result = new List<PredNZP>();
            List<Dvigenie> Dvigs = new List<Dvigenie>();
            int StockId = 0;

            try
            {

                Result = db.PredNZP.Where(x => x.WorkId == WorkId && x.ItemId == itemId).ToList();


            }
            catch
            {

            }
            return View(Result);
        }

        public ActionResult InventQRs(string Stock, int ItemId)
        {
            List<InventQR> Result = new List<InventQR>();
            List<Dvigenie> Dvigs = new List<Dvigenie>();
            int StockId = 0;
            try
            {
                StockId = FindStockID(Stock);//db.t_Item.Where(x => x.FName.Equals(Stock)).Select(x=>x.FItemID).First();

            }
            catch
            {

            }
            try
            {

                Result = db.InventQR.Where(x => x.ItemId == ItemId && x.StockID == StockId).Include(x => x.QRTable).ToList();

                foreach (var R in Result)
                {
                    R.QTY = db.LastDvigs.Where(x => x.QRId == R.QRId).Include(x => x.Dvigenie).Select(x => x.Dvigenie.QTYFact).First();
                }
            }
            catch
            {

            }
            return View(Result);
        }

        public JsonResult VostPostVedomostJson(int ItemId, string Stock, string FCommitQty, string ZakazPostavshiku, string MESTO)
        {
            int POOrderId = 1151;
            string FBillNo = "POORD000022";
            POOrder P = new POOrder();
            ICSubContract S = new ICSubContract();
            if (MESTO == null || MESTO == "")
            {
                return Json(Resources.Resource.ScanMesto);
            }
            if (ZakazPostavshiku == "")
            {
                ZakazPostavshiku = "POORD000022";

            }
            ZakazPostavshiku Z = new ZakazPostavshiku();
            try
            {
                if (ZakazPostavshiku.Contains("POORD"))
                {
                    P = db.POOrder.Where(x => x.FBillNo.Equals(ZakazPostavshiku)).First();
                    POOrderId = P.FInterID;
                    FBillNo = P.FBillNo;
                }
                else
                {
                    S = db.ICSubContract.Where(x => x.FBillNo.Equals(ZakazPostavshiku)).First();
                    POOrderId = S.FInterID;
                    FBillNo = S.FBillNo;
                }
            }
            catch
            {

            }

            int MaxLVL = SelectMaxLev(POOrderId, ItemId, ZakazPostavshiku);
            MaxLVL++;
            int StockId = 0;
            try
            {
                StockId = FindStockID(Stock);//db.t_Item.Where(x => x.FName.Equals(Stock)).Select(x=>x.FItemID).First();

            }
            catch
            {

            }
            decimal QTY = 0;
            try
            {
                //Именно запятая в точку для китайского сервера критично
                FCommitQty = FCommitQty.Replace(',', '.');
                QTY = Math.Round(Convert.ToDecimal(FCommitQty), 3);
            }
            catch (Exception e)
            {

            }
            t_Item I = db.t_Item.Where(x => x.FItemID == ItemId).First();
            int QRID = 0;
            if (QTY > 0 && ItemId != 0)
            {


                QRID = SaveQR(I, FBillNo, POOrderId, MaxLVL);
                int DvigenieId = SaveDvigenie(ZakazPostavshiku, FBillNo, QTY, ItemId, POOrderId, 0, StockId, QRID, MaxLVL, 0, "", true);
                UsersKDW U = CurrentKDWUserModel();
                try
                {
                    InventQR IQR = new InventQR();
                    IQR.VedomostId = 0;
                    IQR.QRId = QRID;
                    IQR.QTY = QTY;
                    IQR.StartDate = DateTime.Now;
                    IQR.UserId = U.Id;
                    IQR.ItemId = ItemId;
                    IQR.StockID = StockId;

                    db.InventQR.Add(IQR);
                    db.SaveChanges();
                }
                catch
                {

                }
                AddStatusOTK(DvigenieId, 2);

                MestoPrikrutit(MESTO, DvigenieId, ItemId);
            }
            return Json("Ok" + ";" + QRID + ";true");
        }




        [Culture]
        public ActionResult VosstanovitPostuplenie(int Id, int EntryId, string Tip = "POORD")
        {
            // DateTime Date = DateTime.Now.AddMonths(-6);
            string a = CurrentUserNow();
            if (a.Equals(""))
            {
                return RedirectToAction("Login");
            }
            ZakazPostavshiku Z = new ZakazPostavshiku();
            try
            {
                Z.FindEntries(Id, Tip, EntryId);
            }
            catch
            {

            }

            if (CultureRU())
            {
                foreach (var z in Z.Entries)
                {
                    z.Item = PerevestiItem(z.Item);
                    z.ItemName = z.Item.FName;
                }
            }

            /*   var Items = db.POOrderEntry.Where(x => x.FInterID == Id&&x.FEntryID==EntryId).Include(x => x.t_Item).Include(x=>x.t_Item.NomenklaturaEnterprise).Include(x => x.POOrder.t_Supplier).ToList();
               if (CultureRU())
               {
                   foreach (var i in Items)
                   {
                       i.t_Item = PerevestiItem(i.t_Item);
                   }
               }
             */
            ViewBag.Department = Z.DepartmentName;// Items[0].POOrder.t_Department.FName;
            Dictionary<string, string> D = SearchStoragesByItem(Z.SelectedEntry.ItemId);
            List<string> Stocks = D.Select(x => x.Value.ToString()).ToList();
            ViewBag.Stocks = D; //SearchStorages();
            // ViewBag.Stocks = new SelectList(db.t_Stock, "FItemID", "FName");
            //  ViewBag.Managers = new SelectList(db.t_Item.Where(x=>x.FItemClassID==3), "FItemID", "FName");
            ViewBag.Managers = SearchMOL();
            decimal QTY = 0;
            if (Stocks != null && Stocks.Count > 0)
            {
                QTY = SearchQTYInStock(Stocks[0], Z.SelectedEntry.ItemNumber);
            }
            ViewBag.QTY = QTY;
            /*
            var Item = db.POOrderEntry.Where(x => x.FInterID == Id && x.FEntryID == EntryId).Include(x => x.t_Item).Include(x => x.POOrder.t_Supplier).First();
            POOrder POOrder = db.POOrder.Where(x => x.FInterID == Id).First();
            string ZakazPostavshiku =POOrder.FBillNo;
            var Post = db.ICStockBillEntry.Where(x => x.FSourceInterId == Id).Include(x => x.ICStockBill).First();
            string Postuplenie = Post.ICStockBill.FBillNo;
            t_Item St = db.t_Item.Where(x => x.FItemID == Post.FDCStockID).First();
            string Stock = St.FName;
            ViewBag.Postuplenie = Postuplenie;
            ViewBag.Stock = Stock;

            ViewBag.Stocks = SearchStorages();
            ViewBag.Mols = SearchMOL();
            ViewBag.ZakazPostavshiku = ZakazPostavshiku;
            ViewBag.POOrderID = POOrder.FInterID;
            ViewBag.StockId = St.FItemID;
            */

            //   ViewBag.Department = Items[0].POOrder.t_Department.FName;
            //   ViewBag.Stocks = SearchStorages();
            // ViewBag.Stocks = new SelectList(db.t_Stock, "FItemID", "FName");
            //  ViewBag.Managers = new SelectList(db.t_Item.Where(x=>x.FItemClassID==3), "FItemID", "FName");
            //   ViewBag.Managers = SearchMOL();
            //    foreach (var I in Items)
            //      {
            //         foreach (var E in I.POOrderEntry)
            //         {
            //            E.POOrder = db.POOrderEntry.Where(x => x.FInterID == E.FInterID).Include(x => x.POOrder);
            //        }
            //   }
            //  var Zakazi = db.POOrder.Where(x => x.FDate >= Date).Include(x => x.t_Supplier).Include(x => x.POOrderEntry).ToList();
            return View(Z);
        }

        [Culture]
        public ActionResult NewPostuplenie(int Id, int EntryId, string Tip = "POORD")
        {
            Session["Stocks"] = null;
            DateTime Date = DateTime.Now.AddMonths(-6);
            string a = CurrentUserNow();
            if (a.Equals(""))
            {
                return RedirectToAction("Login");
            }
            ZakazPostavshiku Z = new ZakazPostavshiku();
            try
            {
                Z.FindEntries(Id, Tip, EntryId);
            }
            catch
            {

            }

            if (CultureRU())
            {
                foreach (var z in Z.Entries)
                {
                    z.Item = PerevestiItem(z.Item);
                    z.ItemName = z.Item.FName;
                }
            }

            /*   var Items = db.POOrderEntry.Where(x => x.FInterID == Id&&x.FEntryID==EntryId).Include(x => x.t_Item).Include(x=>x.t_Item.NomenklaturaEnterprise).Include(x => x.POOrder.t_Supplier).ToList();
               if (CultureRU())
               {
                   foreach (var i in Items)
                   {
                       i.t_Item = PerevestiItem(i.t_Item);
                   }
               }
             */
            ViewBag.Department = Z.DepartmentName;// Items[0].POOrder.t_Department.FName;
            ViewBag.Stocks = SearchStoragesPostuplenie();
            ViewBag.Yacheika = db.StockPriem.First().Yacheika;
            // ViewBag.Stocks = new SelectList(db.t_Stock, "FItemID", "FName");
            //  ViewBag.Managers = new SelectList(db.t_Item.Where(x=>x.FItemClassID==3), "FItemID", "FName");
            ViewBag.Managers = SearchMOL();
            //    foreach (var I in Items)
            //      {
            //         foreach (var E in I.POOrderEntry)
            //         {
            //            E.POOrder = db.POOrderEntry.Where(x => x.FInterID == E.FInterID).Include(x => x.POOrder);
            //        }
            //   }
            //  var Zakazi = db.POOrder.Where(x => x.FDate >= Date).Include(x => x.t_Supplier).Include(x => x.POOrderEntry).ToList();
            return View(Z);
        }

        [Culture]
        public ActionResult NewQUIN()
        {


            ViewBag.Stocks = SearchStoragesPostuplenie();
            ViewBag.Yacheika = db.StockPriem.First().Yacheika;
            ViewBag.Managers = SearchMOL();

            return View();
        }


        public JsonResult AutocompleteYacheikaRazmesheniya(int StockId)
        {
            string Yacheika = "";
            try
            {
                Yacheika = db.StockPriem.Where(x => x.StockId == StockId).Select(x => x.Yacheika).First();
            }
            catch
            {

            }
            return Json(Yacheika);
        }
        private Bitmap NewQR(string QRText)
        {
            string qrtext = QRText; //считываем текст из TextBox'a
            QRCodeEncoder encoder = new QRCodeEncoder(); //создаем объект класса QRCodeEncoder
            Bitmap qrcode = encoder.Encode(qrtext); // кодируем слово, полученное из TextBox'a (qrtext) в переменную qrcode. класса Bitmap(класс, который используется для работы с изображениями)
            return (qrcode); // pictureBox выводит qrcode как изображение.
        }

        public static byte[] ConvertToByteArray(Image img)
        {
            using (var stream = new MemoryStream())
            {
                img.Save(stream, System.Drawing.Imaging.ImageFormat.Png);
                return stream.ToArray();
            }
        }

        public ActionResult GenerateQrCodeOld(string QRText)
        {
            string qrtext = QRText; //считываем текст из TextBox'a
            string[] S = qrtext.Split(';');
            string PartNumber = S[0];
            PointF firstLocation = new PointF(0f, 117f);
            PointF imageLocation = new PointF(10f, 0f);
            QRCodeEncoder encoder = new QRCodeEncoder(); //создаем объект класса QRCodeEncoder
            Bitmap qrCodeImage = encoder.Encode(qrtext);

            //  Bitmap NB = new Bitmap(140, 140);//(qrCodeImage, new Size(117, 130));
            //    SolidBrush brush = new SolidBrush(Color.White);

            //    using (Graphics graphics = Graphics.FromImage(NB))
            //    {
            //         using (Font arialFont = new Font("Arial", 14))
            //        {
            //             graphics.FillRectangle(brush, 0, 0, 140, 140);
            //             graphics.DrawString(PartNumber, arialFont, Brushes.Black, firstLocation);
            //             graphics.DrawImage(qrCodeImage, imageLocation);
            //        }
            //    }

            //     Bitmap NB2 = new Bitmap(NB, new Size(110, 110));
            //  Guid G = new Guid();
            // NB2.Save(G.ToString()+".jpg", System.Drawing.Imaging.ImageFormat.Jpeg);

            byte[] byteArray = ConvertToByteArray(qrCodeImage);
            return File(byteArray, "image/jpeg");
        }


        public ActionResult GenerateQrCode(string QRText, string QTY = "")
        {
            string qrtext = QRText; //считываем текст из TextBox'a
            string[] S = qrtext.Split(';');
            string PartNumber = S[0];
            PointF firstLocation = new PointF(0f, 115f);
            PointF secondLocation = new PointF(0f, 125f);
            PointF zakazLocation = new PointF(0f, 135f);
            PointF imageLocation = new PointF(0f, 0f);
            int X = 150;
            int Y = 150;

            QRCodeEncoder encoder = new QRCodeEncoder(); //создаем объект класса QRCodeEncoder
            Bitmap qrCodeImage = encoder.Encode(qrtext);
            Bitmap NB = new Bitmap(X, Y);//(qrCodeImage, new Size(117, 130));
            SolidBrush brush = new SolidBrush(Color.White);

           

            DvigenieNEW Dvig = new DvigenieNEW();
            string ZakazPokupatelya = "";
            try
            {
              Dvig = db.DvigenieNEW.Where(x => x.QRString.Equals(QRText)).OrderByDescending(x => x.Id).First();
                ZakazPokupatelya = Dvig.ZakazPokupatelya;
                if (ZakazPokupatelya.Length>10)
                {
                    ZakazPokupatelya = ZakazPokupatelya.Remove(10);
                }
            }
            catch
            {

            }
            if (qrtext.Contains("BIGQR") == false)
            {
                if (Dvig.Id == 0)
                {
                    try
                    {
                        int itemId = Convert.ToInt32(S[1]);
                        PartNumber = db.t_Item.Where(x => x.FItemID == itemId).First().FNumber;
                    }
                    catch
                    {

                    }
                }
                else
                {
                    PartNumber = Dvig.ItemNumber;
                }
            }





            //Set the resolution for the rotation image

            //Create a graphics object



            using (Graphics graphics = Graphics.FromImage(NB))
            {

                using (Font arialFont = new Font("Arial", 11))
                {
                    graphics.FillRectangle(brush, 0, 0, X, Y);

                    if (qrtext.Contains("BIGQR") == false)
                    {
                        graphics.DrawString("" + PartNumber, arialFont, Brushes.Black, firstLocation);
                    }
                    else
                    {
                        try
                        {
                            graphics.DrawString("" + S[2], arialFont, Brushes.Black, firstLocation);
                        }
                        catch
                        {
                            graphics.DrawString("" + PartNumber, arialFont, Brushes.Black, firstLocation);
                        }
                    }

                    if (QTY.Equals("") == false)
                    {
                        QTY = QTY.Replace(".", "·");
                        graphics.DrawString("" + QTY, arialFont, Brushes.Black, secondLocation);
                    }

                    graphics.DrawString("" + ZakazPokupatelya, arialFont, Brushes.Black, zakazLocation);

                    graphics.DrawImage(qrCodeImage, imageLocation);
                    //   graphics.TranslateTransform((float)NB.Width / 2, (float)NB.Height / 2);
                    //    graphics.RotateTransform(90);
                    //   graphics.TranslateTransform(-(float)NB.Width / 2, -(float)NB.Height / 2);
                    graphics.DrawImage(NB, new System.Drawing.Point(0, 0));
                }
            }


            using (Graphics gdi = Graphics.FromImage(NB))
            {
                //Rotate the image
                gdi.TranslateTransform((float)NB.Width / 2, (float)NB.Height / 2);
                gdi.RotateTransform(90);
                gdi.TranslateTransform(-(float)NB.Width / 2, -(float)NB.Height / 2);
                gdi.FillRectangle(brush, 0, 0, 2, 120);
                gdi.DrawImage(NB, new System.Drawing.Point(0, 0));


            }

            Bitmap cropBmp = NB.Clone(new Rectangle(0, 0, 150, 120), NB.PixelFormat);


            //Для картинки
            //   Bitmap NB2 = new Bitmap(NB, new Size(110, 110));
            //  Guid G = new Guid();
            // NB2.Save(G.ToString()+".jpg", System.Drawing.Imaging.ImageFormat.Jpeg);

            //  Rectangle rect = new Rectangle(0, 0, NB.Width, NB.Height);

            /*    BitmapData bitmapData = NB.LockBits(rect, ImageLockMode.ReadWrite, PixelFormat.Format32bppRgb);
                try
                {
                    int[] bitmapRGB = new int[NB.Width * NB.Height];
                    Marshal.Copy(bitmapData.Scan0, bitmapRGB, 0, bitmapRGB.Length);
                    for (int counter = 0; counter < bitmapRGB.Length; counter++) bitmapRGB[counter] = ~bitmapRGB[counter];
                    Marshal.Copy(bitmapRGB, 0, bitmapData.Scan0, bitmapRGB.Length);
                }
                finally
                {
                    NB.UnlockBits(bitmapData);
                }
            */
            // pictureBox.Image = bitmap;
            cropBmp = ConvertTo1Bit(cropBmp);
            byte[] byteArray = ConvertToByteArray(cropBmp);
            return File(byteArray, "image/png");
        }

        public ActionResult GenerateQrCodeWORKER(string QRText)
        {
            string qrtext = QRText; //считываем текст из TextBox'a
            string[] S = qrtext.Split(';');
            string PartNumber = S[1] + S[2];
            PointF firstLocation = new PointF(0f, 115f);
            PointF secondLocation = new PointF(0f, 125f);
            PointF zakazLocation = new PointF(0f, 135f);
            PointF imageLocation = new PointF(0f, 0f);
            int X = 150;
            int Y = 150;

            QRCodeEncoder encoder = new QRCodeEncoder(); //создаем объект класса QRCodeEncoder
            Bitmap qrCodeImage = encoder.Encode(qrtext);
            Bitmap NB = new Bitmap(X, Y);//(qrCodeImage, new Size(117, 130));
            SolidBrush brush = new SolidBrush(Color.White);



            DvigenieNEW Dvig = new DvigenieNEW();
         

            using (Graphics graphics = Graphics.FromImage(NB))
            {

                using (Font arialFont = new Font("Arial", 11))
                {
                    graphics.FillRectangle(brush, 0, 0, X, Y);

                   
                    graphics.DrawString("" + PartNumber, arialFont, Brushes.Black, firstLocation);

                    graphics.DrawImage(qrCodeImage, imageLocation);
                    graphics.DrawImage(NB, new System.Drawing.Point(0, 0));
                }
            }


            using (Graphics gdi = Graphics.FromImage(NB))
            {
                //Rotate the image
                gdi.TranslateTransform((float)NB.Width / 2, (float)NB.Height / 2);
                gdi.RotateTransform(90);
                gdi.TranslateTransform(-(float)NB.Width / 2, -(float)NB.Height / 2);
                gdi.FillRectangle(brush, 0, 0, 2, 120);
                gdi.DrawImage(NB, new System.Drawing.Point(0, 0));


            }

            Bitmap cropBmp = NB.Clone(new Rectangle(0, 0, 150, 120), NB.PixelFormat);


            cropBmp = ConvertTo1Bit(cropBmp);
            byte[] byteArray = ConvertToByteArray(cropBmp);
            return File(byteArray, "image/png");
        }


        public static Bitmap ConvertTo1Bit(Bitmap input)
        {
            var masks = new byte[] { 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01 };
            var output = new Bitmap(input.Width, input.Height, PixelFormat.Format1bppIndexed);
            var data = new sbyte[input.Width, input.Height];
            var inputData = input.LockBits(new Rectangle(0, 0, input.Width, input.Height), ImageLockMode.ReadOnly, PixelFormat.Format24bppRgb);
            try
            {
                var scanLine = inputData.Scan0;
                var line = new byte[inputData.Stride];
                for (var y = 0; y < inputData.Height; y++, scanLine += inputData.Stride)
                {
                    Marshal.Copy(scanLine, line, 0, line.Length);
                    for (var x = 0; x < input.Width; x++)
                    {
                        data[x, y] = (sbyte)(64 * (GetGreyLevel(line[x * 3 + 2], line[x * 3 + 1], line[x * 3 + 0]) - 0.5));
                    }
                }
            }
            finally
            {
                input.UnlockBits(inputData);
            }
            var outputData = output.LockBits(new Rectangle(0, 0, output.Width, output.Height), ImageLockMode.WriteOnly, PixelFormat.Format1bppIndexed);
            try
            {
                var scanLine = outputData.Scan0;
                for (var y = 0; y < outputData.Height; y++, scanLine += outputData.Stride)
                {
                    var line = new byte[outputData.Stride];
                    for (var x = 0; x < input.Width; x++)
                    {
                        var j = data[x, y] > 0;
                        if (j) line[x / 8] |= masks[x % 8];
                        var error = (sbyte)(data[x, y] - (j ? 32 : -32));
                        if (x < input.Width - 1) data[x + 1, y] += (sbyte)(7 * error / 16);
                        if (y < input.Height - 1)
                        {
                            if (x > 0) data[x - 1, y + 1] += (sbyte)(3 * error / 16);
                            data[x, y + 1] += (sbyte)(5 * error / 16);
                            if (x < input.Width - 1) data[x + 1, y + 1] += (sbyte)(1 * error / 16);
                        }
                    }
                    Marshal.Copy(line, 0, scanLine, outputData.Stride);
                }
            }
            finally
            {
                output.UnlockBits(outputData);
            }
            return output;
        }

        public static double GetGreyLevel(byte r, byte g, byte b)
        {
            return (r * 0.299 + g * 0.587 + b * 0.114) / 255;
        }


        [Culture]
        public ActionResult GenerateQrCodeNaPolku(string QRText)
        {
            string qrtext = QRText; //считываем текст из TextBox'a
            string[] S = qrtext.Split(';');

            string StellagNumber = "";
            int StellagId = Convert.ToInt32(S[2]);
            try
            {
                StellagNumber = db.Planogramma.Where(x => x.Id == StellagId).Select(x => x.Num).First().ToString();
            }
            catch
            {

            }
            string PartNumber = StellagNumber + "-" + S[3] + "-" + S[4];//"通道 " +
            PointF firstLocation = new PointF(5f, 117f);
            PointF imageLocation = new PointF(10f, 0f);
            QRCodeEncoder encoder = new QRCodeEncoder(); //создаем объект класса QRCodeEncoder
            Bitmap qrCodeImage = encoder.Encode(qrtext);
            Bitmap QR2 = new Bitmap(qrCodeImage, new Size(120, 120));
            Bitmap NB = new Bitmap(140, 140);//(qrCodeImage, new Size(117, 130));
            SolidBrush brush = new SolidBrush(Color.White);

            using (Graphics graphics = Graphics.FromImage(NB))
            {
                using (Font arialFont = new Font("Arial", 18))
                {
                    graphics.FillRectangle(brush, 0, 0, 140, 140);
                    graphics.DrawString(PartNumber, arialFont, Brushes.Black, firstLocation);
                    graphics.DrawImage(QR2, imageLocation);
                }
            }

            //   Bitmap NB2 = new Bitmap(NB, new Size(110, 110));
            //  Guid G = new Guid();
            // NB2.Save(G.ToString()+".jpg", System.Drawing.Imaging.ImageFormat.Jpeg);

            /*   Rectangle rect = new Rectangle(0, 0, NB.Width, NB.Height);

               BitmapData bitmapData = NB.LockBits(rect, ImageLockMode.ReadWrite, PixelFormat.Format32bppRgb);
               try
               {
                   int[] bitmapRGB = new int[NB.Width * NB.Height];
                   Marshal.Copy(bitmapData.Scan0, bitmapRGB, 0, bitmapRGB.Length);
                   for (int counter = 0; counter < bitmapRGB.Length; counter++) bitmapRGB[counter] = ~bitmapRGB[counter];
                   Marshal.Copy(bitmapRGB, 0, bitmapData.Scan0, bitmapRGB.Length);
               }
               finally
               {
                   NB.UnlockBits(bitmapData);
               }
            */

            // pictureBox.Image = bitmap;
            byte[] byteArray = ConvertToByteArray(NB);
            return File(byteArray, "image/jpeg");
        }

        public ActionResult GenerateQrCodeJPG(string QRText)
        {
            string qrtext = QRText; //считываем текст из TextBox'a
            string[] S = qrtext.Split(';');
            string PartNumber = S[0];
            PointF firstLocation = new PointF(0f, 117f);
            PointF imageLocation = new PointF(10f, 0f);
            QRCodeEncoder encoder = new QRCodeEncoder(); //создаем объект класса QRCodeEncoder
            Bitmap qrCodeImage = encoder.Encode(qrtext);
            Bitmap NB = new Bitmap(140, 140);//(qrCodeImage, new Size(117, 130));
            SolidBrush brush = new SolidBrush(Color.White);

            using (Graphics graphics = Graphics.FromImage(NB))
            {
                using (Font arialFont = new Font("Arial", 14))
                {
                    graphics.FillRectangle(brush, 0, 0, 140, 140);
                    graphics.DrawString(PartNumber, arialFont, Brushes.Black, firstLocation);
                    graphics.DrawImage(qrCodeImage, imageLocation);
                }
            }

            Bitmap NB2 = new Bitmap(NB, new Size(110, 110));
            Guid G = Guid.NewGuid();

            string Path = Server.MapPath("/QRs");
            NB2.Save(Path + "/" + G.ToString() + ".jpg", System.Drawing.Imaging.ImageFormat.Jpeg);

            //  byte[] byteArray = ConvertToByteArray(NB2);
            return File(Path + "/" + G.ToString() + ".jpg", "image/jpeg");
        }



        public byte[] CreateQrCode(string QRText)
        {
            string qrtext = QRText; //считываем текст из TextBox'a
            QRCodeEncoder encoder = new QRCodeEncoder(); //создаем объект класса QRCodeEncoder
            Bitmap qrCodeImage = encoder.Encode(qrtext);
            //write your own methode to convert your bit map to byte array, here is a link
            //http://stackoverflow.com/questions/7350679/convert-a-bitmap-into-a-byte-array-in-c
            byte[] byteArray = ConvertToByteArray(qrCodeImage);
            return byteArray;
        }

        public JsonResult SearchUser(string term)
        {
            if (term != null)
            {

                term = term.ToUpper().Replace(" ", "");
            }
            List<string> Num = new List<string>();
            try
            {
                //  ViewBag.Managers = new SelectList(db.t_Item.Where(x => x.FItemClassID == 3), "FItemID", "FName");
                Num = db.t_Item.Where(x => x.FItemClassID == 3 && x.FName.Contains(term)).Select(x => x.FName).ToList();
            }
            catch
            {
                Num.Add("Нет таких пользователей");
            }
            return Json(Num, JsonRequestBehavior.AllowGet);
        }

   


        [Culture]
        public ActionResult SavePostuplenie(int Id, decimal qty)
        {
            string a = CurrentUserNow();
            if (a.Equals(""))
            {
                return RedirectToAction("Login");
            }
            DateTime Date = DateTime.Now.AddMonths(-6);

            var Item = db.POOrderEntry.Where(x => x.FInterID == Id).First();
            Item.FCommitQty = qty;
            try
            {
                db.Entry(Item).State = EntityState.Modified;
                db.SaveChanges();
                ViewBag.Message = "Данные успешно сохранены!";
            }
            catch (Exception E)
            {
                ViewBag.Message = "Ошибка = " + E.Message;
            }
            //    foreach (var I in Items)
            //      {
            //         foreach (var E in I.POOrderEntry)
            //         {
            //            E.POOrder = db.POOrderEntry.Where(x => x.FInterID == E.FInterID).Include(x => x.POOrder);
            //        }
            //   }
            //  var Zakazi = db.POOrder.Where(x => x.FDate >= Date).Include(x => x.t_Supplier).Include(x => x.POOrderEntry).ToList();
            return RedirectToAction("Index");
        }


        public string DopolnitNumber(int Number, int count)
        {

            string N = Number.ToString();
            if (N.Length < count)
            {
                for (int i = N.Length; i < count; i++)
                {
                    N = "0" + N;
                }
            }

            return N;
        }

        public int FindStockID(string Stock)
        {
            int StockID = 0;
            try
            {
                StockID = Convert.ToInt32(Stock);
            }
            catch
            {

            }
            if (StockID == 0)
            {
                //Фильтруем по проперти 10 почти у всех складов так
                try
                {
                    StockID = db.t_Stock.Where(x => x.FProperty == 10 && x.FName.Equals(Stock)).Select(a => a.FItemID).First();
                }
                catch
                {

                }
            }
            if (StockID == 0)
            {
                try
                {
                    StockID = db.t_Stock.Include(x => x.StocksRusKit).Where(x => x.FProperty == 10 && x.StocksRusKit.FirstOrDefault().FRusName.Equals(Stock)).Select(x => x.StocksRusKit.FirstOrDefault().FInterID.Value).First();
                }
                catch (Exception e)
                {

                }
            }
            return StockID;
        }
        public string FindRussianName(t_Item I)
        {
            string RusName = "Номенклатура не сопоставлена." + I.FFullName;
            if (I.NomenklaturaEnterprise != null && I.NomenklaturaEnterprise.Count > 0)
            {
                RusName = I.NomenklaturaEnterprise.First().RusName;
            }
            return RusName;
        }


        public DvigenieNEW FindDvigenieNEW(int Id)
        {
            DvigenieNEW Dvig = new DvigenieNEW();
            bool Go = false;
          /*  if (Session["DvigenieNEW"] != null)
            {
                DvigenieNEW D = (DvigenieNEW)Session["DvigenieNEW"];
                if (D.Id == Id)
                {
                    Dvig = D;
                    Go = true;
                }
            }
          */

          //  if (!Go)
           // {
                try
                {
                    Dvig = db.DvigenieNEW.Where(x => x.Id == Id).Include(x => x.t_Item).Include(x => x.t_Stock).Include(x => x.t_Item.NomenklaturaEnterprise).Include(x => x.t_Stock.StocksRusKit).First();
                    Session["DvigenieNEW"] = Dvig;
                }
                catch (Exception e)
                {

                }
          //  }

            return Dvig;
        }

        public DvigenieNEW FindDvigenieNEW(string QRData)
        {
            DvigenieNEW Dvig = new DvigenieNEW();
            bool Go = false;
          /*  if (Session["DvigenieNEW"] != null)
            {
                DvigenieNEW D = (DvigenieNEW)Session["DvigenieNEW"];
                if (D.QRString.Equals(QRData))
                {
                    Dvig = D;
                    Go = true;
                }
            }

            if (!Go)
            {
          */
                try
                {
                    //Ищем последнее движение по этому QR коду
                    Dvig = db.DvigenieNEW.Where(x => x.QRString.Equals(QRData)).Include(x => x.t_Item).Include(x => x.t_Stock).Include(x => x.t_Item.NomenklaturaEnterprise).Include(x => x.t_Stock.StocksRusKit).OrderByDescending(x=>x.Id).First();

                try
                {
                  //  
                }
                catch
                {

                }

                    Session["DvigenieNEW"] = Dvig;
                    Session["ItemView"] = null;
            }
                catch (Exception e)
                {

                }
          /*  }*/

            return Dvig;
        }

        public Dvigenie FindDvigenie(int Id)
        {
            Dvigenie Dvig = new Dvigenie();
            bool Go = false;
            if (Session["Dvigenie"] != null)
            {
                Dvigenie D = (Dvigenie)Session["Dvigenie"];
                if (D.Id == Id)
                {
                    Dvig = D;
                    Go = true;
                }
            }

            if (!Go)
            {
                try
                {
                    Dvig = db.Dvigenie.Where(x => x.Id == Id).Include(x => x.Item).Include(x => x.Stock).Include(x => x.POOrder).Include(x => x.Item.NomenklaturaEnterprise).Include(x => x.QRTable).Include(x => x.Stock.StocksRusKit).First();
                    Session["Dvigenie"] = Dvig;
                }
                catch (Exception e)
                {

                }
            }

            return Dvig;
        }

        public decimal FindPrice(Dvigenie D)
        {
            decimal Price = 0;
            if (D.ZakazPostavshiku.Contains("POORD"))
            {
                try
                {
                    Price = db.POOrderEntry.Where(x => x.FInterID == D.POOrderId && x.FItemID == D.ItemID).Select(x => x.FAuxTaxPrice).First();
                }
                catch
                {

                }
            }
            else
            {
                try
                {
                    Price = db.ICSubContractEntry.Where(x => x.FInterID == D.POOrderId && x.FItemID == D.ItemID).Select(x => x.FAuxTaxPrice).First();
                }
                catch
                {

                }
            }
            return Price;
        }

        public bool MestoPrikrutit(string Mesto, int DvigenieId, int ItemId)
        {


            //Ищем старое местечко
            try
            {
                var Mesta = db.NomenklaturaPlace.Where(x => x.DvigenieId == DvigenieId).ToList();
                foreach (var m in Mesta)
                {
                    db.Entry(m).State = EntityState.Deleted;
                    db.SaveChanges();
                    SaveToDocLog(DvigenieId, ItemId, "Удалили старое местечко", 0, 0, 0, "");
                }
            }
            catch
            {
                SaveToDocLog(DvigenieId, ItemId, "Ошибка не смогли удалить старое местечко", 0, 0, 0, "");
            }
            NomenklaturaPlace NP = new NomenklaturaPlace();
            bool go = false;
            if (Mesto != null && Mesto != "" && Mesto.Contains(";"))
            { //склад;улица;стеллаж;полка;ячейка
                string[] S = Mesto.Split(';');
                //   NomenklaturaPlace NP = new NomenklaturaPlace();
                NP.StockId = Convert.ToInt32(S[0]);
                NP.DvigenieId = DvigenieId;
                NP.ItemId = ItemId;
                NP.StellagId = Convert.ToInt32(S[2]);
                NP.StreetId = Convert.ToInt32(S[1]);
                if (NP.StreetId == 0) { NP.StreetId = null; }
                if (S.Length > 3)
                {
                    NP.PolkaId = Convert.ToInt32(S[3]);
                }
                Yacheika Y = new Yacheika();
                if (S.Length > 4)
                {
                    //NP.YacheikaId = 
                    int YN = Convert.ToInt32(S[4]);

                    try
                    {
                        Y = db.Yacheika.Where(x => x.StockId == NP.StockId && x.PlanogrammaId == NP.StellagId && x.Num == YN).First();
                        NP.YacheikaId = Y.Id;
                    }
                    catch
                    {

                    }
                    if (Y.Num == null || Y.Num == 0)
                    {
                        Y.PlanogrammaId = NP.StellagId;
                        Y.Num = YN;
                        Y.Name = "";
                        Y.StockId = NP.StockId;
                        try
                        {
                            db.Yacheika.Add(Y);
                            db.SaveChanges();
                            NP.YacheikaId = Y.Id;
                            SaveToDocLog(DvigenieId, ItemId, "Сохранили новое местечко " + Mesto, 0, 0, 0, "Ячейка" + Y.Id);
                            go = true;

                        }
                        catch (Exception exx)
                        {

                        }

                    }

                }
                try
                {
                    db.NomenklaturaPlace.Add(NP);
                    db.SaveChanges();
                }
                catch
                {

                }
            }
            return go;

        }


        public int FindLastStatusOTK(int DvigenieId)
        {
            int Result = 1;
            try
            {
                Result = db.Control.Where(x => x.DvigenieId == DvigenieId).OrderByDescending(x => x.Id).Select(x => x.Status).First();
            }
            catch (Exception e)
            {

            }
            return Result;
        }

        public int FindMaxNumStockBill()
        {
            int Result = 0;
            int MaxInStockBill = 0;
            int MaxInNum = 0;
            try
            {
                MaxInStockBill = db.ICStockBill.Max(x => x.FInterID);
                MaxInNum = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").Select(x => x.FMaxNum.Value).First();
                if (MaxInStockBill >= MaxInNum)
                {
                    Result = MaxInStockBill;

                }
                else
                {
                    Result = MaxInNum;
                }
            }
            catch
            {

            }
            return Result;
        }




        public JsonResult CHGJsonStockWork(int StockWorkEntryId, decimal QTY, int DvigenieId)
        {
            string Message = "";

            int StockFromID = 0;
            int StockToID = 0;
            int ManagerID = 0;
            decimal Price = 0;

            int UserID = 0;

            StockWorkEntrys SWE = new StockWorkEntrys();

            try
            {
                SWE = db.StockWorkEntrys.Where(x => x.Id == StockWorkEntryId).Include(x => x.StockWorks).Include(x => x.StockWorks.ICMO).First();

            }
            catch
            {

            }

            //  t_Item Item = new t_Item();
            Dvigenie Dvig = new Dvigenie();
            decimal QTYnaSklade = 0;
            UsersKDW U = new UsersKDW();
            U = FindCurrentKDWUser();
            string User = U.t_Base_User.FName;




            if (User == "")
            {
                return Json(Resources.Resource.ViberitePolzovatelya);
            }

            if (DvigenieId != null && DvigenieId != 0)
            {
                Dvig = FindDvigenie(DvigenieId);

            }
            else
            {
                return Json(Resources.Resource.Error);
            }



            //Ищем менеджера в подразделении
            try
            {
                ManagerID = db.DepartmentToStocks.Where(x => x.StockId == SWE.ToStock && x.DepartmentId == SWE.StockWorks.ICMO.FWorkShop).Select(x => x.MolId).First();
            }
            catch
            {

            }


            try
            {
                StockFromID = Dvig.StockId;
                StockToID = SWE.ToStock;//FindStockID(StockTo);
                                        // StockFromID = db.t_Stock.Where(x => x.FName.Equals(StockFrom)).Select(a => a.FItemID).First();
                                        //  StockToID = db.t_Stock.Where(x => x.FName.Equals(StockTo)).Select(a => a.FItemID).First();
                                        //  ManagerID = FindManagerID(Manager);
                UserID = U.UserID;//FindUserID(User);
                                  //  UserID = db.t_Item.Where(x => x.FItemClassID == 3 && x.FName.Equals(User)).Select(a => a.FItemID).First();
                                  //  Item = db.t_Item.Where(x => x.FItemID == Dvig.ItemID).Include(x => x.NomenklaturaEnterprise).First();
                                  //Item = SWE.Item;
                QTYnaSklade = QTYNaSklade(StockFromID, SWE.ItemId);
                //   QTYnaSklade = Dvig.QTYFact;

            }
            catch (Exception e)
            {
                return Json(Resources.Resource.ZapolniteYellow);
            }



            if (Dvig.QTYFact < QTY)
            {
                return Json(Resources.Resource.VveliBolsheChemVZakaze);
            }

            if (QTYnaSklade < QTY)
            {
                return Json(Resources.Resource.QTYNaSkladeNedostatochno + " " + QTYnaSklade);
            }

            if (QTY == 0)
            {
                return Json(Resources.Resource.NomenklaturiNedostatochno);
            }


            //Ищем прайс
            Price = FindPrice(Dvig);

            var MaxNum = FindMaxNumStockBill();// db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            //Плюсуем макс номер
            MaxNum++;
            var MaxNumTable = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();
            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 41).First();
            //MaxStockID.FCurNo.Value+=1
            int MaxStockId = MaxStockID.FCurNo.Value + 1;
            string CHG = "CHG" + DopolnitNumber(MaxStockId, 6);

            //   int userId = 16507;// TODO найти пользака текущего. Сделать модуль регистрации пользователей и сопоставить их с кинди


            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum;
            StockBill.FDate = DateTime.Now.Date;
            StockBill.FTranType = 41;
            StockBill.FBillNo = CHG;
            StockBill.FDeptID = 0; //Возможно можно перемещать на подразделение!!! 270 есть в таблице
            StockBill.FEmpID = 0;
            StockBill.FSupplyID = null;
            StockBill.FCheckerID = UserID;
            StockBill.FManagerID = U.MOLId;
            StockBill.FSManagerID = U.MOLId;//От кого
            StockBill.FBillerID = UserID;
            StockBill.FFManagerID = ManagerID;//Кому
            StockBill.FHookInterID = 0;//Неизвестно что за хук
            StockBill.FVchInterID = null;//При перемещении есть записи с указанным ID например 229
            StockBill.FPosted = 1;
            StockBill.FCheckSelect = 0;
            StockBill.FROB = 1;
            StockBill.FStatus = 1;
            StockBill.FUpStockWhenSave = false;
            StockBill.FCancellation = false;
            StockBill.FOrgBillInterID = 0;
            StockBill.FBillTypeID = 0;
            StockBill.FPOStyle = 252;
            StockBill.FBackFlushed = false;
            StockBill.FUUID = Guid.NewGuid();
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
            StockBill.FMarketingStyle = 12530;
            StockBill.FRefType = 12561;
            StockBill.FCheckDate = DateTime.Now;
            StockBill.FExplanation = "WEB " + U.Name;
            StockBill.FSelTranType = 1007105;// также может быть 85, 0, 1012510
            StockBill.FChildren = 0;
            StockBill.FHookStatus = 0;
            StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;
            StockBill.FsourceType = 37521;
            StockBill.FPayCondition = 0;
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
            StockBill.FPOMode = 0;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";
            StockBill.FHeadSelfA0143 = "KingDeeWeb";

            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum;

                MaxNumTable.FMaxNum = MaxNum;
                db.Entry(MaxNumTable).State = EntityState.Modified;
                db.SaveChanges();


                // MaxStockID.FCurNo++;
                MaxStockID.FDesc = "CHG+" + DopolnitNumber(MaxStockId, 6);
                MaxStockID.FCurNo = MaxStockId;
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();
                go = true;
            }
            catch (Exception e)
            {

            }


            int QRID = 0;
            bool PrintQR = false;
            var QR = new QRTable();
            int NewDvigId = 0;
            if (go)//если добавлена шапка то добавляем строки
            {

                //       int MaxLVL = SelectMaxLev(POOrder.FInterID, Item.t_Item.FItemID);
                //       MaxLVL++;
                //      SaveQR()

                int lvl = 0;
                int Parent = 0;
                if (QTY == Dvig.QTYFact)
                {
                    //Не генерим новый код а просто перемещаем
                    QRID = Dvig.QRID.Value;
                    lvl = Dvig.Lev;

                }

                if (QTY < Dvig.QTYFact)
                {
                    //генерим новый код родитель - этот
                    lvl = SelectMaxLev(Dvig.POOrderId, Dvig.ItemID, Dvig.ZakazPostavshiku);
                    lvl++;
                    QRID = SaveQR(Dvig.Item, Dvig.ZakazPostavshiku, Dvig.POOrderId, lvl);
                    Parent = Dvig.Id;
                    PrintQR = true;

                }



                //Сохраняем QR код
                //   string STQ = Item.FNumber + ";" + Item.FName + ";" + QTY + ";" + StockBill.FCheckDate.Value.ToString("dd.MM.yyyy") + ";" + CHG + ";" + FindRussianName(Item) + ";" + StockTo + ";";


                NewDvigId = SaveDvigenie(Dvig.ZakazPostavshiku, CHG, QTY, Dvig.ItemID, Dvig.POOrderId, StockFromID, StockToID, QRID, lvl, Parent, "", Dvig.Mnimoe);

                AddStatusOTK(NewDvigId, FindLastStatusOTK(Dvig.Id));


                //Засчитываем перемещение в задании
                SWE.QTYBufer += QTY;
                if (SWE.QTYBufer >= SWE.QTY)
                {
                    SWE.Complete = true;
                }
                try
                {
                    db.Entry(SWE).State = EntityState.Modified;
                    db.SaveChanges();
                }
                catch
                {

                }

                //Вычетаем количество из текущего движения

                decimal QTYFact = Dvig.QTYFact - QTY;
                EditDvigenie(Dvig, QTYFact);

                go = false;

                Entry.FBrNo = "0";

                Entry.FItemID = SWE.ItemId;
                Entry.FQtyMust = 0;
                Entry.FAuxQtyMust = 0;
                Entry.FQty = QTY;
                Entry.FPrice = Price;
                Entry.FBatchNo = "";
                decimal Q = Convert.ToDecimal(QTY);
                decimal C = Convert.ToDecimal(Entry.FPrice);
                Entry.FAmount = Q * C;
                Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                Entry.FNote = FindModelByItem(SWE.ItemId);
                Entry.FUnitID = 259;//Непонятно что это
                Entry.FAuxPrice = Price;
                Entry.FPurchasePrice = Price;  // Закупочная цена с налогом из заказа поставщику
                Entry.FPurchaseAmount = Q * Entry.FPurchasePrice;
                Entry.FAuxQty = QTY;
                Entry.FPriceRef = Entry.FPrice;
                Entry.FAuxPriceRef = Entry.FAuxPrice;
                Entry.FAmtRef = Q * C;
                Entry.FSourceBillNo = "";
                Entry.FSCStockID = StockFromID;//откуда
                Entry.FDCStockID = StockToID;//куда
                Entry.FSourceInterId = 0;
                Entry.FOrderBillNo = "";
                Entry.FOrderInterID = 0;
                Entry.FOrderEntryID = 0;
                Entry.FMapNumber = QR.Id.ToString();//Сюда сохраняем QR Id



                Entry.FContractBillNo = "";
                Entry.FICMOBillNo = "";
                Entry.FMTONo = "";
                Entry.FItemSize = "";
                Entry.FItemSuite = "";
                Entry.FPositionNo = "";
                Entry.FSEOutBillNo = "";
                Entry.FConfirmMemEntry = "";
                Entry.FItemStatementBillNO = "";
                Entry.FReturnNoticeBillNO = "";
                Entry.FSplitState = "";



                try
                {
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();


                    //Сохраняем движение 


                    go = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                }
            }

            if (go)
            {
                go = PeremeshenieNaSklad(MaxNum,StockFromID, SWE.ItemId, QTY, false);//Минусуем на склад
                if (go)
                {
                    go = PeremeshenieNaSklad(MaxNum, StockToID, SWE.ItemId, QTY, true);//Плюсуем на склад
                }
                Message = Resources.Resource.Error;

                // MestoPrikrutit(Mesto, NewDvigId, Item.FItemID); //Прикручиваем место к движению если оно указано


            }

            if (go)
            {
                Message = "Ok";
            }

            return Json(Message + ";" + QRID + ";" + PrintQR.ToString(), JsonRequestBehavior.AllowGet);
        }

        public ActionResult DocumentsToday(string DocType, int UserId=0)
        {
            List<DvigenieNEW> Result = new List<DvigenieNEW>();
            int CurrentUserId = CurrentKDWUserModel().Id;
            if (UserId!=0)
            {
                CurrentUserId = UserId;
            }
            try
            {
                Result = db.DvigenieNEW.Where(x => x.CurrentFBillNo.Contains(DocType) && x.UserId == CurrentUserId).OrderByDescending(x=>x.Id).Take(20).ToList();
                    }
            catch
            {

            }
            return View(Result);
        }


        public JsonResult PeremeshenieSoSkladaNaSkladJsonQR(string StockTo, string Manager, decimal QTY, int DvigenieId, string Mesto = "")
        {
            string Message = "";

            int StockFromID = 0;
            int StockToID = 0;
            int ManagerID = 0;
            decimal Price = 0;

            int UserID = 0;
            t_Item Item = new t_Item();
            Dvigenie Dvig = new Dvigenie();
            decimal QTYnaSklade = 0;
            UsersKDW U = new UsersKDW();
            U = FindCurrentKDWUser();
            string User = U.t_Base_User.FName;




            if (User == "")
            {
                return Json(Resources.Resource.ViberitePolzovatelya);
            }

            if (DvigenieId != null && DvigenieId != 0)
            {
                Dvig = FindDvigenie(DvigenieId);

            }
            else
            {
                return Json(Resources.Resource.Error);
            }





            try
            {
                StockFromID = Dvig.StockId;
                StockToID = FindStockID(StockTo);
                // StockFromID = db.t_Stock.Where(x => x.FName.Equals(StockFrom)).Select(a => a.FItemID).First();
                //  StockToID = db.t_Stock.Where(x => x.FName.Equals(StockTo)).Select(a => a.FItemID).First();
                ManagerID = FindManagerID(Manager);
                UserID = U.UserID;//FindUserID(User);
                                  //  UserID = db.t_Item.Where(x => x.FItemClassID == 3 && x.FName.Equals(User)).Select(a => a.FItemID).First();
                                  //  Item = db.t_Item.Where(x => x.FItemID == Dvig.ItemID).Include(x => x.NomenklaturaEnterprise).First();
                Item = Dvig.Item;
                QTYnaSklade = QTYNaSklade(StockFromID, Item.FItemID);
                //   QTYnaSklade = Dvig.QTYFact;

            }
            catch (Exception e)
            {
                return Json(Resources.Resource.ZapolniteYellow);
            }



            if (Dvig.QTYFact < QTY)
            {
                return Json(Resources.Resource.VveliBolsheChemVZakaze);
            }

            if (QTYnaSklade < QTY)
            {
                return Json(Resources.Resource.QTYNaSkladeNedostatochno + " " + QTYnaSklade);
            }

            if (QTY == 0)
            {
                return Json(Resources.Resource.NomenklaturiNedostatochno);
            }


            //Ищем прайс
            Price = FindPrice(Dvig);

            var MaxNum = FindMaxNumStockBill();// db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            //Плюсуем макс номер
            MaxNum++;
            var MaxNumTable = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();
            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 41).First();
            //MaxStockID.FCurNo.Value+=1
            int MaxStockId = MaxStockID.FCurNo.Value + 1;
            string CHG = "CHG" + DopolnitNumber(MaxStockId, 6);

            //   int userId = 16507;// TODO найти пользака текущего. Сделать модуль регистрации пользователей и сопоставить их с кинди


            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum;
            StockBill.FDate = DateTime.Now.Date;
            StockBill.FTranType = 41;
            StockBill.FBillNo = CHG;
            StockBill.FDeptID = 0; //Возможно можно перемещать на подразделение!!! 270 есть в таблице
            StockBill.FEmpID = 0;
            StockBill.FSupplyID = null;
            StockBill.FCheckerID = UserID;
            StockBill.FManagerID = U.MOLId;
            StockBill.FSManagerID = U.MOLId;//От кого
            StockBill.FBillerID = UserID;
            StockBill.FFManagerID = ManagerID;//Кому
            StockBill.FHookInterID = 0;//Неизвестно что за хук
            StockBill.FVchInterID = null;//При перемещении есть записи с указанным ID например 229
            StockBill.FPosted = 1;
            StockBill.FCheckSelect = 0;
            StockBill.FROB = 1;
            StockBill.FStatus = 1;
            StockBill.FUpStockWhenSave = false;
            StockBill.FCancellation = false;
            StockBill.FOrgBillInterID = 0;
            StockBill.FBillTypeID = 0;
            StockBill.FPOStyle = 252;
            StockBill.FBackFlushed = false;
            StockBill.FUUID = Guid.NewGuid();
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
            StockBill.FMarketingStyle = 12530;
            StockBill.FRefType = 12561;
            StockBill.FCheckDate = DateTime.Now;
            StockBill.FExplanation = "WEB " + U.Name;
            StockBill.FSelTranType = 1007105;// также может быть 85, 0, 1012510
            StockBill.FChildren = 0;
            StockBill.FHookStatus = 0;
            StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;
            StockBill.FsourceType = 37521;
            StockBill.FPayCondition = 0;
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
            StockBill.FPOMode = 0;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";
            StockBill.FHeadSelfA0143 = "KingDeeWeb";

            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum;

                MaxNumTable.FMaxNum = MaxNum;
                db.Entry(MaxNumTable).State = EntityState.Modified;
                db.SaveChanges();


                // MaxStockID.FCurNo++;
                MaxStockID.FDesc = "CHG+" + DopolnitNumber(MaxStockId, 6);
                MaxStockID.FCurNo = MaxStockId;
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();
                go = true;
            }
            catch (Exception e)
            {

            }


            int QRID = 0;
            bool PrintQR = false;
            var QR = new QRTable();
            int NewDvigId = 0;
            if (go)//если добавлена шапка то добавляем строки
            {

                //       int MaxLVL = SelectMaxLev(POOrder.FInterID, Item.t_Item.FItemID);
                //       MaxLVL++;
                //      SaveQR()

                int lvl = 0;
                int Parent = 0;
                if (QTY == Dvig.QTYFact)
                {
                    //Не генерим новый код а просто перемещаем
                    QRID = Dvig.QRID.Value;
                    lvl = Dvig.Lev;

                }

                if (QTY < Dvig.QTYFact)
                {
                    //генерим новый код родитель - этот
                    lvl = SelectMaxLev(Dvig.POOrderId, Dvig.ItemID, Dvig.ZakazPostavshiku);
                    lvl++;
                    QRID = SaveQR(Dvig.Item, Dvig.ZakazPostavshiku, Dvig.POOrderId, lvl);
                    Parent = Dvig.Id;
                    PrintQR = true;

                }



                //Сохраняем QR код
                //   string STQ = Item.FNumber + ";" + Item.FName + ";" + QTY + ";" + StockBill.FCheckDate.Value.ToString("dd.MM.yyyy") + ";" + CHG + ";" + FindRussianName(Item) + ";" + StockTo + ";";


                NewDvigId = SaveDvigenie(Dvig.ZakazPostavshiku, CHG, QTY, Dvig.ItemID, Dvig.POOrderId, StockFromID, StockToID, QRID, lvl, Parent, "", Dvig.Mnimoe);

                AddStatusOTK(NewDvigId, FindLastStatusOTK(Dvig.Id));
                //Вычетаем количество из текущего движения

                decimal QTYFact = Dvig.QTYFact - QTY;
                EditDvigenie(Dvig, QTYFact);

                /*      try
                      {


                          QR.QR = CreateQrCode(STQ);
                          QR.QRstring = STQ;
                          QR.Date = DateTime.Now;
                          db.QRTable.Add(QR);
                          db.SaveChanges();

                      }
                      catch (Exception c)
                      {
                          Console.WriteLine("Не смогли сгенерировать QR код " + c.Message);
                      }

      */
                go = false;

                Entry.FBrNo = "0";

                Entry.FItemID = Item.FItemID;
                Entry.FQtyMust = 0;
                Entry.FAuxQtyMust = 0;
                Entry.FQty = QTY;
                Entry.FPrice = Price;
                Entry.FBatchNo = "";
                decimal Q = Convert.ToDecimal(QTY);
                decimal C = Convert.ToDecimal(Entry.FPrice);
                Entry.FAmount = Q * C;
                Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                Entry.FNote = FindModelByItem(Item.FItemID);
                Entry.FUnitID = 259;//Непонятно что это
                Entry.FAuxPrice = Entry.FPrice;
                Entry.FPurchasePrice = Entry.FPrice; // Закупочная цена с налогом из заказа поставщику
                Entry.FPurchaseAmount = Q * Entry.FPurchasePrice;
                Entry.FAuxQty = QTY;
                Entry.FPriceRef = Entry.FPrice;
                Entry.FAuxPriceRef = Entry.FAuxPrice;
                Entry.FAmtRef = Q * C;
                Entry.FSourceBillNo = "";
                Entry.FSCStockID = StockFromID;//откуда
                Entry.FDCStockID = StockToID;//куда
                Entry.FSourceInterId = 0;
                Entry.FOrderBillNo = "";
                Entry.FOrderInterID = 0;
                Entry.FOrderEntryID = 0;
                Entry.FMapNumber = QR.Id.ToString();//Сюда сохраняем QR Id



                Entry.FContractBillNo = "";
                Entry.FICMOBillNo = "";
                Entry.FMTONo = "";
                Entry.FItemSize = "";
                Entry.FItemSuite = "";
                Entry.FPositionNo = "";
                Entry.FSEOutBillNo = "";
                Entry.FConfirmMemEntry = "";
                Entry.FItemStatementBillNO = "";
                Entry.FReturnNoticeBillNO = "";
                Entry.FSplitState = "";



                try
                {
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();


                    //Сохраняем движение 


                    go = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                }
            }

            if (go)
            {
                go = PeremeshenieNaSklad(MaxNum, StockFromID, Item.FItemID, QTY, false);//Минусуем на склад
                if (go)
                {
                    go = PeremeshenieNaSklad(MaxNum, StockToID, Item.FItemID, QTY, true);//Плюсуем на склад
                }
                Message = Resources.Resource.Error;

                MestoPrikrutit(Mesto, NewDvigId, Item.FItemID); //Прикручиваем место к движению если оно указано



                /*
                                if (Mesto != ""&&Mesto.Contains(";"))
                                { //склад;улица;стеллаж;полка;ячейка
                                    string[] S = Mesto.Split(';');
                                    NomenklaturaPlace NP = new NomenklaturaPlace();
                                    NP.StockId = StockToID;
                                    NP.DvigenieId = NewDvigId;
                                    NP.ItemId = Item.FItemID;
                                    NP.StellagId = Convert.ToInt32(S[2]);
                                    NP.StreetId = Convert.ToInt32(S[1]);
                                    if (NP.StreetId == 0) { NP.StreetId = null; }
                                    if (S.Length>3)
                                    {
                                        NP.PolkaId = Convert.ToInt32(S[3]);
                                    }
                                    Yacheika Y = new Yacheika();
                                    if (S.Length > 4)
                                    {
                                        //NP.YacheikaId = 
                                        int YN = Convert.ToInt32(S[4]);

                                        try
                                        {
                                           Y = db.Yacheika.Where(x => x.StockId== NP.StockId&& x.PlanogrammaId == NP.StellagId && x.Num == YN).First();
                                            NP.YacheikaId = Y.Id;
                                        }
                                        catch
                                        {

                                        }
                                        if (Y.Num == null || Y.Num == 0)
                                        {
                                            Y.PlanogrammaId = NP.StellagId;
                                            Y.Num = YN;
                                            Y.Name = "";
                                            Y.StockId = NP.StockId;
                                            try
                                            {
                                                db.Yacheika.Add(Y);
                                                db.SaveChanges();
                                                NP.YacheikaId = Y.Id;

                                            }
                                            catch (Exception exx)
                                            {

                                            }

                                        }

                                    }
                                    try
                                    {
                                        db.NomenklaturaPlace.Add(NP);
                                        db.SaveChanges();
                                    }
                                    catch
                                    {

                                    }
                                }
                */

                /* go = false;
                 //Добавляем в остаток на складе
                 ICInventory Sklad = new ICInventory();
                 int EstLiStrokaNaSklade = 0;
                 try
                 {
                     EstLiStrokaNaSklade = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == Item.FItemID).Count();
                 }
                 catch 
                 {

                 }
                 if (EstLiStrokaNaSklade > 0)
                 {

                     try
                     {
                         Sklad = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == Item.FItemID).First();
                         Sklad.FQty += FCommitQty;
                     }
                     catch (Exception SE)
                     {
                         Console.WriteLine("Не смогли найти строку на складе " + SE.Message);
                     }

                     try
                     {

                         db.Entry(Sklad).State = EntityState.Modified;
                         db.SaveChanges();
                         go = true;
                     }

                     catch (Exception exx)
                     {
                         Console.WriteLine("Ошибка добавления на склад " + exx.Message);
                     }
                 }
                 else
                 {
                     //Если нет такой строки то добавляем новую
                     Sklad.FQty = FCommitQty;
                     Sklad.FStockID = StockID;
                     Sklad.FItemID = Item.FItemID;
                     Sklad.FBrNo = "0";
                     Sklad.FBatchNo = "";
                     Sklad.FKFDate = "";
                     Sklad.FMTONo = "";
                     try
                     {
                         db.ICInventory.Add(Sklad);
                         db.SaveChanges();
                         go = true;
                     }
                     catch (Exception exxx)
                     {
                         Console.WriteLine("Не смогли добавить новую строку поступления на склад ICInventory " + exxx.Message);
                     }
                 }
                */


            }

            if (go)
            {
                Message = "Ok";
            }
            //     "(FBrNo, FInterID, FEntryID, FItemID, FQtyMust,FAuxQtyMust, FQty, FPrice, FBatchNo, " +
            //                        "FAmount, FNote, FUnitID, FAuxPrice, FAuxQty, FProcessCost, FMaterialCost, FTaxAmount," +
            //                         " FSourceBillNo, FDCStockID, FSourceInterId, FOrderBillNo, FOrderInterID, FOrderEntryID)" +
            //                         "VALUES('O', " + InterId + "," + NPP + ", " + NL[0].FItemId + ", " + KolichestvoVZakaze + ", " + KolichestvoVZakaze + ", " + QTY + ", " + CENA + ", '', " +
            //                         "" + Amount + ", 'Enterprise', 259, " + CENA + ", " + QTY + ", 0, 0, 0," +
            //                         " '" + PURCH + "', " + SkladKitai + ", " + PURCHINTERID + ", '" + PURCH + "', " + PURCHINTERID + "," + StrokaPURCH + ")", true);




            //Меняем остатки в заказе поставщику
            try
            {

                db.Entry(Item).State = EntityState.Modified;
                db.SaveChanges();
                ViewBag.Message = "Ok";
            }
            catch (Exception E)
            {
                ViewBag.Message = "Ошибка = " + E.Message;
            }



            return Json(Message + ";" + QRID + ";" + PrintQR.ToString(), JsonRequestBehavior.AllowGet);
        }

     


        [Culture]
        public JsonResult MassovoeCHGBIG(int StockTo, string Manager)
        {
            BigQR BQ = FindCurrentBigQR();
            if (BQ==null)
            {
                return Json(Resources.Resource.Error);
            }


           

            List<DvigenieNEW> Dvigs = new List<DvigenieNEW>();

            try
            {
                //Dvigs = db.DvigenieNEW.Where(x => x.BigQR == BQ.Id&& x.QTYFact > 0 && x.StockId != StockTo).ToList();
                Dvigs = FindDvigeniesInBIGQR().Where(x=>x.QTYFact>0 && x.StockId != StockTo).ToList();
                foreach (var D in Dvigs)
                {
                    string r = PeremeshenieSoSkladaNaSkladNEWServer(StockTo.ToString(), Manager, D.QTYFact, D.Id,"",true);

                  /*  try
                    {
                        using (var db2 = new KingDeeDB())
                        {
                            string[] S = r.Split(';');
                            int DvigId = Convert.ToInt32(S[1]);
                            DvigenieNEW DD = db2.DvigenieNEW.Where(x => x.Id == DvigId).First();
                            DD.BigQR = BQ.Id;

                            if (DD.BigQR == null)
                            {
                                //фиксируем связку с BIGQR

                                try
                                {
                                    db2.Entry(DD).State = EntityState.Modified;
                                    db2.SaveChanges();
                                }
                                catch (Exception e)
                                {

                                }

                            }
                        }

                    }
                    catch
                    {

                    }
                  */
                }
            }
            catch
            {

            }
            if (Dvigs.Count==0)
            {
                return Json("Ни одна номенклатура не была перемещена");
            }
            return Json(Resources.Resource.Uspeshno);
        }


        [Culture]
        public JsonResult MassovoeSOUTBIG(int FromStock,string Manager)
        {
            BigQR BQ = FindCurrentBigQR();
            if (BQ == null)
            {
                return Json(Resources.Resource.Error);
            }




            List<DvigenieNEW> Dvigs = new List<DvigenieNEW>();

            try
            {
                Dvigs = FindDvigeniesInBIGQR().Where(x => x.QTYFact > 0 && x.StockId == FromStock).ToList();
                Session["DvigenieNEW"] = null;//Сбрасываем кэш движения чтобы не накосячилось
                int ManagerID = FindManagerID(Manager);
                foreach (var D in Dvigs)
                {

                    // AddNZPNEW(D.QTYFact, BQ.WorkId.Value.ToString());
                   string Data = SOUTNEW(D.Id, BQ.WorkId.Value, ManagerID, D.QTYFact,true);
                }
            }
            catch
            {

            }

            return Json(Resources.Resource.Uspeshno);
        }


        public JsonResult MassovoeCHGNew(string StockTo, string Manager)
        {
            List<DvigenieNEW> Dvigs = FindCurrentCHGs();
            int StockId = FindStockID(StockTo);
            int ManagerId = FindManagerID(Manager);
            List<string> Results = new List<string>();
            foreach (var d in Dvigs)
            {
                string r = PeremeshenieSoSkladaNaSkladNEWServer(StockTo, Manager, d.QTYFact, d.Id, "",true);
                if (r.Contains("ошибка")==false)
                {
                    d.Otmena = true;
                    
                    try
                    {

                        string[] S = r.Split(';');
                        int i = Convert.ToInt32(S[1]);
                        bool x = Convert.ToBoolean(S[2]);
                      DvigenieNEW nd = db.DvigenieNEW.Where(y => y.Id == i).First();
                        d.Id = nd.Id;
                        d.QTYFact = nd.QTYFact;
                        d.QTY = nd.QTY;
                        d.QTYInStock = nd.QTYInStock;
                        d.QRString = nd.QRString;
                        d.StockName = nd.StockName;
                        d.StockId = nd.StockId;
                        d.EditZakazPostavshiku = x;
                    }
                    catch
                    {

                    }

                }
               Results.Add(r);
            }
            SaveCurrentCHGs(Dvigs);


       /*     try
            {
                Dvigs = Dvigs.Where(x => x.Otmena == false).ToList();
                SaveCurrentCHGs(Dvigs);        
            }
            catch
            {

            }
       */

            return Json(Results);
        }


        public string PeremeshenieSoSkladaNaSkladNEWServer(string StockTo, string Manager, decimal QTY, int DvigenieId, string Mesto = "",bool IgnoreOTK =false)
        {
            string Message = "";

            int StockFromID = 0;
            int StockToID = 0;
            int ManagerID = 0;
            decimal Price = 0;
        
            int UserID = 0;

            DvigenieNEW Dvig = new DvigenieNEW();
            decimal QTYnaSklade = 0;
            UsersKDW U = new UsersKDW();
            U = FindCurrentKDWUser();
            string User = U.t_Base_User.FName;

            if (DvigenieId != null && DvigenieId != 0)
            {
                Dvig = FindDvigenieNEW(DvigenieId);
                if (IgnoreOTK == false)
                {
                    var Prov = FindProverkaOTK(Dvig.QRString);
                    if (Prov.Id == 0 || Prov.StatusOTK.Colour.Equals("danger") == true)
                    {
                        return "false;" + Resources.Resource.ProverteStatusOTK;
                    }
                }
            }
            else
            {
                return Resources.Resource.Error;
            }

            try
            {
                StockFromID = Dvig.StockId;
                StockToID = FindStockID(StockTo);
                // StockFromID = db.t_Stock.Where(x => x.FName.Equals(StockFrom)).Select(a => a.FItemID).First();
                //  StockToID = db.t_Stock.Where(x => x.FName.Equals(StockTo)).Select(a => a.FItemID).First();
                ManagerID = FindManagerID(Manager);
                UserID = U.UserID;//FindUserID(User);
                                  //  UserID = db.t_Item.Where(x => x.FItemClassID == 3 && x.FName.Equals(User)).Select(a => a.FItemID).First();
                                  //  Item = db.t_Item.Where(x => x.FItemID == Dvig.ItemID).Include(x => x.NomenklaturaEnterprise).First();

                QTYnaSklade = SearchQTYInStock(StockFromID.ToString(), Dvig.ItemID.ToString());
                //   QTYnaSklade = Dvig.QTYFact;

            }
            catch (Exception e)
            {
                return Resources.Resource.ErrorNeOpredelenSklad;
            }

            if (User == "")
            {
                return Resources.Resource.ViberitePolzovatelya;
            }

           

            if (Dvig.QTYFact < QTY)
            {
            
            }
            SaveToDocLog(DvigenieId, Dvig.ItemID, "Проверяем количество на складе =" + QTYnaSklade, QTY, 0, 0, "");
            if (QTYnaSklade < QTY)
            {
                // return Resources.Resource.NetNaSklade;
                if (QTYnaSklade > 0)
                {
                   
                    //Уменьшаем максимальное количество ставим = количество на складе
                    QTY = QTYnaSklade;
                    SaveToDocLog(DvigenieId, Dvig.ItemID, "Количество на складе =" + QTYnaSklade + " уменьшаем перемещаемое количество.", QTY, 0, 0, "");
                }
                else
                {
                    SaveToDocLog(DvigenieId, Dvig.ItemID, "Нет на складе =" + QTYnaSklade, QTY, 0, 0, "");
                    return Resources.Resource.NetNaSklade;
                }

            }

            if (QTY == 0)
            {
                SaveToDocLog(DvigenieId, Dvig.ItemID, "Нет на складе =" + QTYnaSklade, QTY, 0, 0, "");
                return Resources.Resource.QTYKPeremesheniu +"= 0!" ;
            }


            //Ищем прайс
            var MaxNum = FindMaxNumStockBill();// db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            //Плюсуем макс номер
            MaxNum++;
            var MaxNumTable = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();
            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 41).First();
            //MaxStockID.FCurNo.Value+=1
            int MaxStockId = MaxStockID.FCurNo.Value + 1;
            string CHG = "CHG" + DopolnitNumber(MaxStockId, 6);

            //   int userId = 16507;// TODO найти пользака текущего. Сделать модуль регистрации пользователей и сопоставить их с кинди


            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum;
            StockBill.FDate = DateTime.Now.Date;
            StockBill.FTranType = 41;
            StockBill.FBillNo = CHG;
            StockBill.FDeptID = 0; //Возможно можно перемещать на подразделение!!! 270 есть в таблице
            StockBill.FEmpID = 0;
            StockBill.FSupplyID = null;
            StockBill.FCheckerID = UserID;
            StockBill.FManagerID = U.MOLId;
            StockBill.FSManagerID = U.MOLId;//От кого
            StockBill.FBillerID = UserID;
            StockBill.FFManagerID = ManagerID;//Кому
            StockBill.FHookInterID = 0;//Неизвестно что за хук
            StockBill.FVchInterID = null;//При перемещении есть записи с указанным ID например 229
            StockBill.FPosted = 1;
            StockBill.FCheckSelect = 0;
            StockBill.FROB = 1;
            StockBill.FStatus = 1;
            StockBill.FUpStockWhenSave = false;
            StockBill.FCancellation = false;
            StockBill.FOrgBillInterID = 0;
            StockBill.FBillTypeID = 0;
            StockBill.FPOStyle = 252;
            StockBill.FBackFlushed = false;
            StockBill.FUUID = Guid.NewGuid();
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
            StockBill.FMarketingStyle = 12530;
            StockBill.FRefType = 12561;
            StockBill.FCheckDate = DateTime.Now;
            StockBill.FExplanation = "WEB " + U.Name;
            StockBill.FSelTranType = 1007105;// также может быть 85, 0, 1012510
            StockBill.FChildren = 0;
            StockBill.FHookStatus = 0;
            StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;
            StockBill.FsourceType = 37521;
            StockBill.FPayCondition = 0;
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
            StockBill.FPOMode = 0;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";
            StockBill.FHeadSelfA0143 = "KingDeeWeb";

            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum;

                MaxNumTable.FMaxNum = MaxNum;
                db.Entry(MaxNumTable).State = EntityState.Modified;
                db.SaveChanges();


                // MaxStockID.FCurNo++;
                MaxStockID.FDesc = "CHG+" + DopolnitNumber(MaxStockId, 6);
                MaxStockID.FCurNo = MaxStockId;
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();

                bool BC = BillCodeDvig(41, MaxStockID.FCurNo.Value);
                SaveToDocLog(0, 0, "Сдвинут счетчик CHG статус=" + BC.ToString(), QTY, 0, 0, CHG);

                go = true;
            }
            catch (Exception e)
            {
                SaveToDocLog(0, 0, "Ошибка сохранения =" + e.Message, QTY, 0, 0, CHG);
                return "ошибка " + e.Message;
            }


            //  int QRID = 0;
            bool PrintQR = false;
            //   var QR = new QRTable();
            int NewDvigId = 0;
            DvigenieNEW ND = new DvigenieNEW();
            if (go)//если добавлена шапка то добавляем строки
            {

                int lvl = 0;
                int Parent = 0;
                if (QTY == Dvig.QTYFact)
                {
                    //Не генерим новый код а просто перемещаем
                    //  QRID = Dvig.QRID.Value;
                    ND = CreateNewQRCode(Dvig.StartFBillNo, Dvig.ItemID, StockToID, QTY, CHG, Dvig.PurchasePrice, Dvig.PostavshikId, Dvig.Postavshik, Dvig.StockId, Dvig.Id, 0, Dvig.Mnimoe, Dvig.Otmena, 0, Dvig.Lev);
                    SaveToDocLog(0, 0, "Создали движение =" + ND, QTY, 0, 0, CHG);
                    lvl = ND.Lev;


                }

                if (QTY < Dvig.QTYFact)
                {
                    //генерим новый код родитель - этот
                    ND = CreateNewQRCode(Dvig.StartFBillNo, Dvig.ItemID, StockToID, QTY, CHG, Dvig.PurchasePrice, Dvig.PostavshikId, Dvig.Postavshik, Dvig.StockId, Dvig.Id, Dvig.Id, Dvig.Mnimoe, Dvig.Otmena);
                    SaveToDocLog(0, 0, "Создали дочернее движение так как переместили не всю партию =" + ND, QTY, 0, 0, CHG);

                    PrintQR = true;
                    var Prov = FindProverkaOTK(Dvig.QRString);
                    AddProverkaOTK(ND.QRString, Prov.Status);

                }




                // AddStatusOTK(NewDvigId, FindLastStatusOTK(Dvig.Id),true);
                //Вычетаем количество из текущего движения

                decimal QTYFact = Dvig.QTYFact - QTY;
                EditDvigenieNEW(in Dvig, QTYFact);


                go = false;

                Entry.FBrNo = "0";

                Entry.FItemID = Dvig.ItemID;
                Entry.FQtyMust = 0;
                Entry.FAuxQtyMust = 0;
                Entry.FQty = QTY;
                Entry.FPrice = Price;
                Entry.FBatchNo = "";
                decimal Q = Convert.ToDecimal(QTY);
                decimal C = Convert.ToDecimal(Entry.FPrice);
                Entry.FAmount = Q * C;
                Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                Entry.FNote = FindModelByItem(Dvig.ItemID);
                Entry.FUnitID = 259;//Непонятно что это
                Entry.FAuxPrice = Entry.FPrice;
                Entry.FPurchasePrice = Entry.FPrice; // Закупочная цена с налогом из заказа поставщику
                Entry.FPurchaseAmount = Q * Entry.FPurchasePrice;
                Entry.FAuxQty = QTY;
                Entry.FPriceRef = Entry.FPrice;
                Entry.FAuxPriceRef = Entry.FAuxPrice;
                Entry.FAmtRef = Q * C;
                Entry.FSourceBillNo = "";
                Entry.FSCStockID = StockFromID;//откуда
                Entry.FDCStockID = StockToID;//куда
                Entry.FSourceInterId = 0;
                Entry.FOrderBillNo = "";
                Entry.FOrderInterID = 0;
                Entry.FOrderEntryID = 0;
                Entry.FMapNumber = Dvig.Id.ToString();//Сюда сохраняем QR Id
                Entry.FPlanMode = 14036;


                Entry.FContractBillNo = "";
                Entry.FICMOBillNo = "";
                Entry.FMTONo = "";
                Entry.FItemSize = "";
                Entry.FItemSuite = "";
                Entry.FPositionNo = "";
                Entry.FSEOutBillNo = "";
                Entry.FConfirmMemEntry = "";
                Entry.FItemStatementBillNO = "";
                Entry.FReturnNoticeBillNO = "";
                Entry.FSplitState = "";



                try
                {
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();


                    //Сохраняем движение 


                    go = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                }
            }

            if (go)
            {
                go = PeremeshenieNaSklad(MaxNum, StockFromID, Dvig.ItemID, QTY, false);//Минусуем на склад
                if (go)
                {
                    go = PeremeshenieNaSklad(MaxNum, StockToID, Dvig.ItemID, QTY, true);//Плюсуем на склад

                    if (go)
                    {
                        ND.QTYInStock += QTY;
                        try
                        {
                            db.Entry(ND).State = EntityState.Modified;
                            db.SaveChanges();
                        }
                        catch
                        {

                        }
                    }
                }
                Message = Resources.Resource.Error;




                // MestoPrikrutit(Mesto, NewDvigId, Dvig.ItemID); //Прикручиваем место к движению если оно указано

            }

            return "Ok;" + ND.Id + ";" + PrintQR.ToString();
        }



        public JsonResult PeremeshenieSoSkladaNaSkladJsonNEW(string StockTo, string Manager, decimal QTY, int DvigenieId, string Mesto = "")
        {
            string Result = "";
            Result = PeremeshenieSoSkladaNaSkladNEWServer(StockTo, Manager, QTY, DvigenieId, Mesto);
          /*  string Message = "";

            int StockFromID = 0;
            int StockToID = 0;
            int ManagerID = 0;
            decimal Price = 0;

            int UserID = 0;

            DvigenieNEW Dvig = new DvigenieNEW();
            decimal QTYnaSklade = 0;
            UsersKDW U = new UsersKDW();
            U = FindCurrentKDWUser();
            string User = U.t_Base_User.FName;




            if (User == "")
            {
                return Json(Resources.Resource.ViberitePolzovatelya);
            }

            if (DvigenieId != null && DvigenieId != 0)
            {
                Dvig = FindDvigenieNEW(DvigenieId);

            }
            else
            {
                return Json(Resources.Resource.Error);
            }





            try
            {
                StockFromID = Dvig.StockId;
                StockToID = FindStockID(StockTo);
                // StockFromID = db.t_Stock.Where(x => x.FName.Equals(StockFrom)).Select(a => a.FItemID).First();
                //  StockToID = db.t_Stock.Where(x => x.FName.Equals(StockTo)).Select(a => a.FItemID).First();
                ManagerID = FindManagerID(Manager);
                UserID = U.UserID;//FindUserID(User);
                                  //  UserID = db.t_Item.Where(x => x.FItemClassID == 3 && x.FName.Equals(User)).Select(a => a.FItemID).First();
                                  //  Item = db.t_Item.Where(x => x.FItemID == Dvig.ItemID).Include(x => x.NomenklaturaEnterprise).First();
               
                QTYnaSklade = QTYNaSklade(StockFromID, Dvig.ItemID);
                //   QTYnaSklade = Dvig.QTYFact;

            }
            catch (Exception e)
            {
                return Json(Resources.Resource.ZapolniteYellow);
            }



            if (Dvig.QTYFact < QTY)
            {
                return Json(Resources.Resource.VveliBolsheChemVZakaze);
            }

            if (QTYnaSklade < QTY)
            {
                return Json(Resources.Resource.QTYNaSkladeNedostatochno + " " + QTYnaSklade);
            }

            if (QTY == 0)
            {
                return Json(Resources.Resource.NomenklaturiNedostatochno);
            }


            //Ищем прайс
         //   Price = Dvig.PurchasePrice;//FindPrice(Dvig);

            var MaxNum = FindMaxNumStockBill();// db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            //Плюсуем макс номер
            MaxNum++;
            var MaxNumTable = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();
            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 41).First();
            //MaxStockID.FCurNo.Value+=1
            int MaxStockId = MaxStockID.FCurNo.Value + 1;
            string CHG = "CHG" + DopolnitNumber(MaxStockId, 6);

            //   int userId = 16507;// TODO найти пользака текущего. Сделать модуль регистрации пользователей и сопоставить их с кинди


            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum;
            StockBill.FDate = DateTime.Now.Date;
            StockBill.FTranType = 41;
            StockBill.FBillNo = CHG;
            StockBill.FDeptID = 0; //Возможно можно перемещать на подразделение!!! 270 есть в таблице
            StockBill.FEmpID = 0;
            StockBill.FSupplyID = null;
            StockBill.FCheckerID = UserID;
            StockBill.FManagerID = U.MOLId;
            StockBill.FSManagerID = U.MOLId;//От кого
            StockBill.FBillerID = UserID;
            StockBill.FFManagerID = ManagerID;//Кому
            StockBill.FHookInterID = 0;//Неизвестно что за хук
            StockBill.FVchInterID = null;//При перемещении есть записи с указанным ID например 229
            StockBill.FPosted = 1;
            StockBill.FCheckSelect = 0;
            StockBill.FROB = 1;
            StockBill.FStatus = 1;
            StockBill.FUpStockWhenSave = false;
            StockBill.FCancellation = false;
            StockBill.FOrgBillInterID = 0;
            StockBill.FBillTypeID = 0;
            StockBill.FPOStyle = 252;
            StockBill.FBackFlushed = false;
            StockBill.FUUID = Guid.NewGuid();
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
            StockBill.FMarketingStyle = 12530;
            StockBill.FRefType = 12561;
            StockBill.FCheckDate = DateTime.Now;
            StockBill.FExplanation = "WEB " + U.Name;
            StockBill.FSelTranType = 1007105;// также может быть 85, 0, 1012510
            StockBill.FChildren = 0;
            StockBill.FHookStatus = 0;
            StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;
            StockBill.FsourceType = 37521;
            StockBill.FPayCondition = 0;
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
            StockBill.FPOMode = 0;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";
            StockBill.FHeadSelfA0143 = "KingDeeWeb";

            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum;

                MaxNumTable.FMaxNum = MaxNum;
                db.Entry(MaxNumTable).State = EntityState.Modified;
                db.SaveChanges();


                // MaxStockID.FCurNo++;
                MaxStockID.FDesc = "CHG+" + DopolnitNumber(MaxStockId, 6);
                MaxStockID.FCurNo = MaxStockId;
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();
                go = true;
            }
            catch (Exception e)
            {

            }


          //  int QRID = 0;
            bool PrintQR = false;
         //   var QR = new QRTable();
            int NewDvigId = 0;
            DvigenieNEW ND = new DvigenieNEW();
            if (go)//если добавлена шапка то добавляем строки
            {

                //       int MaxLVL = SelectMaxLev(POOrder.FInterID, Item.t_Item.FItemID);
                //       MaxLVL++;
                //      SaveQR()

                int lvl = 0;
                int Parent = 0;
                if (QTY == Dvig.QTYFact)
                {
                    //Не генерим новый код а просто перемещаем
                    //  QRID = Dvig.QRID.Value;
                    ND = CreateNewQRCode(Dvig.StartFBillNo,Dvig.ItemID,StockToID,QTY,CHG,Dvig.PurchasePrice,Dvig.PostavshikId,Dvig.Postavshik,Dvig.StockId,Dvig.Id,0,Dvig.Mnimoe,Dvig.Otmena,0,Dvig.Lev);
                    lvl = ND.Lev;


                }

                if (QTY < Dvig.QTYFact)
                {
                    //генерим новый код родитель - этот
                    ND = CreateNewQRCode(Dvig.StartFBillNo, Dvig.ItemID, StockToID, QTY, CHG, Dvig.PurchasePrice, Dvig.PostavshikId, Dvig.Postavshik, Dvig.StockId, Dvig.Id, Dvig.Id, Dvig.Mnimoe, Dvig.Otmena);
                    PrintQR = true;
                    var Prov = FindProverkaOTK(Dvig.QRString);
                    AddProverkaOTK(ND.QRString, Prov.Status);

                }



               
               // AddStatusOTK(NewDvigId, FindLastStatusOTK(Dvig.Id),true);
                //Вычетаем количество из текущего движения

                decimal QTYFact = Dvig.QTYFact - QTY;
                EditDvigenieNEW(in Dvig, QTYFact);

 
                go = false;

                Entry.FBrNo = "0";

                Entry.FItemID = Dvig.ItemID;
                Entry.FQtyMust = 0;
                Entry.FAuxQtyMust = 0;
                Entry.FQty = QTY;
                Entry.FPrice = Price;
                Entry.FBatchNo = "";
                decimal Q = Convert.ToDecimal(QTY);
                decimal C = Convert.ToDecimal(Entry.FPrice);
                Entry.FAmount = Q * C;
                Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                Entry.FNote = FindModelByItem(Dvig.ItemID);
                Entry.FUnitID = 259;//Непонятно что это
                Entry.FAuxPrice = Entry.FPrice;
                Entry.FPurchasePrice = Entry.FPrice; // Закупочная цена с налогом из заказа поставщику
                Entry.FPurchaseAmount = Q * Entry.FPurchasePrice;
                Entry.FAuxQty = QTY;
                Entry.FPriceRef = Entry.FPrice;
                Entry.FAuxPriceRef = Entry.FAuxPrice;
                Entry.FAmtRef = Q * C;
                Entry.FSourceBillNo = "";
                Entry.FSCStockID = StockFromID;//откуда
                Entry.FDCStockID = StockToID;//куда
                Entry.FSourceInterId = 0;
                Entry.FOrderBillNo = "";
                Entry.FOrderInterID = 0;
                Entry.FOrderEntryID = 0;
                Entry.FMapNumber = Dvig.Id.ToString();//Сюда сохраняем QR Id



                Entry.FContractBillNo = "";
                Entry.FICMOBillNo = "";
                Entry.FMTONo = "";
                Entry.FItemSize = "";
                Entry.FItemSuite = "";
                Entry.FPositionNo = "";
                Entry.FSEOutBillNo = "";
                Entry.FConfirmMemEntry = "";
                Entry.FItemStatementBillNO = "";
                Entry.FReturnNoticeBillNO = "";
                Entry.FSplitState = "";



                try
                {
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();


                    //Сохраняем движение 


                    go = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                }
            }

            if (go)
            {
                go = PeremeshenieNaSklad(StockFromID, Dvig.ItemID, QTY, false);//Минусуем на склад
                if (go)
                {
                    go = PeremeshenieNaSklad(StockToID, Dvig.ItemID, QTY, true);//Плюсуем на склад

                    if(go)
                    {
                        ND.QTYInStock += QTY;
                        try
                        {
                            db.Entry(ND).State = EntityState.Modified;
                            db.SaveChanges();
                        }
                        catch
                        {

                        }
                    }
                }
                Message = Resources.Resource.Error;


             

               // MestoPrikrutit(Mesto, NewDvigId, Dvig.ItemID); //Прикручиваем место к движению если оно указано

            }
          */


            return Json( Result, JsonRequestBehavior.AllowGet);
        }

        //Перемещение со склада на склад
        public JsonResult PeremeshenieSoSkladaNaSkladJson(string StockFrom, string StockTo, string Manager, decimal QTY, int ItemID)
        {
            string Message = "";

            int StockFromID = 0;
            int StockToID = 0;
            int ManagerID = 0;
            int UserID = 0;
            t_Item Item = new t_Item();
            decimal QTYnaSklade = 0;
            string User = FindCurrentUser();
            if (User == "")
            {
                return Json(Resources.Resource.ViberitePolzovatelya);
            }
            try
            {
                StockFromID = FindStockID(StockFrom);
                StockToID = FindStockID(StockTo);
                // StockFromID = db.t_Stock.Where(x => x.FName.Equals(StockFrom)).Select(a => a.FItemID).First();
                //  StockToID = db.t_Stock.Where(x => x.FName.Equals(StockTo)).Select(a => a.FItemID).First();
                ManagerID = FindManagerID(Manager);
                UserID = db.t_Item.Where(x => x.FItemClassID == 3 && x.FName.Equals(User)).Select(a => a.FItemID).First();
                Item = db.t_Item.Where(x => x.FItemID == ItemID).Include(x => x.NomenklaturaEnterprise).First();
                QTYnaSklade = QTYNaSklade(StockFromID, Item.FItemID);

            }
            catch (Exception e)
            {
                return Json(Resources.Resource.ZapolniteYellow);
            }



            if (QTYnaSklade < QTY)
            {
                return Json(Resources.Resource.VveliBolsheChemVZakaze);
            }

            if (QTY == 0)
            {
                return Json(Resources.Resource.NomenklaturiNedostatochno);
            }

            var MaxNum = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            //Плюсуем макс номер
            MaxNum.FMaxNum++;

            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 41).First();

            string CHG = "CHG" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);

            //   int userId = 16507;// TODO найти пользака текущего. Сделать модуль регистрации пользователей и сопоставить их с кинди


            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum.FMaxNum.Value;
            StockBill.FDate = DateTime.Now.Date;
            StockBill.FTranType = 41;
            StockBill.FBillNo = CHG;
            StockBill.FDeptID = 0; //Возможно можно перемещать на подразделение!!! 270 есть в таблице
            StockBill.FEmpID = 0;
            StockBill.FSupplyID = null;
            StockBill.FCheckerID = UserID; // TODO найти пользака текущего. Сделать модуль регистрации пользователей и сопоставить их с кинди
            StockBill.FManagerID = ManagerID;
            StockBill.FSManagerID = ManagerID;
            StockBill.FBillerID = UserID;
            StockBill.FFManagerID = ManagerID;
            StockBill.FHookInterID = 0;//Неизвестно что за хук
            StockBill.FVchInterID = null;//При перемещении есть записи с указанным ID например 229
            StockBill.FPosted = 1;
            StockBill.FCheckSelect = 0;
            StockBill.FROB = 1;
            StockBill.FStatus = 1;
            StockBill.FUpStockWhenSave = false;
            StockBill.FCancellation = false;
            StockBill.FOrgBillInterID = 0;
            StockBill.FBillTypeID = 0;
            StockBill.FPOStyle = 252;
            StockBill.FBackFlushed = false;
            StockBill.FUUID = Guid.NewGuid();
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
            StockBill.FMarketingStyle = 12530;
            StockBill.FRefType = 12561;
            StockBill.FCheckDate = DateTime.Now;
            StockBill.FExplanation = FindModelByItem(ItemID);
            StockBill.FSelTranType = 1007105;// также может быть 85, 0, 1012510
            StockBill.FChildren = 0;
            StockBill.FHookStatus = 0;
            StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;
            StockBill.FsourceType = 37521;
            StockBill.FPayCondition = 0;
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
            StockBill.FPOMode = 0;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";
            StockBill.FHeadSelfA0143 = "KingDeeWeb";
            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum.FMaxNum.Value;

                db.Entry(MaxNum).State = EntityState.Modified;
                db.SaveChanges();


                MaxStockID.FCurNo++;
                MaxStockID.FDesc = "CHG+" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();
                go = true;
            }
            catch (Exception e)
            {

            }



            var QR = new QRTable();
            if (go)//если добавлена шапка то добавляем строки
            {

                //       int MaxLVL = SelectMaxLev(POOrder.FInterID, Item.t_Item.FItemID);
                //       MaxLVL++;
                //      SaveQR()


                //Сохраняем QR код
                string STQ = Item.FNumber + ";" + Item.FName + ";" + QTY + ";" + StockBill.FCheckDate.Value.ToString("dd.MM.yyyy") + ";" + CHG + ";" + FindRussianName(Item) + ";" + StockTo + ";";

                try
                {


                    QR.QR = CreateQrCode(STQ);
                    QR.QRstring = STQ;
                    QR.Date = DateTime.Now;
                    db.QRTable.Add(QR);
                    db.SaveChanges();

                }
                catch (Exception c)
                {
                    Console.WriteLine("Не смогли сгенерировать QR код " + c.Message);
                }


                go = false;

                Entry.FBrNo = "0";

                Entry.FItemID = Item.FItemID;
                Entry.FQtyMust = 0;
                Entry.FAuxQtyMust = 0;
                Entry.FQty = QTY;
                Entry.FPrice = 0; //Цену нужно откуда-то брать при перемещении
                Entry.FBatchNo = "";
                decimal Q = Convert.ToDecimal(QTY);
                decimal C = Convert.ToDecimal(Entry.FPrice);
                Entry.FAmount = Q * C;
                Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                Entry.FNote = FindModelByItem(Item.FItemID);
                Entry.FUnitID = 259;//Непонятно что это
                Entry.FAuxPrice = Entry.FPrice;
                Entry.FPurchasePrice = Entry.FPurchasePrice; // Закупочная цена с налогом из заказа поставщику
                Entry.FPurchaseAmount = Q * Entry.FPurchasePrice;
                Entry.FAuxQty = QTY;
                Entry.FPriceRef = Entry.FPrice;
                Entry.FAuxPriceRef = Entry.FAuxPrice;
                Entry.FAmtRef = Q * C;
                Entry.FSourceBillNo = "";
                Entry.FSCStockID = StockFromID;//откуда
                Entry.FDCStockID = StockToID;//куда
                Entry.FSourceInterId = 0;
                Entry.FOrderBillNo = "";
                Entry.FOrderInterID = 0;
                Entry.FOrderEntryID = 0;
                Entry.FMapNumber = QR.Id.ToString();//Сюда сохраняем QR Id



                Entry.FContractBillNo = "";
                Entry.FICMOBillNo = "";
                Entry.FMTONo = "";
                Entry.FItemSize = "";
                Entry.FItemSuite = "";
                Entry.FPositionNo = "";
                Entry.FSEOutBillNo = "";
                Entry.FConfirmMemEntry = "";
                Entry.FItemStatementBillNO = "";
                Entry.FReturnNoticeBillNO = "";
                Entry.FSplitState = "";



                try
                {
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();


                    //Сохраняем движение 


                    go = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                }
            }

            if (go)
            {
                go = PeremeshenieNaSklad(MaxNum.FMaxNum.Value, StockFromID, Item.FItemID, QTY, false);//Минусуем на склад
                if (go)
                {
                    go = PeremeshenieNaSklad(MaxNum.FMaxNum.Value, StockToID, Item.FItemID, QTY, true);//Плюсуем на склад
                }
                /* go = false;
                 //Добавляем в остаток на складе
                 ICInventory Sklad = new ICInventory();
                 int EstLiStrokaNaSklade = 0;
                 try
                 {
                     EstLiStrokaNaSklade = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == Item.FItemID).Count();
                 }
                 catch 
                 {

                 }
                 if (EstLiStrokaNaSklade > 0)
                 {

                     try
                     {
                         Sklad = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == Item.FItemID).First();
                         Sklad.FQty += FCommitQty;
                     }
                     catch (Exception SE)
                     {
                         Console.WriteLine("Не смогли найти строку на складе " + SE.Message);
                     }

                     try
                     {

                         db.Entry(Sklad).State = EntityState.Modified;
                         db.SaveChanges();
                         go = true;
                     }

                     catch (Exception exx)
                     {
                         Console.WriteLine("Ошибка добавления на склад " + exx.Message);
                     }
                 }
                 else
                 {
                     //Если нет такой строки то добавляем новую
                     Sklad.FQty = FCommitQty;
                     Sklad.FStockID = StockID;
                     Sklad.FItemID = Item.FItemID;
                     Sklad.FBrNo = "0";
                     Sklad.FBatchNo = "";
                     Sklad.FKFDate = "";
                     Sklad.FMTONo = "";
                     try
                     {
                         db.ICInventory.Add(Sklad);
                         db.SaveChanges();
                         go = true;
                     }
                     catch (Exception exxx)
                     {
                         Console.WriteLine("Не смогли добавить новую строку поступления на склад ICInventory " + exxx.Message);
                     }
                 }
                */


            }

            if (go)
            {
                Message = "Ok";
            }
            //     "(FBrNo, FInterID, FEntryID, FItemID, FQtyMust,FAuxQtyMust, FQty, FPrice, FBatchNo, " +
            //                        "FAmount, FNote, FUnitID, FAuxPrice, FAuxQty, FProcessCost, FMaterialCost, FTaxAmount," +
            //                         " FSourceBillNo, FDCStockID, FSourceInterId, FOrderBillNo, FOrderInterID, FOrderEntryID)" +
            //                         "VALUES('O', " + InterId + "," + NPP + ", " + NL[0].FItemId + ", " + KolichestvoVZakaze + ", " + KolichestvoVZakaze + ", " + QTY + ", " + CENA + ", '', " +
            //                         "" + Amount + ", 'Enterprise', 259, " + CENA + ", " + QTY + ", 0, 0, 0," +
            //                         " '" + PURCH + "', " + SkladKitai + ", " + PURCHINTERID + ", '" + PURCH + "', " + PURCHINTERID + "," + StrokaPURCH + ")", true);




            //Меняем остатки в заказе поставщику
            try
            {

                db.Entry(Item).State = EntityState.Modified;
                db.SaveChanges();
                ViewBag.Message = "Ok";
            }
            catch (Exception E)
            {
                ViewBag.Message = "Ошибка = " + E.Message;
            }


            return Json(Message + ";" + QR.Id, JsonRequestBehavior.AllowGet);
        }

        public int FindDeptId(string Department)
        {
            int Id = 0;
            try
            {
                Id = db.t_Item.Where(x => x.FName.Equals(Department)).Select(x => x.FItemID).First();
            }
            catch
            {

            }
            return Id;
        }



        public int FindPlanshetId()
        {
            int PlanshetId = 0;
            ComputerNames P = new ComputerNames();
            if (Session["Planshet"] != null)
            {
                P = (ComputerNames)Session["Planshet"];
            }
            else
            {
                string PId = Request.UserHostAddress;


                try
                {
                    P = db.ComputerNames.Where(x => x.ComputerId.Equals(PId)).First();
                    Session["Planshet"] = P;
                }
                catch
                {
                    P.Id = 1;
                    P.Name = "Пожалуйста зарегистрируйте планшет";
                    P.DepartmentId = 1;
                }

            }
            return P.Id;
        }

        public ActionResult PerenestiDati()
        {
            List<ICMO> iCMO = new List<ICMO>();
            List<ICMO> Result = new List<ICMO>();
            DateTime Date = DateTime.Now.AddMonths(-13);
            DateTime D = DateTime.Now.Date;
            D = new DateTime(D.Year, D.Month, 1);
            ViewBag.Header = "Перенос пустых Works";
            //   iCMO = db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Where(x => x.FPlanCommitDate >= Date && x.FCommitQty != x.FQty && x.FStatus == 1).Include(x => x.t_Item.NomenklaturaEnterprise).ToList();

            try
            {
                iCMO = db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Include(x => x.PPBOMEntry).Where(x => x.FCommitQty == 0 && x.FPlanCommitDate >= Date && x.FStatus == 1 && x.PPBOMEntry.Sum(y => y.FQty) == 0).ToList();// db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Where(x => x.FPlanCommitDate >= Date && x.FCommitQty != x.FQty && x.FStatus == 1).Include(x => x.t_Item.NomenklaturaEnterprise).ToList();
            }
            catch
            {

            }

            try
            {
                foreach (var W in iCMO)
                {
                    W.FPlanCommitDate = D;
                    W.FPlanFinishDate = D.AddDays(3);
                    db.Entry(W).State = EntityState.Modified;
                    db.SaveChanges();
                    Result.Add(W);
                }
            }
            catch
            {

            }

            return View(Result);
        }
        public ActionResult PerenosDatWork()
        {

            List<ICMO> iCMO = new List<ICMO>();
            List<ICMO> Result = new List<ICMO>();
            DateTime Date = DateTime.Now.AddMonths(-13);




            ViewBag.Header = "Перенос пустых Works";
            //   iCMO = db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Where(x => x.FPlanCommitDate >= Date && x.FCommitQty != x.FQty && x.FStatus == 1).Include(x => x.t_Item.NomenklaturaEnterprise).ToList();


            try
            {
                iCMO = db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Include(x => x.PPBOMEntry).Where(x => x.FCommitQty == 0 && x.FPlanCommitDate >= Date && x.FStatus == 1 && x.PPBOMEntry.Sum(y => y.FQty) == 0).ToList();// db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Where(x => x.FPlanCommitDate >= Date && x.FCommitQty != x.FQty && x.FStatus == 1).Include(x => x.t_Item.NomenklaturaEnterprise).ToList();
                                                                                                                                                                                                                                          //  IC.StarMehWorks = new StarMehWorks();



            }
            catch
            {

            }








            return View(iCMO);
        }

        public List<ComputerNames> FindPlanshets(int DepartmentId=0)
        {
            List<ComputerNames> Planshets = new List<ComputerNames>();
            try
            {
                Planshets = db.ComputerNames.ToList();
            }
            catch
            {

            }
            if (DepartmentId != null && DepartmentId > 0)
            {
                try
                {
                    Planshets = Planshets.Where(x => x.DepartmentId == DepartmentId).ToList();
                }
                catch
                {

                }
            }

            return Planshets;


        }


        public ActionResult Komplektovka(string QRData)
        {
            if (QRData == null || QRData.Equals(""))
            {
                KomplektovkaView KW = LoadKomplektovka();
                QRData = KW.QRD;
            }
            ViewBag.QRData = QRData;
            ViewBag.Roles = FindCurrentRoles();

            return View();
        }
        public ActionResult KomplektovkaMenu(string QRData)
        {
            //KomplektovkaView Komp = new KomplektovkaView();

            // Komp = NewKomplektovka(QRData);

            //int StockId = LoadPlanogrammaStock();

            KomplektovkaView Komp = new KomplektovkaView();
            Komp = NewKomplektovka(QRData);


            ViewBag.QRData = QRData;
            ViewBag.Roles = FindCurrentRoles();
            return View();
        }

        public decimal QTYCINToday(string QRData, string KomplektovkaQR)
        {
            decimal QTY = 0;
            DateTime D = DateTime.Now.Date;
            ItemView QR = QRTraceLight(QRData);
            KomplektovkaView Komp = new KomplektovkaView();
            Komp = NewKomplektovka("");//(KomplektovkaQR);

            try
            {
                QTY = FindQTYFromCIN(Komp.WorkId, QR.Item.FItemID, D);

            }
            catch
            {

            }
            return QTY;
        }

        public decimal QTYNeedToday(string QRData, string KomplektovkaQR)
        {
            decimal QTY = 0;
            DateTime D = DateTime.Now.Date;
            ItemView QR = QRTraceLight(QRData);
            KomplektovkaView Komp = new KomplektovkaView();
            Komp = NewKomplektovka("");//(KomplektovkaQR);

            try
            {
                QTY = FindQTYFromPlanWork(Komp.WorkId, QR.Item.FItemID, D);
                ICMO W = db.ICMO.Where(x => x.FInterID == Komp.WorkId).First();
                PPBOMEntry BOME = db.PPBOMEntry.Where(x => x.FICMOInterID == Komp.WorkId && x.FItemID == Komp.ItemId).First();
                decimal NeedQty = BOME.FQtyMust - BOME.FWIPQTY.Value - (BOME.FQtyScrap * W.FCommitQty) + 0.1m; // Считаем Сколько нужно по бому минус сколько есть в НЗП - Сколько произведено по ворку * расход

                if (NeedQty < QTY)
                {
                    QTY = NeedQty;
                }



            }
            catch
            {

            }
            return QTY;
        }

        public decimal QTYNeedTomorrow(string QRData, string KomplektovkaQR)
        {
            decimal QTY = 0;
            DateTime D = DateTime.Now.Date;
            DateTime DateTomorrow = DateTime.Now.Date;

            try
            {
                DateTomorrow = db.PlanoviWorks.Where(x => x.Date > D).OrderBy(x => x.Date).Select(x => x.Date.Value).Distinct().First();
            }
            catch
            {

            }
            ItemView QR = QRTraceLight(QRData);
            KomplektovkaView Komp = new KomplektovkaView();
            Komp = NewKomplektovka("");//(KomplektovkaQR);

            try
            {
                QTY = FindQTYFromPlanWork(Komp.WorkId, QR.Item.FItemID, DateTomorrow);

            }
            catch
            {

            }
            return QTY;
        }

        public decimal QTYinNZP(string QRData, string KomplektovkaQR)
        {
            decimal QTY = 0;
            ItemView QR = QRTraceLight(QRData);
            KomplektovkaView Komp = new KomplektovkaView();
            Komp = NewKomplektovka("");//(KomplektovkaQR);

            try
            {
                QTY = Komp.BOMs.Where(x => x.FItemID == QR.Item.FItemID).First().FWIPQTY.Value;
            }
            catch
            {

            }
            return QTY;
        }

        //Ищем количество по последнему движению в QR
        public decimal QTYinQR(string QRData)
        {
            decimal QTY = 0;
            ItemView QR = new ItemView();// QRTrace(QRData);
            QR.FindLastDvig(QRData);
            try
            {
                QTY = QR.LastDvig.QTYFact;
            }
            catch
            {

            }
            return QTY;
        }


        public string FindLastStatusOTK(string QRData)
        {
            string go = "";
            ItemView QR = QRTrace(QRData);

            try
            {
                if (QR.LastControl.Status == 2 || QR.LastControl.Status == 9 || QR.LastControl.Status == 6)
                {

                    go = "TRUE;";
                }
                else
                {
                    go = "FALSE;";
                }
                if (CultureRU())
                {
                    go += QR.LastControl.StatusOTK.NameRu;
                }
                else
                {
                    go += QR.LastControl.StatusOTK.NameZh;
                }

            }
            catch
            {

            }
            return go;
        }

        public decimal QTYinStock(string QRData)
        {
            decimal QTY = 0;
            int StockId = 0;
            ItemView QR = QRTrace(QRData);

            try
            {
                StockId = QR.LastDvig.StockId;
                QTY = db.ICInventory.Where(x => x.FStockID == StockId && x.FItemID == QR.Item.FItemID).Sum(x => x.FQty);
            }
            catch
            {

            }
            return QTY;
        }

        public JsonResult FindLastStatusOTKJSON(string QRData)
        {
            string status = "FALSE;X";
            status = FindLastStatusOTK(QRData);

            return Json(status);

        }

        public JsonResult QTYINStockJson(string QRData)
        {
            decimal QTY = 0;
            QTY = QTYinStock(QRData);

            return Json(QTY);

        }

        //Ищем количество по последнему движению в QR JSON
        public JsonResult QTYinQRJson(string QRData)
        {
            decimal QTY = 0;
            QTY = QTYinQR(QRData);

            return Json(QTY);

        }

        //Ищем количество по последнему движению в QR JSON
        public JsonResult QTYinQRInventJson(string QRData, int Prohod = 1)
        {
            decimal QTY = 0;
            string Message = "";
            ItemView I = new ItemView();
            I.FindLastDvig(QRData);


            if (Prohod == 1)
            {
                try
                {
                    QTY = db.InventQR.Where(x => x.QRId == I.LastDvig.QRID).First().QTY;
                    Message = Resources.Resource.IzmenitFactOstatok + Prohod;
                }
                catch
                {

                }
            }
            if (Prohod == 2)
            {
                try
                {
                    QTY = db.InventSecondQR.Where(x => x.QRId == I.LastDvig.QRID).First().QTY;
                    Message = Resources.Resource.IzmenitFactOstatok + Prohod;
                }
                catch
                {

                }
            }

            if (QTY == 0)
            {
                QTY = QTYinQR(QRData);
                Message = Resources.Resource.QTYFact + " " + Resources.Resource.Save + " " + Prohod;
            }

            return Json(QTY + ";" + Message);

        }


        public DvigenieNEW FindQRString(string QRData = "")
        {
            DvigenieNEW D = new DvigenieNEW();
            ItemView Dvig = new ItemView();
            if (QRData.Equals(""))
            {
                return D;
            }
            //Добавляем в сессию DvigenieNEW
            if (QRData.Contains("POORD") == false && QRData.Contains("WW") == false)
            {
                D = FindDvigenieNEW(QRData);
            }
            else
            {
                //Преобразование старого в новый
              //  if (QRData.Contains("POORD000022") == false)
              //  {
                    Dvig.FindLastDvig(QRData);
                    if (Dvig.LastDvig.NewDvigenieString == null || Dvig.LastDvig.NewDvigenieString.Length < 2)
                    {
                      //  D = QRtoNEWQR(QRData);
                    }
                    else
                    {
                        D = FindDvigenieNEW(Dvig.LastDvig.NewDvigenieString);
                    }
             //   }
           
              
            }
            return D;
        }

        public string FindConvertQR(string QRData)
        {
            string Result = QRData;
            DvigenieNEW D = FindQRString(QRData);
            ItemView DD = new ItemView();
            if (D.Id == 0)
            {
                DD = FindQRScan(QRData);
                if (DD.LastDvig.NewDvigenieString != null && DD.LastDvig.NewDvigenieString != "")
                {
                    D = FindQRString(DD.LastDvig.NewDvigenieString);
                }
                else
                {
                    D = QRtoNEWQR(QRData);
                    D = FindQRString(D.QRString);
                }
                try
                {
                    //  Result = DD.LastDvig.QTYFact + ";" + DD.LastDvig.Item.FNumber;
                    Result = D.QRString;
                }
                catch
                {

                }
            }
            else
            {
                try
                {
                    Result = D.QRString;
                }
                catch
                {

                }
            }
            return Result;
        }

        public JsonResult QRNEWtoSession(string QRData)
        {
            string Result = "false;false";
            DvigenieNEW D =FindQRString(QRData);
            ItemView DD = new ItemView();
            if (D.Id==0)
            {
            
                DD = FindQRScan(QRData);
                if (DD.LastDvig.NewDvigenieString!=null&&DD.LastDvig.NewDvigenieString!="")
                {
                    D = FindQRString(DD.LastDvig.NewDvigenieString);
                }
                else
                {
                    D = QRtoNEWQR(QRData);
                    D = FindQRString(D.QRString);
                }
                try
                {
                    //  Result = DD.LastDvig.QTYFact + ";" + DD.LastDvig.Item.FNumber;
                    Result = D.QTYFact + ";" + D.t_Item.FNumber;
                }
                catch
                {

                }
            }
            else
            {
                try
                {
                    Result = D.QTYFact + ";" + D.t_Item.FNumber;
                }
                catch
                {

                }
            }
          
          

            return Json(Result);

        }

       


        public JsonResult QTYNameinQRJson(string QRData)
        {
            decimal QTY = 0;
            string PartNumber = "";
            ItemView I = new ItemView();
            if (QRData != "")
            {
                I.FindLastDvig(QRData);



                QTY = I.LastDvig.QTYFact;
                PartNumber = I.LastDvig.Item.FNumber;
            }
            else
            {
                return Json(QTY + ";" + PartNumber);
            }

            return Json(QTY + ";" + PartNumber);

        }


        public JsonResult QTYinNZPJson(string QRData, string KomplektovkaQR)
        {
            decimal QTY = 0;
            QTY = QTYinNZP(QRData, KomplektovkaQR);

            return Json(QTY);

        }

        public JsonResult QTYNeedTodayJson(string QRData, string KomplektovkaQR)
        {
            decimal QTY = 0;
            QTY = QTYNeedToday(QRData, KomplektovkaQR);
            if (QTY < 0)
            {
                QTY = 0;
            }
            return Json(QTY);

        }
        public JsonResult QTYNeedTomorrowJson(string QRData, string KomplektovkaQR)
        {
            decimal QTY = 0;
            QTY = QTYNeedTomorrow(QRData, KomplektovkaQR);
            if (QTY < 0)
            {
                QTY = 0;
            }
            return Json(QTY);

        }

        public JsonResult QTYCINTodayJson(string QRData, string KomplektovkaQR)
        {
            decimal QTY = 0;
            QTY = QTYCINToday(QRData, KomplektovkaQR);


            return Json(QTY);

        }




        public JsonResult StornoNZP(string QRData, decimal QTY)
        {
            string Result = "Ok;";
            ItemView I = QRTrace(QRData);

            KomplektovkaView KW = LoadKomplektovka();
            NZP nzp = new NZP();
            UsersKDW U = FindCurrentKDWUser();
            int nzpid = 0;

            //  nzp = LoadKomplektovka();

            try
            {
                nzp = KW.NZPs.Where(x => x.ItemId == I.Item.FItemID && x.DvigenieId == I.LastDvig.Id).First();
                // nzpid = KW.NZPs.Where(x => x.ItemId == I.Item.FItemID && x.DvigenieId == I.LastDvig.Id).Select(x=>x..First();
                //    KW = null;
                Dvigenie D = I.LastDvig;
                if (QTY <= nzp.QTY)
                {

                    nzp.QTY -= QTY;
                    if (nzp.QTY > 0)
                    {
                        db.Entry(nzp).State = EntityState.Modified;
                        db.SaveChanges();
                        //  D.QTYFact = D.QTYFact + QTY;
                        //    db.Entry(D).State = EntityState.Modified;
                        //   db.SaveChanges();
                        StornoPeremensheniyaNaProizvodstvoJson(I.LastDvig.Id, U.t_Item.FName, QTY, nzp.StockId.ToString());

                        //   EditDvigenie(D, D.QTYFact + QTY);
                    }

                    if (nzp.QTY == 0)
                    {
                        nzp.Active = false;
                        db.Entry(nzp).State = EntityState.Modified;
                        db.SaveChanges();

                    }

                    //       KW = LoadKomplektovka();
                    KW.ObnovitNZP();
                }
                else
                {
                    return Json(Resources.Resource.QTYNaSkladeNedostatochno);
                }
            }
            catch (Exception e)
            {
                return Json(e.Message);
            }


            return Json(Result);
        }

        public int FindStockFrom(string FBillNo)
        {
            int Result = 0;
            try
            {//FSC откуда FDC куда
                Result = db.ICStockBill.Where(x => x.FBillNo.Equals(FBillNo)).Select(x => x.FSCStockID.Value).First();
            }
            catch (Exception e)
            {

            }
            return Result;
        }
        public JsonResult VozvratNZP(string QRData, decimal QTY)
        {
            string Result = "Ok;";
            ItemView I = QRTrace(QRData);
            string UserId = FindCurrentUser();
            KomplektovkaView KW = LoadKomplektovka();
            NZP nzp = new NZP();
            int nzpid = 0;
            decimal NZPQTY = 0;
            int StockFrom = 0;
            //  nzp = LoadKomplektovka();

            try
            {
                if (I.LastSOUT != null && I.LastSOUT.Id != 0)
                {
                    nzp = KW.NZPs.Where(x => x.ItemId == I.Item.FItemID && x.DvigenieId == I.LastSOUT.Id).First();
                }

                NZPQTY = db.PPBOMEntry.Where(x => x.FICMOInterID == KW.WorkId && x.FItemID == I.Item.FItemID).Sum(x => x.FWIPQTY.Value);
                // nzpid = KW.NZPs.Where(x => x.ItemId == I.Item.FItemID && x.DvigenieId == I.LastDvig.Id).Select(x=>x..First();
                //    KW = null;
                Dvigenie D = nzp.Dvigenie;
                if (nzp.Dvigenie == null)
                {
                    D = I.LastDvig;
                }
                if (QTY <= NZPQTY)
                {


                    //    EditDvigenie(D, D.QTYFact + QTY);


                    string Data = CINSTORNO(D.Id, UserId, QTY, D.StockFromId.ToString(), nzp);
                    string[] S = Data.Split(';');
                    nzp.SOUTId = Convert.ToInt32(S[0]);


                    if (S[1].Equals("True"))
                    {
                        Result = "True;" + S[2];

                    }
                    else
                    {
                        Result = "False;" + S[2];
                    }



                    //       KW = LoadKomplektovka();
                    KW.ObnovitNZP();
                }
                else
                {
                    return Json("Слишком много номенклатуры в перемещении в НЗП есть " + nzp.QTY + " а в QR можно вернуть " + (nzp.Dvigenie.QTY - nzp.Dvigenie.QTYFact) + "А вы перемещаете " + QTY);
                }
            }
            catch (Exception e)
            {
                return Json(e.Message);
            }


            return Json(Result);
        }

        public KomplektovkaView LoadKomplektovka()
        {
            KomplektovkaView nzp = new KomplektovkaView();
            if (Session["KOMPLEKTOVKA"] != null)
            {
                nzp = (KomplektovkaView)Session["KOMPLEKTOVKA"];
            }
            return nzp;

        }

        public List<NZPNEW> FindWorksNZPNEW ( int WorkId, string QRString="")
        {
           List<NZPNEW> nzp = new List<NZPNEW>();
            try
            {
                nzp = db.NZPNEW.Where(x => x.WorkId == WorkId).ToList();
            if (QRString!="")
                {
                    nzp = nzp.Where(x => x.QRString.Equals(QRString)).ToList();
                }
            }
            catch
            {

            }
            return nzp;
        }


        public string SOUTNEW(int DvigenieNEWId, int WorkId, int ManagerID, decimal QTY, bool AutoQTY = false)
        {
            //AutoQTY автоматически меняет количество к перемещению
          
            UsersKDW U = FindCurrentKDWUser();

            t_Item Item = new t_Item();
            PPBOMEntry BOMEntry = new PPBOMEntry();
            decimal QTYnaSklade = 0;
            decimal Price = 0;
            decimal NeedInWork = 0;
            ICMO Work = new ICMO();

            int StockID = 0;
            DvigenieNEW Dvig = new DvigenieNEW();
     
            if (DvigenieNEWId != null && DvigenieNEWId != 0)
            {
                try
                {
                    Dvig = FindDvigenieNEW(DvigenieNEWId);
                    Item = Dvig.t_Item;
                }
                catch
                {

                }
            }
            else
            {
                return "Ошибка QR кода попробуйте отсканировать еще раз";
            }

            try
            {
                StockID = Dvig.StockId;

            }
            catch
            {

            }
            SaveToDocLog(DvigenieNEWId, Item.FItemID, "Начато перемещение в НЗП SOUT", QTY, StockID, WorkId, "");
            try
            {

                Price = Dvig.PurchasePrice; 

                Work = db.ICMO.Where(x => x.FInterID == WorkId).Include(x => x.t_Department).First();
             
                BOMEntry = db.PPBOMEntry.Where(x => x.FICMOInterID == WorkId && x.FItemID == Dvig.ItemID).First();
                
              
                SaveToDocLog(Dvig.Id, Item.FItemID, "Начали создание документа SOUT new", QTY, 0, WorkId, "Пока не создан");
            }
            catch (Exception e)
            {
                SaveToDocLog(Dvig.Id, Item.FItemID, "Ошибка ", QTY, 0, WorkId, "Пока не создан");
                return  Resources.Resource.ErrorNeNaidenWork ;
            }

            QTYnaSklade = SearchQTYInStock(Dvig.StockId.ToString(), Dvig.ItemID.ToString());
            //Ничего не делаем если нет на складе
            if (QTYnaSklade <= 0)
            {
                SaveToDocLog(Dvig.Id, Item.FItemID, "Ошибка нет на складе", QTY, 0, WorkId, "Пока не создан");
                return Resources.Resource.NetNaSklade;
            }
                if (QTYnaSklade < QTY)
                {
                if (!AutoQTY)
                {
                    SaveToDocLog(Dvig.Id, Item.FItemID, "Ошибка не достаточно складе", QTY, 0, WorkId, "Пока не создан");
                    return Resources.Resource.QTYNaSkladeNedostatochno + "QR=" + QTY + " " + Resources.Resource.QTYNaSklade + "=" + QTYnaSklade;
                }
                else
                {
                    QTY = QTYnaSklade;
                    SaveToDocLog(Dvig.Id, Item.FItemID, "Автоматически уменьшено количество к перемещению по количеству на складе", QTY, 0, WorkId, "Пока не создан");
                }
                }

            //Ищем необходимое кол-во
            try
            {
                var BOMS = FindBOMSFromWork(WorkId, Dvig.ItemID, true, true, "Перемещение на производство. ");
                NeedInWork = BOMS.Sum(x => x.QTYNEED);
                if (NeedInWork==0)
                {
                    SaveToDocLog(Dvig.Id, Item.FItemID, "Ошибка слишком много для WORK нужно 0", QTY, 0, WorkId, "Пока не создан");
                    return Resources.Resource.OgranichenieWORK + "QR=" + QTY + " " + Resources.Resource.OstatkiVWorks + "=" + NeedInWork;
                }
            }
            catch
            {

            }
            if (NeedInWork< QTY)
            {
                if (!AutoQTY)
                {
                    SaveToDocLog(Dvig.Id, Item.FItemID, "Ошибка слишком много для WORK", QTY, 0, WorkId, "Пока не создан");
                    return Resources.Resource.OgranichenieWORK + "QR=" + QTY + " " + Resources.Resource.OstatkiVWorks + "=" + NeedInWork;
                }
                else
                {
                    QTY = NeedInWork;
                    SaveToDocLog(Dvig.Id, Item.FItemID, "Автоматически уменьшено количество к перемещению по ограничению WORK", QTY, 0, WorkId, "Пока не создан");
                }
            }


            //Если рассчеты изменили просчитали 0 не создаем документ
            if (QTY <= 0)
            {
                SaveToDocLog(Dvig.Id, Item.FItemID, "Потребность в перемещении 0", QTY, 0, WorkId, "Пока не создан");
                return Resources.Resource.QTYNaSkladeNedostatochno + "QR=" + QTY;
            }


            //   if (QTYnaSklade < QTY)
            //   {
            //        return Json(Resources.Resource.VveliBolsheChemVZakaze);
            //   }

            //   if (QTY == 0)
            //  {
            //       return Json(Resources.Resource.NomenklaturiNedostatochno);
            //   }

            // var MaxNum = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            int MaxNum = FindMaxNumStockBill();
            var MaxNumTable = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();
            //Плюсуем макс номер
            MaxNum++;

            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 24).First();

            string SOUT = "SOUT" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);




            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum;
            StockBill.FDate = DateTime.Now.Date;
            StockBill.FTranType = 24;
            StockBill.FBillNo = SOUT;
            StockBill.FDeptID = Work.FWorkShop.Value; //Перемещать на подразделение!!! 270 есть в таблице
            StockBill.FEmpID = null;
            StockBill.FSupplyID = null;
            StockBill.FCheckerID = U.UserID;
            StockBill.FManagerID = U.MOLId;
            StockBill.FSManagerID = U.MOLId;
            StockBill.FBillerID = U.UserID;
            StockBill.FFManagerID = ManagerID;

            StockBill.FHookInterID = 0;//Неизвестно что за хук
            StockBill.FVchInterID = 0;//При перемещении есть записи с указанным ID например 229
            StockBill.FPosted = 1; //19.07 Posted должно быть 1
            StockBill.FCheckSelect = 0;
            StockBill.FROB = 1;
            StockBill.FStatus = 1;
            StockBill.FUpStockWhenSave = false;
            StockBill.FCancellation = false;
            StockBill.FOrgBillInterID = 0;
            StockBill.FBillTypeID = 0;
            StockBill.FPOStyle = null;
            StockBill.FBackFlushed = false;
            StockBill.FPurposeID = 12000;
            StockBill.FUUID = Guid.NewGuid();
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
            StockBill.FMarketingStyle = 12530;
            StockBill.FRefType = 0;
            StockBill.FCheckDate = DateTime.Now.Date;
            StockBill.FExplanation = "WEB " + U.Name;
            StockBill.FSelTranType = 85;// также может быть 85, 0, 1012510
            StockBill.FChildren = 0;
            StockBill.FHookStatus = 0;
            StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;
            StockBill.FsourceType = 37521;
            StockBill.FPayCondition = 0;
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
            StockBill.FNote = FindModelByItem(Dvig.ItemID);
            StockBill.FPOMode = 0;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";
            StockBill.FHeadSelfA0143 = "KingDeeWeb";
            StockBill.FAcctID = 0;
            StockBill.FVchInterID = 0;//В SOUT здесь должен быть 0 Выявлено 03.03.2023
            StockBill.FHeadSelfB0435 = Work.FNote;//Тянем производимый объект из ворка

            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum;

                MaxNumTable.FMaxNum = MaxNum;
                db.Entry(MaxNumTable).State = EntityState.Modified;
                db.SaveChanges();
                SaveToDocLog(DvigenieNEWId, Item.FItemID, "Создали документ SOUT ", QTY, 0, WorkId, SOUT);

                MaxStockID.FCurNo++;
                MaxStockID.FDesc = "SOUT+" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();

                bool BC = BillCodeDvig(24, MaxStockID.FCurNo.Value);
                SaveToDocLog(0, Item.FItemID, "Сдвинут счетчик SOUT статус=" + BC.ToString(), QTY, 0, BOMEntry.FICMOInterID, SOUT);

                go = true;
            }
            catch (Exception e)
            {

            }



            decimal QTYToWork = 0;
            int QRID = 0;
            int DvigId = Dvig.Id;
            bool PrintQR = false;
            if (go)//если добавлена шапка то добавляем строки
            {

           
                /*
              
                if (Dvig.QTYFact == QTY)
                {
                    DvigId = SaveDvigenie(Dvig.ZakazPostavshiku, SOUT, 0, Dvig.ItemID, Dvig.POOrderId, StockFromID, DepartmentId, Dvig.QRID.Value, Dvig.Lev, Dvig.Parent, Work.FBillNo, Dvig.Mnimoe);
                    QRID = Dvig.QRID.Value;
                    AddStatusOTK(DvigId, 2);
                    SaveToDocLog(DvigId, Item.FItemID, "Количество в движении равен перемещаемому количеству. QRID=" + QRID, QTY, 0, WorkId, SOUT);
                }
                else
                {
                    int lvl = SelectMaxLev(Dvig.POOrderId, Dvig.ItemID, Dvig.ZakazPostavshiku);
                    lvl++;

                    QRID = SaveQR(Dvig.Item, Dvig.ZakazPostavshiku, Dvig.POOrderId, lvl); //Сохраняем QR Dvig.QRID.Value
                    DvigId = SaveDvigenie(Dvig.ZakazPostavshiku, SOUT, 0, Dvig.ItemID, Dvig.POOrderId, StockFromID, DepartmentId, QRID, lvl, Dvig.Id, Work.FBillNo, Dvig.Mnimoe);
                    PrintQR = true;
                    AddStatusOTK(DvigId, 2);
                    SaveToDocLog(DvigId, Item.FItemID, "Количество в движении не равно перемещаемому количеству. QRID=" + QRID, QTY, 0, WorkId, SOUT);
                }
                decimal QTYFact = Dvig.QTYFact - QTY;

                */



                EditDvigenieNEW(Dvig, Dvig.QTYFact - QTY);//Редактируем предыдущее движение, обновляем фактическое кол-во

                SaveToDocLog(DvigId, Item.FItemID, "Отредактировали движение для документа SOUT. QRID=" + QRID, QTY, 0, WorkId, SOUT);
                //Сохраняем QR код
                // string STQ = Item.FNumber + ";" + Item.FName + ";" + QTY + ";" + StockBill.FCheckDate.Value.ToString("dd.MM.yyyy") + ";" + SOUT + ";" + FindRussianName(Item) + ";" + DepartmentID + ";";



                go = false;
                try
                {
                    Entry.FBrNo = "0";

                    Entry.FItemID = Item.FItemID;
                    Entry.FQtyMust = QTY;
                    Entry.FAuxQtyMust = QTY;
                    Entry.FQty = QTY;
                    Entry.FPrice = Price;

                    Entry.FBatchNo = "";
                    decimal Q = Convert.ToDecimal(QTY);
                    decimal C = Convert.ToDecimal(Entry.FPrice);
                    Entry.FAmount = Q * C;
                    Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                    Entry.FNote = Work.FMTONo;//Убран 4.10 Пишем в ремарку, берем из общего котла //FindModelByItem(Dvig.ItemID);
                    Entry.FUnitID = 259;//Это единица измерения
                    Entry.FAuxPrice = Entry.FPrice;
                    Entry.FPurchasePrice = Entry.FPurchasePrice; // Закупочная цена с налогом из заказа поставщику
                    Entry.FPurchaseAmount = Q * Entry.FPurchasePrice;
                    Entry.FAuxQty = QTY;
                    Entry.FPriceRef = Entry.FPrice;
                    Entry.FAuxPriceRef = Entry.FAuxPrice;
                    Entry.FAmtRef = Q * C;
                    Entry.FSourceBillNo = Work.FBillNo;
                    Entry.FICMOBillNo = Work.FBillNo;
                    Entry.FICMOInterID = Work.FInterID;
                    Entry.FPPBomEntryID = BOMEntry.FEntryID;// Work.PPBOM.PPBOMEntry.Where(x => x.FItemID == ItemID).First().FEntryID; //TODO ПЕРЕДЕЛАТЬ
                    Entry.FSourceTranType = 85;
                    Entry.FSCStockID = Dvig.StockId;//откуда
                    Entry.FDCStockID = 0;//куда
                    Entry.FSourceInterId = Work.FInterID;
                    Entry.FCostOBJID = Work.FCostObjID;// Тянем ID производимого объекта
                    Entry.FPlanPrice = FindPlanPrice(Item.FItemID);
                    decimal P = Convert.ToDecimal(Entry.FPlanPrice);
                    Entry.FAuxPlanPrice = Entry.FPlanPrice;
                    Entry.FPlanAmount = Q * P;
                    Entry.FSourceEntryID = 1;//Видимо ссылка на бом номер строки в боме?
                    Entry.FOrderBillNo = "";
                    Entry.FOrderInterID = 0;
                    Entry.FOrderEntryID = 0;
                    Entry.FMapNumber = Dvig.QRString;//Сюда сохраняем QR Id
                    Entry.FReProduceType = 1059;
                    Entry.FPlanMode = 14036;
                    Entry.FEntrySelfB0457 = "";// Наименование поставщика
                    Entry.FEntrySelfB0458 = ""; //Наименование склада
                    if (Dvig.ItemNumber[0].Equals("9"))
                    {
                        Entry.FMTONo = Work.FMTONo;          //Убран 4.10 Пишем в ремарку, берем из общего котла // Заказ покупателя из WORK 08.06.2023
                    }
                    else
                    {
                        Entry.FMTONo = "";
                    }
            

                    Entry.FContractBillNo = "";

                    
                    Entry.FItemSize = "";
                    Entry.FItemSuite = "";
                    Entry.FPositionNo = "";
                    Entry.FSEOutBillNo = "";
                    Entry.FConfirmMemEntry = "";
                    Entry.FItemStatementBillNO = "";
                    Entry.FReturnNoticeBillNO = "";
                    Entry.FSplitState = "";



                    BOMEntry.FAuxQty += QTY;
                    BOMEntry.FQty += QTY; // 05.09.2023 Из-за ошибочного сохранения модели плывут FQty. Берем за истину FAuxQty и прибавляем текущее
                  
                    BOMEntry.FStockQty = BOMEntry.FAuxQty; // 24.05.2023 чтобы документы проводились удачно а то ссылаются на заглючившие значения здесь
                    BOMEntry.FAuxStockQty = BOMEntry.FAuxQty;

                    BOMEntry.FWIPAuxQTY += QTY; // 05.09.2023 Из-за ошибочного сохранения модели плывут FQty. Берем за истину FAuxQty и прибавляем текущее
                    BOMEntry.FWIPQTY += QTY;

                    BOMEntry.FAuxQtySupply = 0;//Math.Abs(BOMEntry.FAuxQtyMust - BOMEntry.FAuxStockQty); //22/09.2023 В это поле нужно всегда фиксировать разницу
                    BOMEntry.FQtySupply = 0;//BOMEntry.FAuxQtySupply;

                   


                    


                }
                catch (Exception e)
                {
                    SaveToDocLog(DvigId, Item.FItemID, " Ошибка Не смогли сохранить строку SOUT " + e.Message, QTY, 0, WorkId, SOUT);
                    return Resources.Resource.Error;
                }
              
                try
                {
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();
                    SaveToDocLog(DvigId, Item.FItemID, "Создали строку в документе SOUT. N" + Entry.FInterID + "E" + Entry.FEntryID, QTY, 0, WorkId, SOUT);

                    //Обновляем количество по саутам
                    decimal QTYSOUT = FindSOUTQTY(Item.FItemID, Work.FInterID);

                    if (BOMEntry.FAuxQty != QTYSOUT)
                    {
                        BOMEntry.FAuxQty = QTYSOUT;
                        BOMEntry.FQty = QTYSOUT;
                    }

                   
                    db.Entry(BOMEntry).State = EntityState.Modified;
                    db.SaveChanges();
                    SaveToDocLog(DvigId, Item.FItemID, "Отредактировали бом", QTY, 0, WorkId, SOUT);

                    go = PeremeshenieNaSklad(MaxNum, Dvig.StockId, Item.FItemID, QTY, false, "", true);//Минусуем на склад
                    SaveToDocLog(DvigId, Item.FItemID, " Списали со склада статус=  " + go.ToString(), QTY, 0, WorkId, SOUT);


                    QTYToWork = QTY;
                    go = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                    SaveToDocLog(DvigId, Item.FItemID, " Не смогли добавить строку " + ex.Message, QTY, 0, WorkId, SOUT);

                }
                SaveToWORKLog(SOUT, QTY, BOMEntry.FItemID, BOMEntry.t_Item.FNumber, Work.FBillNo, BOMEntry.FQty, BOMEntry.FQtyMust, BOMEntry.FQtyPick, BOMEntry.FStockQty, BOMEntry.FWIPQTY.Value, BOMEntry.FQtySupply);

                try
                {
                    CreateNewQRCode(Dvig.StartFBillNo, Dvig.ItemID, 0, QTY, SOUT, Dvig.PurchasePrice, Dvig.PostavshikId, Dvig.Postavshik, Dvig.StockId, Dvig.Id, Dvig.Id, Dvig.Mnimoe, Dvig.Otmena, Work.FInterID, 0, Work.FMTONo);
                }
                catch (Exception ex)
                {
                    SaveToDocLog(DvigId, Item.FItemID, " Ошибка в создании движения " + ex.Message, QTY, 0, WorkId, SOUT);
                }
            }
            
            if (go)
            {
              

                NZPNEW nzp = new NZPNEW();
                if (nzp == null || nzp.Id == 0)
                {
                    //Всегда создаем новую запись NZP т.к. она может идти с разных движений
                    nzp.Active = true;
                    nzp.DepartmentId = Work.FWorkShop.Value;
                    nzp.DatePostupleniya = DateTime.Now.Date;
                    nzp.FromDvigenieNEWId = Dvig.Id;
                    nzp.WorkId = Work.FInterID;
                    nzp.SOUTId = 0;
                    nzp.ItemId = Dvig.ItemID;
                    nzp.QRString = Dvig.QRString;
                    nzp.QTYFact = QTY;
                    if (go)
                    {
                        nzp.QTYFromStock = QTY;//количсетво взятое со склада
                    }
                    else
                    {
                        nzp.QTYFromStock = 0;
                    }
                    nzp.QTYMust = QTY;
                    nzp.QTYToWork = QTYToWork; //количество перемещенное на WORK
                    nzp.Stornirovano = false;
                    nzp.FromStockId = Dvig.StockId;
                    try
                    {
                        db.NZPNEW.Add(nzp);
                        db.SaveChanges();
                    }
                    catch (Exception e)
                    {
                        SaveToDocLog(DvigId, Item.FItemID, " Не смогли сохранить НЗПnew " + e.Message, QTY, 0, WorkId, SOUT);
                    }

                }

            }

          




            //Меняем остатки в заказе поставщику
            try
            {

                //   db.Entry(Item).State = EntityState.Modified;
                //    db.SaveChanges();
                ViewBag.Message = "Ok";
            }
            catch (Exception E)
            {
                SaveToDocLog(DvigId, Item.FItemID, " Ошибка " + E.Message, QTY, 0, WorkId, SOUT);
                ViewBag.Message = "Ошибка = " + E.Message;
            }


            //   return DvigId;
            //Возвращаем ID документа SOUT
            SaveToDocLog(DvigId, Item.FItemID, " Финал передаем Json " + MaxNum + ";" + PrintQR.ToString() + ";" + QRID + ";" + DvigId, QTY, 0, WorkId, SOUT);
            return "Ok";
        }


        public void AddToNZPBezDvigenii(int WorkId, decimal QTY, int ItemId, int StockId)
        {
            UsersKDW U = FindCurrentKDWUser();
            ICMO Work = new ICMO();
            try
            {
               Work = db.ICMO.Where(x => x.FInterID == WorkId).First();
            }
            catch
            {

            }

            PPBOMEntry BE = db.PPBOMEntry.Where(x => x.FItemID == ItemId && x.FICMOInterID == WorkId).First();
            int MaxNum = FindMaxNumStockBill();
            var MaxNumTable = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();
            //Плюсуем макс номер
            MaxNum++;

            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 24).First();

            string SOUT = "SOUT" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);




            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum;
            StockBill.FDate = DateTime.Now.Date;
            StockBill.FTranType = 24;
            StockBill.FBillNo = SOUT;
            StockBill.FDeptID = Work.FWorkShop.Value; //Перемещать на подразделение!!! 270 есть в таблице
            StockBill.FEmpID = null;
            StockBill.FSupplyID = null;
            StockBill.FCheckerID = U.UserID;
            StockBill.FManagerID = U.MOLId;
            StockBill.FSManagerID = U.MOLId;
            StockBill.FBillerID = U.UserID;
            StockBill.FFManagerID = U.MOLId; //Принимающий

            StockBill.FHookInterID = 0;//Неизвестно что за хук
            StockBill.FVchInterID = 0;//При перемещении есть записи с указанным ID например 229
            StockBill.FPosted = 1;
            StockBill.FCheckSelect = 0;
            StockBill.FROB = 1;
            StockBill.FStatus = 1;
            StockBill.FUpStockWhenSave = false;
            StockBill.FCancellation = false;
            StockBill.FOrgBillInterID = 0;
            StockBill.FBillTypeID = 0;
            StockBill.FPOStyle = null;
            StockBill.FBackFlushed = false;
            StockBill.FPurposeID = 12000;
            StockBill.FUUID = Guid.NewGuid();
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
            StockBill.FMarketingStyle = 12530;
            StockBill.FRefType = 0;
            StockBill.FCheckDate = DateTime.Now.Date;
            StockBill.FExplanation = "WEB " + U.Name;
            StockBill.FSelTranType = 85;// также может быть 85, 0, 1012510
            StockBill.FChildren = 0;
            StockBill.FHookStatus = 0;
            StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;
            StockBill.FsourceType = 37521;
            StockBill.FPayCondition = 0;
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
            StockBill.FNote = FindModelByItem(ItemId);
            StockBill.FPOMode = 0;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";
            StockBill.FHeadSelfA0143 = "KingDeeWeb";
            StockBill.FAcctID = 0;
            StockBill.FVchInterID = 0;//В SOUT здесь должен быть 0 Выявлено 03.03.2023
            StockBill.FHeadSelfB0435 = Work.FNote;//Тянем производимый объект из ворка

            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum;

                MaxNumTable.FMaxNum = MaxNum;
                db.Entry(MaxNumTable).State = EntityState.Modified;
                db.SaveChanges();
                SaveToDocLog(0, ItemId, "Создали документ SOUT ", QTY, 0, WorkId, SOUT);

                MaxStockID.FCurNo++;
                MaxStockID.FDesc = "SOUT+" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();

                bool BC = BillCodeDvig(24, MaxStockID.FCurNo.Value);
                SaveToDocLog(0, ItemId, "Сдвинут счетчик SOUT статус=" + BC.ToString(), QTY, 0, WorkId, SOUT);

                go = true;
            }
            catch (Exception e)
            {

            }



            decimal QTYToWork = 0;
   
            if (go)//если добавлена шапка то добавляем строки
            {


      
                go = false;
                try
                {
                    Entry.FBrNo = "0";

                    Entry.FItemID = ItemId;
                    Entry.FQtyMust = QTY;
                    Entry.FAuxQtyMust = QTY;
                    Entry.FQty = QTY;
                    Entry.FPrice = 0;

                    Entry.FBatchNo = "";
                    decimal Q = Convert.ToDecimal(QTY);
                    decimal C = Convert.ToDecimal(Entry.FPrice);
                    Entry.FAmount = Q * C;
                    Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                    Entry.FNote = FindModelByItem(ItemId);
                    Entry.FUnitID = 259;//Это единица измерения
                    Entry.FAuxPrice = Entry.FPrice;
                    Entry.FPurchasePrice = Entry.FPurchasePrice; // Закупочная цена с налогом из заказа поставщику
                    Entry.FPurchaseAmount = Q * Entry.FPurchasePrice;
                    Entry.FAuxQty = QTY;
                    Entry.FPriceRef = Entry.FPrice;
                    Entry.FAuxPriceRef = Entry.FAuxPrice;
                    Entry.FAmtRef = Q * C;
                    Entry.FSourceBillNo = Work.FBillNo;
                    Entry.FICMOBillNo = Work.FBillNo;
                    Entry.FICMOInterID = Work.FInterID;
                    Entry.FPPBomEntryID = BE.FEntryID; //TODO ПЕРЕДЕЛАТЬ
                    Entry.FSourceTranType = 85;
                    Entry.FSCStockID = StockId;//откуда
                    Entry.FDCStockID = 0;//куда
                    Entry.FSourceInterId = Work.FInterID;
                    Entry.FCostOBJID = Work.FCostObjID;// Тянем ID производимого объекта
                    Entry.FPlanPrice = FindPlanPrice(ItemId);
                    decimal P = Convert.ToDecimal(Entry.FPlanPrice);
                    Entry.FAuxPlanPrice = Entry.FPlanPrice;
                    Entry.FPlanAmount = Q * P;
                    Entry.FSourceEntryID = 1;//Видимо ссылка на бом номер строки в боме?
                    Entry.FOrderBillNo = "";
                    Entry.FOrderInterID = 0;
                    Entry.FOrderEntryID = 0;
                    Entry.FMapNumber = "SuperKomplektovka движений нет";//Сюда сохраняем QR Id
                    Entry.FReProduceType = 1059;
                    Entry.FPlanMode = 14036;
                    Entry.FEntrySelfB0457 = "";// Наименование поставщика
                    Entry.FEntrySelfB0458 = ""; //Наименование склада
                   
                  
                        Entry.FMTONo = "";
                    

                    Entry.FContractBillNo = "";


                    Entry.FItemSize = "";
                    Entry.FItemSuite = "";
                    Entry.FPositionNo = "";
                    Entry.FSEOutBillNo = "";
                    Entry.FConfirmMemEntry = "";
                    Entry.FItemStatementBillNO = "";
                    Entry.FReturnNoticeBillNO = "";
                    Entry.FSplitState = "";


                    SaveToDocLog(0, ItemId, "Бом до редактирования: FQTY=" + BE.FQty + " FStockQTY=" + BE.FStockQty + " FWIPQTY=" + BE.FWIPQTY, QTY, 0, WorkId, SOUT);


                    BE.FQty += QTY;
                    BE.FAuxQty += QTY;
                    BE.FStockQty += QTY; // 24.05.2023 чтобы документы проводились удачно а то ссылаются на заглючившие значения здесь
                    BE.FAuxStockQty += QTY;
                    BE.FWIPAuxQTY += QTY;
                    BE.FWIPQTY += QTY;



                }
                catch (Exception e)
                {
                    SaveToDocLog(0, ItemId, " Ошибка Не смогли сохранить строку SOUT " + e.Message, QTY, 0, WorkId, SOUT);
                 
                }

                try
                {
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();
                    SaveToDocLog(0, ItemId, "Создали строку в документе SOUT. N" + Entry.FInterID + "E" + Entry.FEntryID, QTY, 0, WorkId, SOUT);
                    db.Entry(BE).State = EntityState.Modified;
                    db.SaveChanges();
                    SaveToDocLog(0, ItemId, "Отредактировали бом. Показатели после редактирования: FQTY="+BE.FQty+" FStockQTY="+BE.FStockQty+" FWIPQTY="+ BE.FWIPQTY, QTY, 0, WorkId, SOUT);
                    QTYToWork = QTY;


                    go = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                    SaveToDocLog(0, ItemId, " Не смогли добавить строку " + ex.Message, QTY, 0, WorkId, SOUT);

                }
              
            }

            
                go = PeremeshenieNaSklad(MaxNum,StockId, ItemId, QTY, false, "", true);//Минусуем на склад

            //Меняем остатки в заказе поставщику
            try
            {

                ViewBag.Message = "Ok";
            }
            catch (Exception E)
            {
                SaveToDocLog(0, ItemId, " Ошибка " + E.Message, QTY, 0, WorkId, SOUT);
                ViewBag.Message = "Ошибка = " + E.Message;
            }

        
    }

        public JsonResult AddSuperNZP(decimal QTYFact, int WorkId, int ItemId, int StockId)
        {
            string Result = "";

            UsersKDW U = CurrentKDWUserModel();
            int ManagerId = U.MOLId;// FindUserID(FindCurrentUser());
            int DepartmentId = 0;


            NZPNEW nzp = new NZPNEW();//FindNZPNEW(Dvig.Id,WorkId);

            string Data = "";

            AddToNZPBezDvigenii(WorkId, QTYFact, ItemId,StockId);

         

            return Json("");
        }

        public JsonResult AddNZPNEW(decimal QTYFact,string WorkNumber)
        {
            string Result = "";

            UsersKDW U = CurrentKDWUserModel();
            int ManagerId = U.MOLId;// FindUserID(FindCurrentUser());
            int DepartmentId = 0;
            DvigenieNEW Dvig = FindCurrentDvigenieNEW();
            ItemView DvigOld = FindCurrentDvigenie();
      //   if (Dvig.Id==0)
       //     {
        //        Dvig = QRtoNEWQR(DvigOld.LastDvig.QRTable.QRstring);
         //   }
     

                ProverkaOTK OTK = new ProverkaOTK();
            
            OTK = FindProverkaOTK(Dvig.QRString);

            if (OTK.Status ==0||OTK.StatusOTK.Colour.Equals("danger")==true)
            {
                return Json(Resources.Resource.ErrorOTKNeProiden);
            }

            ICMO W = new ICMO();
            try
            {
               W = db.ICMO.Where(x => x.FBillNo.Equals(WorkNumber)).First();
            }
            catch
            {

            }


            NZPNEW nzp =  new NZPNEW();//FindNZPNEW(Dvig.Id,WorkId);

            //WorkView W = FindWork(WorkNumber);
            List<BomEntry> BE = FindBOMSFromWork(W.FInterID,Dvig.ItemID, true,true,"Перемещение в НЗП одним кодом");

            
            if (BE.Count>0)
            {
                BomEntry be = new BomEntry();
                try
                {
                    be = BE.Where(x => x.Item.FItemID == Dvig.ItemID).First();
                }
                catch
                {

                }
                if (be.QTYNEED + 0.5m < QTYFact )
                {
                    return Json(Resources.Resource.ErrorMnogo+ be.QTYNEED);
                }
            }
            else
            {
                return Json(Resources.Resource.ErrorNeTrebuetsa);
            }

          
            if (QTYFact>Dvig.QTYFact)
            {
                return Json(Resources.Resource.ErrorNetVQR);
            }

            if (Session["KomplektovkaDepartmentId"] != null)
            {
                DepartmentId = (int)Session["KomplektovkaDepartmentId"];
            }

          
         
 

            //  OstalosQty = NeedQty - SumQty;
            string Data = "";
            //  if (OstalosQty>0)
            // {


            Data = SOUTNEW(Dvig.Id, W.FInterID, ManagerId, QTYFact);

        if (Data.Equals("Ok"))
            {
                Result = "True;";
            }
        else
            {
                Result = "False;"+Data;
            }

            return Json(Result);
        }

        public JsonResult AddNZP(string QRData, decimal QTYFact)
        {
            string Result = "";
            ItemView I = new ItemView();
            decimal SumQty = 0;
            decimal NeedQty = 0;
            decimal OstalosQty = 0;
            bool Naideno = false;
            UsersKDW U = CurrentKDWUserModel();
            int ManagerId = U.MOLId;// FindUserID(FindCurrentUser());
            int UserId = U.UserID; //FindUserID(FindCurrentUser());

            KomplektovkaView KW = LoadKomplektovka();


            NZP nzp = new NZP();
            try
            {
                I = QRTrace(QRData);
            }
            catch
            {

            }
            /*  try
              {
                  // ищем есть ли такой же нзп
                  nzp = KW.NZPs.Where(x => x.DvigenieId == I.LastDvig.Id).First();
                  Naideno = true;
              }
              catch (Exception e)
              {

              }
            */
            if (nzp == null || nzp.Id == 0)
            {
                //Если такого нзп не найдено
                nzp.Active = true;
                nzp.DepartmentId = KW.DepartmentId;
                nzp.DatePostupleniya = DateTime.Now.Date;
                nzp.StarWorkId = KW.StarWorkId;
                nzp.WorkId = KW.WorkId;
                nzp.SOUTId = null;

            }

            /*
            if (Session["KOMPLEKTOVKA"]!=null)
            {
                nzp = (NZP)Session["KOMPLEKTOVKA"];
            }
       */
            nzp.StockId = I.LastDvig.StockId;
            nzp.POOrderId = I.LastDvig.POOrderId;
            nzp.ItemId = I.Item.FItemID;
            nzp.DvigenieId = I.LastDvig.Id;

            //Ищем уже полученное кол-во по итемам
            try
            {
                SumQty = KW.BOMs.Where(x => x.FICMOInterID == nzp.WorkId && x.FItemID == nzp.ItemId).Select(x => x.FWIPQTY.Value).First();//KW.NZPs.Where(x => x.WorkId == nzp.WorkId && x.ItemId == nzp.ItemId).Sum(x => x.QTY);// db.NZP.Where(x => x.WorkId == nzp.WorkId && x.ItemId == nzp.ItemId).Sum(x => x.QTY);
            }
            catch
            {

            }
            try
            {
                ICMO W = db.ICMO.Where(x => x.FInterID == nzp.WorkId).First();
                PPBOMEntry BOME = db.PPBOMEntry.Where(x => x.FICMOInterID == nzp.WorkId && x.FItemID == nzp.ItemId).First();
                NeedQty = BOME.FQtyMust - BOME.FWIPQTY.Value - (BOME.FQtyScrap * W.FCommitQty) + 0.1m; // Считаем Сколько нужно по бому минус сколько есть в НЗП - Сколько произведено по ворку * расход


                if (NeedQty <= 0)
                {
                    return Json("Данной номенклатуры не нужно.");
                }
                if (NeedQty < QTYFact)
                {
                    return Json("Данной номенклатуры не нужно. Максимум можно переместить " + NeedQty);
                }
                // NeedQty = //db.PPBOMEntry.Where(x => x.FICMOInterID == nzp.WorkId && x.FItemID == nzp.ItemId).Select(x => x.FAuxQtyMust).First();
                /*   if (NeedQty>QTYFact)
                       {
                           NeedQty = QTYFact+SumQty;

                       }

                   
                */
            }
            catch
            {

            }

            //  OstalosQty = NeedQty - SumQty;
            string Data = "";
            //  if (OstalosQty>0)
            // {
            decimal OstatokVDvigenii = 0;

            if (I.LastDvig.QTYFact >= QTYFact)
            {
                nzp.QTY += QTYFact;



                Data = SOUTfromQR(I.LastDvig.Id, KW.WorkId, ManagerId, UserId, KW.DepartmentId, QTYFact, 0);
                string[] S = Data.Split(';');
                nzp.SOUTId = Convert.ToInt32(S[0]);
                if (S[1].Equals("True"))
                {
                    Result = "True;" + S[2];

                }
                else
                {
                    Result = "False;" + S[2];
                }
                nzp.DvigenieId = Convert.ToInt32(S[3]);
                OstatokVDvigenii = I.LastDvig.QTYFact - QTYFact;
                OstalosQty = 0;

            }
            else
            {
                return Json("В QR коде нет такого количества!");
            }
            /*
            else
            {
                if (I.LastDvig.QTYFact>0)
                {
                    nzp.QTY +=  I.LastDvig.QTYFact;
                    OstatokVDvigenii =  0;
                    OstalosQty -= I.LastDvig.QTYFact;
                   // nzp.SOUTId = 0;
                    Data = SOUTfromQR(I.LastDvig.Id, KW.WorkId, ManagerId, UserId, KW.DepartmentId, I.LastDvig.QTYFact, 0);
                    string[] S = Data.Split(';');
                    nzp.SOUTId = Convert.ToInt32(S[0]);
                    //MaxNum.FMaxNum.Value+";"+PrintQR.ToString()+";"+QRID+";"+DvigId;
                    if (S[1].Equals("True"))
                    {
                        Result = "True;" + S[2];

                    }
                    else
                    {
                        Result = "False;" + S[2];
                    }
                    nzp.DvigenieId = Convert.ToInt32(S[3]);
                }
                else
                {
                    return Json(Resources.Resource.NetNaSklade);
                }
            }
*/
            try
            {
                if (!Naideno)
                {
                    using (var db2 = new KingDeeDB())
                    {
                        try
                        {
                            db2.NZP.Add(nzp);
                            db2.SaveChanges();
                        }
                        catch (Exception e)
                        {

                        }
                    }
                }
                else
                {
                    using (var db2 = new KingDeeDB())
                    {
                        try
                        {
                            db2.Entry(nzp).State = EntityState.Modified;
                            db2.SaveChanges();
                        }
                        catch
                        {

                        }
                    }
                }

                // EditDvigenie(I.LastDvig, OstatokVDvigenii);
                Result += ";" + nzp.QTY.ToString();
                KW.ObnovitNZP();//Обновляем список НЗП после добавления

            }
            catch (Exception e)
            {
                Result = e.Message;
            }


            //   }



            return Json(Result);
        }


        public ItemView QRTraceLight(string QRData)
        {
            ItemView I = new ItemView();
            string[] S = QRData.Split(';');
            if (S != null && S.Length > 0)
            {
                int POId = 1;
                int Lev = 1;
                string ZakazPostavshiku = "";
                string Nomenklatura = S[0];

                try
                {
                    POId = Convert.ToInt32(S[2]);
                    Lev = Convert.ToInt32(S[3]);
                    ZakazPostavshiku = S[1];
                }
                catch
                {

                }
                ZakazPostavshiku Z = new ZakazPostavshiku();
                try
                {//Состав Item.FNumber, QTY, POOrderId
                    I.ZakazPostavshiku = ZakazPostavshiku;
                    I.Lev = Lev;
                    I.Item = db.t_Item.Where(x => x.FNumber.Equals(Nomenklatura)).First();

                }
                catch (Exception e)
                {

                }

            }
            else
            {

            }
            return I;
        }



        public ItemView QRTrace(string QRData)
        {
            ItemView I = new ItemView();
            string[] S = QRData.Split(';');
            if (S != null && S.Length > 0)
            {
                int POId = 1;
                int Lev = 1;
                string ZakazPostavshiku = "";
                string Nomenklatura = S[0];

                try
                {
                    POId = Convert.ToInt32(S[2]);
                    Lev = Convert.ToInt32(S[3]);
                    ZakazPostavshiku = S[1];
                }
                catch
                {

                }
                ZakazPostavshiku Z = new ZakazPostavshiku();
                try
                {//Состав Item.FNumber, QTY, POOrderId
                    I.ZakazPostavshiku = ZakazPostavshiku;
                    I.Lev = Lev;
                    I.Item = db.t_Item.Where(x => x.FNumber.Equals(Nomenklatura)).First();
                    string Tip = "POORD";
                    if (ZakazPostavshiku.Contains("WW"))
                    {
                        Tip = "WW";
                    }
                    Z.FindEntries(POId, Tip, 0, Nomenklatura);
                    I.Z = Z;
                    // I.POOrder = db.POOrder.Where(x => x.FInterID == POId).First();

                }
                catch (Exception e)
                {

                }

            }
            else
            {

            }
            // ViewBag.Stocks = SearchStorages();
            I.FindDvigenies();
            //  I.LastDvig = FindDvigenie(I.LastDvig.Id);

            return I;
        }


        public KomplektovkaView NewKomplektovkaLight(string QRData)
        {
            KomplektovkaView Komp = new KomplektovkaView();

            Komp.FindNZPLight(QRData);

            return Komp;
        }

        public KomplektovkaView NewKomplektovka(string QRData)
        {
            KomplektovkaView Komp = new KomplektovkaView();
            if (QRData != null && QRData != "")
            {
                Komp.FindNZP(QRData);


                Komp.FindStock();
                SavePlanogrammaStock(Komp.StockId);
                //Сохраняем в сессию
                Session["KOMPLEKTOVKA"] = Komp;
            }
            else
            {
                if (Session["KOMPLEKTOVKA"] != null)
                {
                    Komp = (KomplektovkaView)Session["KOMPLEKTOVKA"];
                    Komp.ObnovitNZP();
                }
            }
            foreach (var nzp in Komp.NZPs)
            {
                nzp.Item = PerevestiItem(nzp.Item);
            }
            foreach (var bom in Komp.BOMs)
            {
                bom.t_Item = PerevestiItem(bom.t_Item);
            }
            return Komp;
        }

        public ActionResult KomplektovkaTable(string QRData)
        {
            //  ViewBag.QR = "KOMPLEKTOVKA;" + I.FInterID + ";" + I.StarMehWorks.First().Id + ";" + I.t_Department.FItemID + ";" + I.StarMehWorks.First().PlanshetId + ";" + I.StarMehWorks.First().QTY;
            /*
              string[] S = QRData.Split(';');
              int WorkId = 0;
              int StarWorkId = 0;
              int DepartmentId = 0;
              int PlanshetId = 0;
              decimal QTY = 0;
              if (S[0].Equals("KOMPLEKTOVKA"))
              {

                  WorkId = Convert.ToInt32(S[1]);
                  StarWorkId = Convert.ToInt32(S[2]);
                  DepartmentId = Convert.ToInt32(S[3]);
                  PlanshetId = Convert.ToInt32(S[4]);
                  QTY = Convert.ToDecimal(S[5]);
              }
              else
              {

              }

              //Создаем новый НЗП
              NZP nzp = new NZP();
              nzp.Active = true;
              nzp.DatePostupleniya = DateTime.Now.Date;
              nzp.DepartmentId = DepartmentId;
              nzp.StarWorkId = StarWorkId;
              nzp.WorkId = WorkId;
            */

            if (QRData != null && QRData != "")
            {

                //Сохраняем в сессию
                Session["KOMPLEKTOVKAQR"] = QRData;

            }
            else
            {
                if (Session["KOMPLEKTOVKAQR"] != null)
                {
                    QRData = (string)Session["KOMPLEKTOVKAQR"];

                }
            }

            KomplektovkaView Komp = new KomplektovkaView();
            Komp = NewKomplektovka(QRData);


            //   List<PPBOMEntry> E = new List<PPBOMEntry>();
            /*    try
                {
                  E =  db.PPBOMEntry.Where(x => x.FICMOInterID == Komp.WorkId).Include(x=>x.t_Item).Include(x=>x.PPBOM).Include(x=>x.ICMO).ToList();
                }
                catch
                {

                }

                List<NZP> AllNZP = new List<NZP>();
                try
                {
                  AllNZP =  db.NZP.Where(x => x.Active == true && x.WorkId == Komp.WorkId).ToList();
                }
                catch
                {

                }

                foreach(var ent in E)
                {
                    ent.FAuxQtyConsume = AllNZP.Where(x => x.ItemId == ent.FItemID).Sum(x => x.QTY);

                }
            */

            ViewBag.Roles = FindCurrentRoles();
            return View(Komp);
        }



        public JsonResult SkipWorkJson(int Id)
        {
            DateTime D = DateTime.Now.Date;
            StarMehWorks W = new StarMehWorks();

            try
            {
                W = db.StarMehWorks.Where(x => x.Id == Id).First();
                int MaxPoryadok = 1;
                try
                {
                    MaxPoryadok = db.StarMehWorks.Where(x => x.PlanshetId == W.PlanshetId && x.DateStart == D).Max(x => x.Poryadok) + 1;
                }
                catch
                {

                }
                W.Poryadok = MaxPoryadok;
            }
            catch
            {

            }

            try
            {
                db.Entry(W).State = EntityState.Modified;
                db.SaveChanges();
            }
            catch (Exception e)
            {
                return Json(e.Message);
            }

            return Json("Ok");
        }

        public JsonResult AddToPlanshetJson(int WorkId, string WorkNumber, int PWId, int PlanshetId, decimal QTY, string WorkDate = "", string PlanDate = "")
        {
            DateTime D = DateTime.Now.Date;
            StarMehWorks W = new StarMehWorks();
            W.DateStart = D;
            W.DateEnd = D.AddDays(3);
            W.PlanshetId = PlanshetId;

            try
            {
                W.WorkDate = Convert.ToDateTime(WorkDate);
                W.DateStart = Convert.ToDateTime(WorkDate);
                D = Convert.ToDateTime(WorkDate);
            }
            catch
            {

            }

            try
            {
               PlanoviWorks P = db.PlanoviWorks.Where(x => x.Id == PWId).First();
               
            }
            catch
            {
                return Json("Error;" + Resources.Resource.WorkInPlan + "= false");
            }

            W.ComputerNames = new ComputerNames();
            try
            {
                W.ComputerNames = db.ComputerNames.Where(x => x.Id == PlanshetId).First();
            }
            catch
            {

            }
            W.WorkId = WorkId;

            W.WorkNumber = WorkNumber;
            int MaxPoryadok = 1;
            try
            {
                MaxPoryadok = db.StarMehWorks.Where(x => x.PlanshetId == PlanshetId && x.DateStart == D).Max(x => x.Poryadok) + 1;
            }
            catch
            {

            }
            int Count = 0;
            try
            {
              Count = db.StarMehWorks.Where(x => x.PlanoviWorkId == PWId && x.DateStart == D).Count();
            }
            catch
            {

            }

            if (Count>0)
            {
                return Json("Error;Работа уже назначена" );
            }

            W.Poryadok = MaxPoryadok;
            W.QTY = QTY;
            W.QTYFact = 0;
            W.Complete = false;
            W.Prichina = null;

            

            try
            {
                db.StarMehWorks.Add(W);
                db.SaveChanges();
            }
            catch (Exception e)
            {
                return Json(e.Message + ";");
            }

            return Json("Ok;" + W.ComputerNames.Name + ";" + W.Id + ";" + W.WorkNumber + ";" + W.QTY + ";" + W.WorkId + ";" + W.Poryadok + ";" + W.WorkDate+";"+PWId);
        }

        public ActionResult PlanogrammaPrint()
        {

            return View();
        }
        public ActionResult PlanogrammaView()
        {

            return View();
        }

        public void SavePlanogrammaSearch(string Item)
        {
            int ItemId = 0;
            if (Item.Contains("."))
            {
                try
                {
                    ItemId = db.t_Item.Where(x => x.FNumber.Equals(Item)).Select(x => x.FItemID).First();
                }
                catch
                {

                }
            }
            Session["PlanogrammaSearch"] = ItemId;
        }
        public int LoadPlanogrammaSearch()
        {
            int Result = 0;
            if (Session["PlanogrammaSearch"] != null)
            {
                Result = (int)Session["PlanogrammaSearch"];
            }
            else
            {

            }
            return Result;
        }

        public void SavePlanogrammaStock(int StockId)
        {
            Session["PlanogrammaStock"] = StockId;
        }

        public int LoadPlanogrammaStock()
        {
            int Result = 0;
            if (Session["PlanogrammaStock"] != null)
            {
                Result = (int)Session["PlanogrammaStock"];
            }
            else
            {

            }
            return Result;
        }

        public JsonResult ReloadPlanogramma(string Stock = "")
        {
            if (Stock == "")
            {
                LoadPlanogrammaStock();
            }
            else
            {
                int StockId = FindStockID(Stock);
                SavePlanogrammaStock(StockId);

            }
            return Json("Ok");
        }

        public ActionResult PlanogrammaPrintMenu()
        {
            int StockId = LoadPlanogrammaStock();
            SavePlanogrammaSearch("");

            List<Street> Streets = new List<Street>();
            try
            {
                Streets = db.Street.Where(x => x.StockId == StockId).ToList();
            }
            catch
            {

            }

            ViewBag.Streets = Streets;
            ViewBag.Stocks = SearchBuildings();

            return View();
        }
        public ActionResult PlanogrammaMenu()
        {
            int StockId = LoadPlanogrammaStock();
            SavePlanogrammaSearch("");

            List<Street> Streets = new List<Street>();
            try
            {
                Streets = db.Street.Where(x => x.StockId == StockId).ToList();
            }
            catch
            {

            }

            ViewBag.Streets = Streets;
            ViewBag.Stocks = SearchBuildings();

            return View();
        }

        public JsonResult SaveStreet(string Name, int Num)
        {
            int StockId = LoadPlanogrammaStock();
            Street S = new Street();
            try
            {
                S.Name = Name;
                S.Num = Num;
                S.StockId = StockId;
                db.Street.Add(S);

                db.SaveChanges();
                return Json("Ok");
            }
            catch (Exception e)
            {
                return Json(e.Message);
            }
        }

        public JsonResult SaveYacheika(int Id, int X, int Y, int W, int H, string Name, int Num, string C)
        {
            Planogramma P = new Planogramma();
            try
            {
                P = db.Planogramma.Where(x => x.Id == Id).First();
                P.X = X;
                P.Y = Y;
                P.W = W;
                P.H = H;
                P.Name = Name;
                P.Num = Num;
                P.C = C;
                db.Entry(P).State = EntityState.Modified;
                db.SaveChanges();
                return Json("Ok");
            }
            catch (Exception e)
            {
                return Json(e.Message);
            }
        }

        public JsonResult AddStend(int Number, string Name, int StreetId)
        {
            int StockId = LoadPlanogrammaStock();
            Planogramma P = new Planogramma();
            P.Num = Number;
            P.Name = Name;

            P.X = 0;
            P.Y = 0;
            P.H = 100;
            P.W = 100;
            P.StockId = StockId;
            P.StreetId = StreetId;
            P.C = "btn-default";

            try
            {
                int Z = db.Planogramma.Where(x => x.X == 0 && x.Y == 0 && x.StockId == StockId).Count();
                if (Z == 0)
                {
                    db.Planogramma.Add(P);
                    db.SaveChanges();
                    return Json("Успешно добавлена новая ячейка.");
                }
                else return Json("Пустая ячейка уже создана. Сначала разберитесь с ней.");
            }
            catch (Exception e)
            {
                return Json(e.Message);
            }

        }

        public JsonResult FindWhereItemPlace()
        {
            List<string> Places = new List<string>();
            int SearchId = LoadPlanogrammaSearch();
            Dictionary<string, int> Stocks = new Dictionary<string, int>();
            List<NomenklaturaPlace> NP = new List<NomenklaturaPlace>();
            try
            {
                //  Places = db.NomenklaturaPlace.Include(x => x.Stock).Where(x => x.ItemId == SearchId ).Select(x => x.Stock.FName).Distinct().ToList();
                NP = db.NomenklaturaPlace.Include(x => x.Buildings).Include(x => x.Dvigenie).Where(x => x.ItemId == SearchId && x.Dvigenie.QTYFact > 0).Distinct().ToList();
                foreach (var n in NP)
                {
                    if (CultureRU())
                    {
                        n.Buildings.NameZH = n.Buildings.NameRU;
                    }
                    try
                    {

                        Stocks.Add(n.Buildings.NameZH, n.StockId);

                    }
                    catch
                    {

                    }
                }

            }
            catch (Exception e)
            {

            }
            //return Json(Places);
            return Json(Stocks);
        }

        [Culture]
        public ActionResult PlanogrammaPrintTable(int BuildingId)
        {
            //  int StockId = LoadPlanogrammaStock();
            List<Planogramma> P = new List<Planogramma>();
            try
            {
                P = db.Planogramma.Where(x => x.StockId == BuildingId).Include(x => x.Street).Include(x => x.Yacheika).ToList();
            }
            catch
            {

            }
            string StockName = "";
            try
            {

                if (CultureRU())
                {
                    StockName = db.Buildings.Where(x => x.Id == BuildingId).First().NameRU;
                }
                else
                {
                    StockName = db.Buildings.Where(x => x.Id == BuildingId).First().NameZH;
                }
            }
            catch
            {

            }

            List<Street> Streets = new List<Street>();
            try
            {
                Streets = db.Street.Where(x => x.StockId == BuildingId).ToList();
            }
            catch
            {

            }

            ViewBag.Stock = StockName;
            ViewBag.Streets = Streets;
            return View(P);
        }

        public ActionResult PlanogrammaTable()
        {


            int StockId = LoadPlanogrammaStock();

            int SearchId = LoadPlanogrammaSearch();
            t_Item Item = new t_Item();
            try
            {
                if (SearchId > 0)
                {
                    Item = db.t_Item.Where(x => x.FItemID == SearchId).First();
                    ViewBag.Item = Item;
                }
            }
            catch
            {

            }

            List<Dvigenie> Dvigenies = new List<Dvigenie>();
            List<int> Stellags = new List<int>();
            List<decimal> QTYs = new List<decimal>();

            if (SearchId != 0)
            {
                try
                {
                    Dvigenies = db.Dvigenie.Where(x => SearchId == x.ItemID && x.QTYFact > 0).Include(x => x.NomenklaturaPlace).Include(x => x.Item).ToList();

                    foreach (var d in Dvigenies)
                    {
                        foreach (var n in d.NomenklaturaPlace)
                        {
                            Stellags.Add(n.StellagId);
                            QTYs.Add(d.QTY);
                        }
                    }
                }
                catch (Exception e)
                {

                }
            }
            ViewBag.Stellags = Stellags;
            ViewBag.Dvigenies = Dvigenies;
            ViewBag.QTYs = QTYs;
            ViewBag.Roles = FindCurrentRoles();
            List<Planogramma> P = new List<Planogramma>();
            try
            {
                P = db.Planogramma.Where(x => x.StockId == StockId).Include(x => x.Street).Include(x => x.Yacheika).ToList();
            }
            catch
            {

            }
            string StockName = "";
            try
            {

                if (CultureRU())
                {
                    StockName = db.Buildings.Where(x => x.Id == StockId).First().NameRU;
                }
                else
                {
                    StockName = db.Buildings.Where(x => x.Id == StockId).First().NameZH;
                }
            }
            catch
            {

            }

            List<Street> Streets = new List<Street>();
            try
            {
                Streets = db.Street.Where(x => x.StockId == StockId).ToList();
            }
            catch
            {

            }

            ViewBag.Stock = StockName;
            ViewBag.Streets = Streets;
            return View(P);
        }
        public JsonResult RemoveFromPlanshetJson(int WorkId,  int PWId)
        {
            DateTime D = DateTime.Now.Date;
            StarMehWorks W = new StarMehWorks();
            string WorkNumber = "";
            string WorkDate = "";
            int WID = 0;
            decimal QTY = 0;
            try
            {
                W = db.StarMehWorks.Where(x => x.Id == WorkId).First();
                if (W.QTYFact > 0)
                {
                    return Json(Resources.Resource.NelzaUdalitWork);
                }
                WorkNumber = W.WorkNumber;
                WID = W.WorkId;
                QTY = W.QTY;
             //   WorkDate = "";
           //     if (W.WorkDate != null)
           //     {
            //        WorkDate = W.WorkDate.Value.ToString();
            //    }
                db.StarMehWorks.Remove(W);
                db.SaveChanges();
            }
            catch (Exception e)
            {
                return Json(e.Message);
            }

            return Json("Ok;" + WID + ";" + WorkNumber + ";"+PWId + ";" + QTY);
        }






        public decimal FindMaxVipusk(int WorkId, int StarWorkId=0)
        {
            decimal Result = 0;
            ICMO IC = new ICMO();
            // db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Where(x => x.FPlanCommitDate >= Date && x.FCommitQty != x.FQty && x.FStatus == 1).Include(x => x.t_Item.NomenklaturaEnterprise).ToList(); .Include(x => x.NZP)
            DateTime D = DateTime.Now.Date;
            StarMehWorks SW = new StarMehWorks();
            decimal startMax = 0;

            try
            {
                IC = db.ICMO.Where(x => x.FInterID == WorkId).First();
                startMax = IC.FQty - IC.FCommitQty;
            }
            catch
            {
                return 0;
            }
         /*   if (StarWorkId == 0)
            {
                try
                {
                    SW = db.StarMehWorks.Where(x => x.WorkId == WorkId && D.Date == x.DateStart).First();
                    if (SW.QTY - SW.QTYFact < startMax)
                    {
                        startMax = SW.QTY - SW.QTYFact;
                    }
                }
                catch
                {

                }
            }
            else
            {
                SW = db.StarMehWorks.Where(x => x.Id == StarWorkId).First();
                if (SW.QTY - SW.QTYFact < startMax)
                {
                    startMax = SW.QTY - SW.QTYFact;
                }
            }
         */


            List<PPBOMEntry> BOMs = db.PPBOMEntry.Where(x => x.FICMOInterID == WorkId).ToList();
            IC.PPBOMEntry = BOMs;
            decimal MaxVipusk = startMax; //IC.FAuxQty - IC.FAuxCommitQty;
            foreach (var b in BOMs)
            {
                if (b.FQtyScrap<=0)
                {
                    continue;
                }
                // decimal QTYNZP = IC.NZP.Where(x => x.ItemId == b.FItemID && x.Active == true).Sum(x => x.QTY);
                decimal QTYNZP = b.FWIPQTY.Value;
                decimal QTYScrap = b.FQtyScrap;
                decimal MaxByScrap = 1;
                try
                {
                    MaxByScrap = Math.Round(QTYNZP / QTYScrap, 3);
                }
                catch
                {

                }
                if (MaxByScrap < MaxVipusk)
                {
                    MaxVipusk = MaxByScrap;
                }
            }
            Result =Math.Round(MaxVipusk,2);
            if (Result < 0)
            {
                Result = 0;
            }
            return Result;
        }

        public string GenerateKomplektovkaString(int WorkId, int StarWorkId, int DepartmentId, int PlanshetId, decimal QTY)
        {
            string QR = "KOMPLEKTOVKA;" + WorkId + ";" + StarWorkId + ";" + DepartmentId + ";" + PlanshetId + ";" + QTY;

            return QR;
        }

        public KomplektovkaView FindKomplektovka(string QRData)
        {
            KomplektovkaView K = new KomplektovkaView();
            K.FindNZP(QRData);
            return (K);
        }

        public KomplektovkaView FindKomplektovka(int WorkID)
        {
            KomplektovkaView K = new KomplektovkaView();
            K.FindNZP(WorkID);
            return (K);
        }

        [Culture]
        public ActionResult MinusNaSkladah(int StockId=0)
        {
            List<ICInventory> Inv = new List<ICInventory>();
            List<int> Nomenklaturs = new List<int>();
            Dictionary<string, decimal> Dic = new Dictionary<string,decimal>();
            ViewBag.Stock = "";
            if (StockId > 0)
            {
                try
                {
                    Nomenklaturs = db.ICInventory.Where(x => x.FQty < 0 && x.FStockID == StockId).Select(x => x.FItemID).Distinct().ToList();
                    Inv = db.ICInventory.Where(x => x.FStockID == StockId && Nomenklaturs.Contains(x.FItemID)).ToList();//.Select(x => new { FQTY = x.FQty, FItemId = x.FItemID }).T;

                    foreach (var a in Nomenklaturs)
                    {

                        try
                        {
                            string Name = db.t_Item.Where(x => x.FItemID == a).Select(x => x.FNumber).First();
                            Dic.Add(Name, Inv.Where(x => x.FItemID == a).Sum(x => x.FQty));
                        }
                        catch
                        {

                        }
                    }

                }
                catch
                {

                }
              
                try
                {
                    ViewBag.Stock = db.t_Item.Where(x => x.FItemID == StockId).Select(x=>x.FName).First();
                }
                catch
                {

                }
            }
            ViewBag.Stocks = SearchStorages();


            return View(Dic);
        }


       public JsonResult ShlopnutStrokiNaSklade(int StockId)
        {
            string Result = "Ok";
            if (StockId == 0) { return Json("Error"); }
            List<ICInventory> Inv = new List<ICInventory>();
            List<int> Nomenklaturs = new List<int>();
            Dictionary<string, decimal> Dic = new Dictionary<string, decimal>();
        
            if (StockId > 0)
            {
                try
                {
                    Nomenklaturs = db.ICInventory.Where(x => x.FQty < 0 && x.FStockID == StockId).Select(x => x.FItemID).Distinct().ToList();
                    Inv = db.ICInventory.Where(x => x.FStockID == StockId && Nomenklaturs.Contains(x.FItemID)).ToList();//.Select(x => new { FQTY = x.FQty, FItemId = x.FItemID }).T;

                    foreach (var a in Nomenklaturs)
                    {
                       
                       Result = ShlopnutStroki(a, StockId).ToString();
                      /*  try
                        {
                        List<ICInventory> I = Inv.Where(x => x.FItemID == a).ToList();
                            ICInventory FIRST = I.First();
                            I.Remove(FIRST);
                            foreach (var y in I )
                            {
                                FIRST.FQty += y.FQty;
                                FIRST.FMTONo = "";
                                db.Entry(y).State = EntityState.Deleted;
                            }

                            try
                            {
                                db.Entry(FIRST).State = EntityState.Modified;
                                db.SaveChanges();
                    
                            }
                            catch (Exception e)
                            {
                                return Json("Error");
                            }

                        }
                        catch
                        {

                        }
                      */
                    }
                }
                catch
                {

                }
                
                }
                    return Json(Result);
        }

        [Culture]
        public ActionResult PlanshetKomplektNEW()
        {
            List<PPBOMEntry> WW = new List<PPBOMEntry>();
            ICMO Work = new ICMO();
            StarMehWorks StarWork = new StarMehWorks();

            //   iCMO = db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Where(x => x.FPlanCommitDate >= Date && x.FCommitQty != x.FQty && x.FStatus == 1).Include(x => x.t_Item.NomenklaturaEnterprise).ToList();
            int PlanshetId = 1;
            PlanshetId = FindPlanshetId();
            if (PlanshetId == 0)
            {
                return RedirectToAction("Login", "Home");
            }
            try
            {
                ViewBag.Planshet = db.ComputerNames.Where(x => x.Id == PlanshetId).First();
            }
            catch
            {

            }
            List<StarMehWorks> SW = new List<StarMehWorks>();

            ViewBag.PlanshetId = PlanshetId;//WW
            int WorkId = 0;
            int WorkShopId = 0;
            var Stocks = SearchStorages();
            List<string> Managers = SearchMOL();// SearchMOLByStock(Stocks[0]);//
            DateTime D = DateTime.Now.Date;
            List<NZPNEW> NZPNEW = new List<NZPNEW>();
            List<NZP> NZP = new List<NZP>();
            int UserId = CurrentKDWUserModel().Id;
            if (UserId == 0) //Если не залогинен то выкидываем в форму
            {
                return RedirectToAction("Login", "Home");
            }
            ViewBag.WorksCount = 0;
            ViewBag.StarWork = null;
            List<string> Vipusheno = new List<string>();
            try // Пробуем найти назначенные старшим мастером работы
            {

                SW = db.StarMehWorks.Where(x => x.DateStart == D && x.Complete == false && x.PlanshetId == PlanshetId).OrderBy(x => x.Poryadok).ToList();

                StarWork = SW.First();
                WorkId = SW.First().WorkId;
                ViewBag.StarWork = StarWork;
                ViewBag.WorksCount = SW.Count;
            }
            catch
            {

            }

            try
            {
                Work = db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Where(x => x.FInterID == WorkId).First();// db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Where(x => x.FPlanCommitDate >= Date && x.FCommitQty != x.FQty && x.FStatus == 1).Include(x => x.t_Item.NomenklaturaEnterprise).ToList();
                WorkShopId = Work.FWorkShop.Value;
                ViewBag.Work = Work;
            }
            catch
            {

            }

            //Ищем подразделения для выпуска
            List<DepartmentToStocks> DS = new List<DepartmentToStocks>();
            try
            {
                DS = db.DepartmentToStocks.Where(x => x.PlanshetId == PlanshetId && x.DepartmentId == WorkShopId).Include(x => x.Stock).Include(x => x.MOL).ToList();
            }
            catch
            {

            }

            List<DvigenieNEW> CINS = new List<DvigenieNEW>();
            try
            {
                Vipusheno.AddRange(db.Dvigenie.Where(x => x.Date.Value.Year == D.Year && x.Date.Value.Month == D.Month && x.Date.Value.Day == D.Day && x.FBillNo.Contains("CIN") && x.Work.Equals(Work.FBillNo)).Select(x => x.FBillNo + " " + x.QTYFact).ToList());
            }
            catch
            {

            }
            try
            {
                CINS = db.DvigenieNEW.Where(x => x.Date.Value.Year == D.Year && x.Date.Value.Month == D.Month && x.Date.Value.Day == D.Day && x.CurrentFBillNo.Contains("CIN") && x.WorkId == Work.FInterID).ToList();
                Vipusheno.AddRange(CINS.Select(x => x.CurrentFBillNo + " " + x.QTYFact).ToList());
            }
            catch
            {

            }

            ViewBag.Vipusheno = Vipusheno;
            ViewBag.CINS = CINS;
            if (DS.Count > 0)
            {
                Dictionary<int, string> S = new Dictionary<int, string>();
                foreach (DepartmentToStocks ds in DS)
                {
                    try
                    {
                        S.Add(ds.StockId, ds.Stock.FName);
                        if (Managers.Contains(ds.MOL.FName) == false)
                        {
                            Managers.Add(ds.MOL.FName);
                        }
                    }
                    catch
                    {

                    }

                }
                if (S.Count > 0)
                {
                    ViewBag.Stocks = S;
                }
                //  Stocks = DS.Where(x=>x.StockId.conta Stocks.Where(x=>x.Key == )
            }
            else
            {
                ViewBag.Stocks = Stocks;
            }

            NZPNEW = FindWorksNZPNEW(WorkId);
            NZP = FindWORKNZP(WorkId);
            decimal MaxVipusk = 0;
            string OgranichenieVipuska = "";
            ViewBag.NZP = NZP;
            ViewBag.NZPNEW = NZPNEW;

            //Загружаем данные из работы старшего мастера
            try
            {
                List<PPBOMEntry> BOM = new List<PPBOMEntry>();
                BOM = db.PPBOMEntry.Where(x => x.FICMOInterID == WorkId).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).ToList();
                MaxVipusk = Math.Round(Work.FQty - Work.FCommitQty, 0);
                OgranichenieVipuska = Resources.Resource.OgranichenieWORK;
                if (MaxVipusk > StarWork.QTY - StarWork.QTYFact)
                {
                    MaxVipusk = StarWork.QTY - StarWork.QTYFact;
                    OgranichenieVipuska = Resources.Resource.OgranichenieDay;
                }
                decimal VipustitSegodnya = StarWork.QTY - StarWork.QTYFact;
                foreach (PPBOMEntry bom in BOM)
                {
                    if (bom.FQtyScrap == 0)
                    {
                        continue;
                        // bom.FQtyScrap = 1;
                    }

                    decimal NZPQty = 0;
                    try
                    {
                        NZPQty = bom.FWIPQTY.Value;
                    }
                    catch (Exception ex)
                    {

                    }
                    decimal QTYScrap = bom.FQtyScrap;

                    int QTYOstalosToday = Convert.ToInt32(Math.Round(VipustitSegodnya * QTYScrap - NZPQty, 0));
                    int NugnoVipustitSegodnya = Convert.ToInt32(Math.Round(VipustitSegodnya * QTYScrap, 0));
                    int MognoVipustit = Convert.ToInt32(Math.Round(NZPQty / QTYScrap, 0));
                    t_Item Item = PerevestiItem(bom.t_Item);

                    bom.FQtyMust = NugnoVipustitSegodnya; //Нужно выпустить сегодня
                    bom.FQty = Convert.ToInt32(Math.Round(StarWork.QTYFact * QTYScrap, 0));  //Выпущено сегодня
                    bom.FAuxQtyMust = MognoVipustit; //Можно выпустить выпустить сегодня
                    bom.FAuxQty = NugnoVipustitSegodnya - bom.FQty; // Осталось выпустить сегодня 
                    bom.t_Item = PerevestiItem(bom.t_Item);


                    if (MognoVipustit < MaxVipusk)
                    {
                        MaxVipusk = MognoVipustit;
                        OgranichenieVipuska = Resources.Resource.OgranichenieNomenklatura + " " + bom.t_Item.FNumber;
                    }
                    try
                    {

                    }
                    catch
                    {

                    }
                    WW.Add(bom);
                }
                ViewBag.MaxVipusk = Convert.ToInt32(MaxVipusk);
            }
            catch (Exception e)
            {

            }
            ViewBag.OgranichenieVipuska = OgranichenieVipuska;

            ViewBag.Managers = Managers;
            return View(WW);
        }

        public JsonResult PerenosOstatkov(string DocNumber = "", int ToStock = 0)
        {
            int DocumentNumber = 0;
            if (!DocNumber.Equals("")&& ToStock>0)
            {
                try
                {
                    DocumentNumber = db.ICStockBill.Where(x => x.FBillNo.Contains(DocNumber)).Select(x => x.FInterID).First();
                    List<ICStockBillEntry> SE = db.ICStockBillEntry.Where(x => x.FInterID == DocumentNumber).ToList();
                    foreach (var se in SE)
                    {
                        decimal QTY = 0;
                        try
                        {
                            int FromStockId = se.FSCStockID;
                            QTY = Math.Abs(se.FQty);
                           

                                decimal QTYFMTO = 0;
                                QTYFMTO = QTYNaSklade(FromStockId, se.FItemID.Value, se.FMTONo);
                                if (QTYFMTO >= QTY)
                                {
                                    PeremeshenieNaSklad(DocumentNumber, FromStockId, se.FItemID.Value, QTY, false, se.FMTONo);//Минусуем со склада
                                }
                                else
                                {
                                    QTYFMTO = QTYNaSklade( FromStockId, se.FItemID.Value, "",true);
                                    if (QTYFMTO >= QTY)
                                    {
                                        PeremeshenieNaSklad(DocumentNumber,FromStockId, se.FItemID.Value, QTY, false,"");//Минусуем со склада пустая строка
                                    }
                                    else
                                {
                                    return Json("Ошибка. Не достаточное количество на складе");
                                }
                                }

                            se.FSCStockID = ToStock;
                            db.Entry(se).State = EntityState.Modified;
                            db.SaveChanges();
                            PeremeshenieNaSklad(DocumentNumber,ToStock, se.FItemID.Value, QTY, true,se.FMTONo);//Плюсуем на склад
                        }
                        catch
                        {

                        }
                    }
                }
                catch
                {

                }
                }
            return Json("Успешно!");
        }

        [Culture]
        public ActionResult CorrectDocks(string DocNumber = "", int ToStock =0)
        {
            int DocumentNumber = 0;
            int ItemId = 0;
            List<string> StrokiNaSklade = new List<string>() ;
            ViewBag.CurrentStock = ToStock;
            ViewBag.DocNumber = DocNumber;
            ViewBag.Stocks = SearchStorages("", true, true, true, true, true, true);
            if (!DocNumber.Equals(""))
            {
                try

                {

                    DocumentNumber = db.ICStockBill.Where(x => x.FBillNo.Contains(DocNumber)).Select(x => x.FInterID).First();
                    ViewBag.DocNumber = DocNumber;
                    List<ICStockBillEntry> SE = db.ICStockBillEntry.Where(x => x.FInterID == DocumentNumber).Include(x => x.t_Item).ToList();
              
                    foreach (var se in SE)
                    {
                        decimal QTY = 0;
                        try
                        {
                           string StockName = db.t_Stock.Where(x => x.FItemID == se.FSCStockID).Select(x=>x.FName).First();
                            StrokiNaSklade.Add(StockName + "/" + se.t_Item.FNumber + "/" + "Склад в документе" );
                            if (se.FMTONo.Equals("") == false)
                            {
                               QTY = QTYNaSklade(se.FSCStockID, se.FItemID.Value, se.FMTONo);
                                StrokiNaSklade.Add(StockName +"/"+se.t_Item.FNumber + "/" + se.FMTONo + "/" + Math.Round(QTY, 3).ToString());

                            }

                            if (QTY <=0)
                            {
                               QTY = QTYNaSklade(se.FSCStockID, se.FItemID.Value,"",true);
                                StrokiNaSklade.Add(StockName + "/"+se.t_Item.FNumber + "/" +" " + "/" + Math.Round(QTY, 3).ToString());
                            }

                            
                            //Ищем выбранный склад
                            var Stock = db.t_Stock.Where(x => x.FItemID == ToStock).First();
                            StrokiNaSklade.Add(Stock.FName + "/" + se.t_Item.FNumber + "/" + "Выбранный склад" );
                            if (se.FMTONo.Equals("") == false)
                            {
                                QTY = QTYNaSklade(ToStock, se.FItemID.Value, se.FMTONo);
                                StrokiNaSklade.Add(Stock.FName + "/" + se.t_Item.FNumber + "/" + se.FMTONo + "/" + Math.Round(QTY, 3).ToString());

                            }

                            if (QTY <= 0)
                            {
                                QTY = QTYNaSklade(ToStock, se.FItemID.Value, "", true);
                                StrokiNaSklade.Add(Stock.FName + "/" + se.t_Item.FNumber + "/" + " " + "/" + Math.Round(QTY,3).ToString());
                            }
                            StrokiNaSklade.Add(Stock.FName + "/" + se.t_Item.FNumber + "/" + "В наличии на складах");
                            try
                            {
                                var Inv = db.ICInventory.Where(x => x.FQty > 0 && x.FItemID == se.FItemID).Include(x => x.t_Stock).ToList();
                                if (Inv.Count > 0)
                                {
                                    foreach (var inv in Inv)
                                    {
                                        StrokiNaSklade.Add(inv.t_Stock.FName + "/" + se.t_Item.FNumber + "/" + inv.FMTONo+ "/"+Math.Round(inv.FQty,3));
                                    }

                                }
                            }
                            catch
                            {

                            }

                        }
                        catch
                        {

                        }
                    }
                }
                catch
                {

                }
            }

            return View(StrokiNaSklade);
        }


            [Culture]
        public ActionResult PlanshetWorksNEW(int WorkId =0)
        {
            List<BomEntry> BE = new List<BomEntry>();
            List<PPBOMEntry> WW = new List<PPBOMEntry>();
            
            ICMO Work = new ICMO();
            StarMehWorks StarWork = new StarMehWorks();

            //   iCMO = db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Where(x => x.FPlanCommitDate >= Date && x.FCommitQty != x.FQty && x.FStatus == 1).Include(x => x.t_Item.NomenklaturaEnterprise).ToList();
            int PlanshetId = 1;
            PlanshetId = FindPlanshetId();
            if (PlanshetId == 0)
            {
                return RedirectToAction("Login", "Home");
            }
            try
            {
               ViewBag.Planshet = db.ComputerNames.Where(x => x.Id == PlanshetId).First();
            }
            catch
            {

            }
            List<StarMehWorks> SW = new List<StarMehWorks>();

            ViewBag.PlanshetId = PlanshetId;//WW
            WorkId = 0;
            int WorkShopId = 0;
            var Stocks = SearchStorages("",false, true, false, false, false, false);
            List<string> Managers = SearchMOL();// SearchMOLByStock(Stocks[0]);//
            DateTime D = DateTime.Now.Date;
            List<NZPNEW> NZPNEW = new List<NZPNEW>();
            List<NZP> NZP = new List<NZP>();
            int UserId = CurrentKDWUserModel().Id;
            if (UserId == 0) //Если не залогинен то выкидываем в форму
            {
                return RedirectToAction("Login", "Home");
            }
            ViewBag.WorksCount = 0;
            ViewBag.StarWork = null;
            List<string> Vipusheno = new List<string>();
            Poisk:
            try // Пробуем найти назначенные старшим мастером работы
            {
                int WorksCount = db.StarMehWorks.Where(x => x.DateStart == D && x.Complete == false && x.PlanshetId == PlanshetId).Count();
                if (WorksCount > 0)
                {
                    SW = db.StarMehWorks.Where(x => x.DateStart == D && x.Complete == false && x.PlanshetId == PlanshetId).OrderBy(x => x.Poryadok).ToList();

                    StarWork = SW.First();
                    if (WorkId == 0)
                    {
                        WorkId = SW.First().WorkId;
                    }
                    ViewBag.StarWork = StarWork;
                    ViewBag.WorksCount = WorksCount;
                }
                else
                {
                    goto End;
                }
            }
            catch (Exception e)
            {

            }

            try
            {
                Work = db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Where(x => x.FInterID == WorkId).First();// db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Where(x => x.FPlanCommitDate >= Date && x.FCommitQty != x.FQty && x.FStatus == 1).Include(x => x.t_Item.NomenklaturaEnterprise).ToList();
                WorkShopId = Work.FWorkShop.Value;
                ViewBag.Work = Work;
            }
            catch (Exception e)
            {
                SkipWorkJson(StarWork.Id);
                goto Poisk;
            }
            
            //Ищем подразделения для выпуска
            List<DepartmentToStocks> DS = new List<DepartmentToStocks>();
            try
            {
                DS = db.DepartmentToStocks.Where(x => x.PlanshetId == PlanshetId && x.DepartmentId == WorkShopId).Include(x => x.Stock).Include(x => x.MOL).ToList();
            }
            catch
            {

            }

            List<DvigenieNEW> CINS = new List<DvigenieNEW>();
            try
            {
                Vipusheno.AddRange(db.Dvigenie.Where(x => x.Date.Value.Year == D.Year && x.Date.Value.Month == D.Month && x.Date.Value.Day == D.Day && x.FBillNo.Contains("CIN") && x.Work.Equals(Work.FBillNo)).Select(x => x.FBillNo + " " + x.QTYFact).ToList());
            }
            catch
            {

            }
            try
            {
                CINS = db.DvigenieNEW.Where(x => x.Date.Value.Year == D.Year && x.Date.Value.Month == D.Month && x.Date.Value.Day == D.Day && x.CurrentFBillNo.Contains("CIN") && x.WorkId == Work.FInterID).ToList();
                Vipusheno.AddRange(CINS.Select(x => x.CurrentFBillNo + " " + x.QTYFact).ToList());
            }
            catch
            {

            }

            ViewBag.Vipusheno = Vipusheno;
            ViewBag.CINS = CINS;
            if (DS.Count > 0)
            {
                Dictionary<int, string> S = new Dictionary<int, string>();
                foreach (DepartmentToStocks ds in DS)
                {
                    try
                    {
                        S.Add(ds.StockId, ds.Stock.FName);
                        if (Managers.Contains(ds.MOL.FName) == false)
                        {
                            Managers.Add(ds.MOL.FName);
                        }
                    }
                    catch
                    {

                    }

                }
                if (S.Count > 0)
                {
                    ViewBag.Stocks = S;
                }
                //  Stocks = DS.Where(x=>x.StockId.conta Stocks.Where(x=>x.Key == )
            }
            else
            {
                ViewBag.Stocks = Stocks;
            }

            NZPNEW = FindWorksNZPNEW(WorkId);
            NZP = FindWORKNZP(WorkId);
            decimal MaxVipusk = 0;
            string OgranichenieVipuska = "";
            ViewBag.NZP = NZP;
            ViewBag.NZPNEW = NZPNEW;
           
            //Загружаем данные из работы старшего мастера
            try
            {
                List<PPBOMEntry> BOM = new List<PPBOMEntry>();
               
              

                BE = FindBOMSFromWork(WorkId, 0, true, true, "Выпуск");
                
                MaxVipusk = Math.Round(Work.FQty - Work.FCommitQty, 0);
                //Если бом пустой то выпустить тоже нельзя
                decimal BOMCOUNT = db.PPBOMEntry.Where(x => x.FICMOInterID == WorkId).Count();
                if (BOMCOUNT < 1)
                {
                    MaxVipusk = 0;
                }

                OgranichenieVipuska = Resources.Resource.OgranichenieWORK;
                if (MaxVipusk > StarWork.QTY - StarWork.QTYFact)
                {
                    MaxVipusk = StarWork.QTY - StarWork.QTYFact;
                    OgranichenieVipuska = Resources.Resource.OgranichenieDay;
                }
                decimal VipustitSegodnya = StarWork.QTY - StarWork.QTYFact;
                /*   foreach (PPBOMEntry bom in BOM)
                   {
                       if (bom.FQtyScrap == 0)
                       {
                           continue;
                          // bom.FQtyScrap = 1;
                       }

                       decimal NZPQty = 0;
                       try
                       {
                           NZPQty = bom.FWIPQTY.Value;
                       }
                       catch (Exception ex)
                       {

                       }
                       decimal QTYScrap = bom.FQtyScrap;

                       int QTYOstalosToday = Convert.ToInt32(Math.Round(VipustitSegodnya * QTYScrap - NZPQty, 0));
                       int NugnoVipustitSegodnya = Convert.ToInt32(Math.Round(VipustitSegodnya * QTYScrap, 0));
                       int MognoVipustit = Convert.ToInt32(Math.Round(NZPQty / QTYScrap, 0));
                       t_Item Item = PerevestiItem(bom.t_Item);

                       bom.FQtyMust = NugnoVipustitSegodnya; //Нужно выпустить сегодня
                       bom.FQty = Convert.ToInt32(Math.Round(StarWork.QTYFact * QTYScrap, 0));  //Выпущено сегодня
                       bom.FAuxQtyMust =MognoVipustit; //Можно выпустить выпустить сегодня
                       bom.FAuxQty = NugnoVipustitSegodnya - bom.FQty; // Осталось выпустить сегодня 
                       bom.t_Item = PerevestiItem(bom.t_Item);


                       if (MognoVipustit < MaxVipusk)
                       {
                           MaxVipusk = MognoVipustit;
                           OgranichenieVipuska = Resources.Resource.OgranichenieNomenklatura + " " + bom.t_Item.FNumber;
                       }
                       try
                       {

                       }
                       catch
                       {

                       }
                       WW.Add(bom);
                   }
                */
                foreach (var be in BE)
                {
                    if (be.MognoVipustit < MaxVipusk)
                    {
                        MaxVipusk = be.MognoVipustit;
                        OgranichenieVipuska = Resources.Resource.OgranichenieNomenklatura + " " + be.Item.FNumber;
                    }
                }

                ViewBag.MaxVipusk = Convert.ToInt32(MaxVipusk);
            }
            catch (Exception e)
            {

            }
             


            ViewBag.OgranichenieVipuska = OgranichenieVipuska;

            ViewBag.Managers = Managers;
            End:
            return View(BE);
        }

        [Culture]
        public ActionResult PlanshetWorks()
        {
            WorkView WW = new WorkView();

                //   iCMO = db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Where(x => x.FPlanCommitDate >= Date && x.FCommitQty != x.FQty && x.FStatus == 1).Include(x => x.t_Item.NomenklaturaEnterprise).ToList();
                int PlanshetId = 1;
                PlanshetId = FindPlanshetId();
            if (PlanshetId == 0 )
            {
                return RedirectToAction("Login", "Home");
            }
            try
            {
                WW.Planshet = db.ComputerNames.Where(x => x.Id == PlanshetId).First();
            }
            catch
            {

            }
            List<StarMehWorks> SW = new List<StarMehWorks>();

                WW.PlanshetId = PlanshetId;//WW
            int WorkId = 0;
            int WorkShopId = 0;
            var Stocks = SearchStorages();
            List<string> Managers = SearchMOL();// SearchMOLByStock(Stocks[0]);//
            DateTime D = DateTime.Now.Date;
            List<NZPNEW> NZPNEW = new List<NZPNEW>();
            List<NZP> NZP = new List<NZP>();
            int UserId = CurrentKDWUserModel().Id;
            if (UserId == 0) //Если не залогинен то выкидываем в форму
            {
                return RedirectToAction("Login", "Home");
            }
            ViewBag.WorksCount = 0;
            try // Пробуем найти назначенные старшим мастером работы
            {
               
                SW = db.StarMehWorks.Where(x => x.DateStart == D && x.Complete == false && x.PlanshetId == PlanshetId).OrderBy(x => x.Poryadok).ToList();
                WW.SMWorks.Add(SW.First());//WW
                WW.StarWork = SW.First();
                WorkId = SW.First().WorkId;
                
                ViewBag.WorksCount = SW.Count;
            }
            catch
            {

            }

            try
            {
                WW.WORK = db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Where(x => x.FInterID == WorkId).First();// db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Where(x => x.FPlanCommitDate >= Date && x.FCommitQty != x.FQty && x.FStatus == 1).Include(x => x.t_Item.NomenklaturaEnterprise).ToList();
                WorkShopId = WW.WORK.FWorkShop.Value;
            }
            catch
            {

            }

            //Ищем подразделения для выпуска
            List<DepartmentToStocks> DS = new List<DepartmentToStocks>();
            try
            {
                DS = db.DepartmentToStocks.Where(x => x.PlanshetId == PlanshetId && x.DepartmentId == WorkShopId).Include(x => x.Stock).Include(x => x.MOL).ToList();
            }
            catch
            {

            }

            try
            {
              WW.Vipusheno.AddRange( db.Dvigenie.Where(x => x.Date.Value.Year == D.Year&&x.Date.Value.Month == D.Month&&x.Date.Value.Day==D.Day&& x.FBillNo.Contains("CIN") && x.Work.Equals(WW.WORK.FBillNo)).Select(x=>x.FBillNo+" "+x.QTYFact).ToList());
            }
            catch
            {

            }
            try
            {
                WW.Vipusheno.AddRange(db.DvigenieNEW.Where(x => x.Date.Value.Year == D.Year && x.Date.Value.Month == D.Month && x.Date.Value.Day == D.Day && x.CurrentFBillNo.Contains("CIN") && x.WorkId ==WW.WORK.FInterID).Select(x => x.CurrentFBillNo + " " + x.QTYFact).ToList());
            }
            catch
            {

            }

            if (DS.Count > 0)
            {
                Dictionary<int, string> S = new Dictionary<int, string>();
                foreach (DepartmentToStocks ds in DS)
                {
                    try
                    {
                        S.Add(ds.StockId, ds.Stock.FName);
                        if (Managers.Contains(ds.MOL.FName) == false)
                        {
                            Managers.Add(ds.MOL.FName);
                        }
                    }
                    catch
                    {

                    }

                }
                if (S.Count > 0)
                {
                    ViewBag.Stocks = S;
                }
                //  Stocks = DS.Where(x=>x.StockId.conta Stocks.Where(x=>x.Key == )
            }
            else
            {
                ViewBag.Stocks = Stocks;
            }

            NZPNEW = FindWorksNZPNEW(WorkId);
            NZP = FindWORKNZP(WorkId);
            //Загружаем данные из работы старшего мастера
            try
            {
                List<PPBOMEntry> BOM = new List<PPBOMEntry>();
                BOM = db.PPBOMEntry.Where(x => x.FICMOInterID == WorkId).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).ToList();
                decimal MaxVipusk = Math.Round(WW.WORK.FQty - WW.WORK.FCommitQty,0);
                WW.OgranichenieVipuskaPrichina = Resources.Resource.OgranichenieWORK;
                if (MaxVipusk>WW.SMWorks[0].QTY - WW.SMWorks[0].QTYFact)
                {
                    MaxVipusk = WW.SMWorks[0].QTY - WW.SMWorks[0].QTYFact;
                    WW.OgranichenieVipuskaPrichina = Resources.Resource.OgranichenieDay;
                }
                decimal VipustitSegodnya = WW.StarWork.QTY - WW.StarWork.QTYFact;
                foreach (PPBOMEntry bom in BOM)
                {
                    BomEntry BE = new BomEntry();
                    BE.NZPQty = bom.FWIPQTY.Value;
                    BE.QTYScrap = bom.FQtyScrap;
                    BE.QTYOstalosToday = Convert.ToInt32(Math.Round(VipustitSegodnya * BE.QTYScrap - BE.NZPQty, 0));
                    BE.NugnoVipustitSegodnya = Convert.ToInt32(Math.Round(VipustitSegodnya * BE.QTYScrap, 0));
                    BE.MognoVipustit = Convert.ToInt32(Math.Round(BE.NZPQty * BE.QTYScrap, 0));
                    BE.Item = PerevestiItem(bom.t_Item);
               
                    
                    //Ищем НЗП
                    try
                    {
                        BE.NZPs = NZPNEW.Where(x => x.ItemId == bom.t_Item.FItemID).ToList();
                    }
                    catch
                    {

                    }

                    //Ищем НЗП старого формата
                    try
                    {
                        BE.NZPOld = NZP.Where(x => x.ItemId == bom.t_Item.FItemID).ToList();
                    }
                    catch
                    {

                    }

                    if (BE.MognoVipustit<MaxVipusk)
                    {
                        MaxVipusk = BE.MognoVipustit;
                        WW.OgranichenieVipuskaPrichina = Resources.Resource.OgranichenieNomenklatura +" "+ bom.t_Item.FNumber;
                    }
                    try
                    {
                        
                    }
                    catch
                    {

                    }
                    WW.BOMEntrys.Add(BE);
                }
                WW.MaxVipusk = Convert.ToInt32(MaxVipusk);
            }
            catch
            {

            }
            
            ViewBag.Managers = Managers;
            return View(WW);
        }


        public ActionResult SpisokWork(int Regim)
        {
            WorkView WW = new WorkView();
            List<ICMO> iCMO = new List<ICMO>();
            List<ICMO> Result = new List<ICMO>();
            DateTime Date = DateTime.Now.AddMonths(-13);
            if (Regim == 1)//Перемещение на производство
            {
                ViewBag.Regim = 1;
                ViewBag.Header = Resources.Resource.PeremeshenieNaProizvodstvo;
                iCMO = db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Where(x => x.FPlanCommitDate >= Date && x.FCommitQty != x.FQty && x.FStatus >= 0 && x.FStatus < 3).Include(x => x.t_Item.NomenklaturaEnterprise).ToList();
            }

            if (Regim == 2)//Перемещение с производства
            {
                ViewBag.Regim = 2;
                ViewBag.Header = Resources.Resource.PeremestitSProizvodstva;
                //   iCMO = db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Where(x => x.FPlanCommitDate >= Date && x.FCommitQty != x.FQty && x.FStatus == 1).Include(x => x.t_Item.NomenklaturaEnterprise).ToList();
                int PlanshetId = 1;
                PlanshetId = FindPlanshetId();
                List<StarMehWorks> SW = new List<StarMehWorks>();
               
                WW.PlanshetId = PlanshetId;//WW

                bool Naznacheni = false;


                try // Пробуем найти назначенные старшим мастером работы
                {
                    DateTime DS = DateTime.Now.Date;
                    SW = db.StarMehWorks.Where(x => x.DateStart == DS && x.Complete == false && x.PlanshetId == PlanshetId).OrderBy(x => x.Poryadok).ToList();
                    WW.SMWorks.Add(SW.First());//WW

                    ViewBag.WorksCount = SW.Count;
                    var X = SW[0];
                    SW = new List<StarMehWorks>();
                    SW.Add(X);
                    //SW.Add(db.StarMehWorks.Where(x => x.DateStart == DS && x.Complete == false && x.PlanshetId == PlanshetId).OrderBy(x => x.Poryadok).First());
                    foreach (var w in WW.SMWorks)
                    {
                        try
                        {
                            ICMO IC = db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Where(x => x.FInterID == w.WorkId).First();// db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Where(x => x.FPlanCommitDate >= Date && x.FCommitQty != x.FQty && x.FStatus == 1).Include(x => x.t_Item.NomenklaturaEnterprise).ToList();
                            List<PPBOMEntry> BOMs = db.PPBOMEntry.Where(x => x.FICMOInterID == IC.FInterID).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).ToList();
                            WW.WORK = IC;//WW
              

                            IC.PPBOMEntry = BOMs;

                            IC.NZP = FindWORKNZP(IC.FInterID);

                            decimal MaxVipusk = w.QTY - w.QTYFact;
                            ViewBag.NugnoProizvesti = w.QTY;
                            ViewBag.Proizvedeno = w.QTYFact;
                            ViewBag.WorkDate = "";
                            try
                            {
                                ViewBag.WorkDate = w.WorkDate.Value.ToString();
                            }
                            catch
                            {

                            }
                            foreach (var b in IC.PPBOMEntry)
                            {
                                // List<NZP> NZP = IC.NZP.Where(x => x.ItemId == b.FItemID && x.Active == true).ToList();

                                //  foreach (var n in NZP)
                                //  {
                                //       try
                                //       {

                                //       }
                                //     catch
                                //      {

                                //      }
                                //  }
                                decimal QTYNZP = b.FWIPQTY.Value;//NZP.Sum(x => x.QTY);
                                decimal QTYScrap = b.FQtyScrap;
                                decimal MaxByScrap = Math.Round(QTYNZP / QTYScrap, 3);
                                BomEntry BE = new BomEntry();
                                BE.NZPQty = QTYNZP;                     

                                b.FAuxQtyMust = Math.Round((w.QTY - w.QTYFact) * QTYScrap, 3);
                                BE.MognoVipustit = Convert.ToInt32(Math.Round(MaxVipusk, 0)); //WW

                                b.FAuxQty = QTYNZP;
                                if (MaxByScrap < MaxVipusk)
                                {
                                    MaxVipusk = MaxByScrap;
                                }
                                b.t_Item = PerevestiItem(b.t_Item);
                            }
                            IC.FInHighLimitQty = MaxVipusk;
                            ViewBag.MaxVipustit = MaxVipusk;
                          

                            //  IC.StarMehWorks = new StarMehWorks();
                            IC.StarMehWorks = SW;
                            Result.Add(IC);
                            Naznacheni = true;
                        }
                        catch (Exception e)
                        {

                        }

                        //     List<NZP> NZPs = new List<NZP>();
                        //  try
                        //  {
                        //      db.NZP.Where(x=>x.WorkId== w.WorkId&&x.Active==true)
                        //   }
                        //   catch
                        //  {

                        //   }



                    }
                    if (Result.Count > 0)
                    {

                        iCMO = Result;
                    }
                }
                catch
                {

                }
                if (!Naznacheni) // Фильтруем по всему списку если не назначены работы старшим мастером
                {


                    List<PlanoviWorks> PW = new List<PlanoviWorks>();
                    try
                    {
                        var MaxDate = db.PlanoviWorks.Max(x => x.Date);
                        PW = db.PlanoviWorks.Where(x => x.Date.Value.Year == MaxDate.Value.Year && x.Date.Value.Month == MaxDate.Value.Month && x.Date.Value.Day == MaxDate.Value.Day).ToList();
                        foreach (var w in PW)
                        {
                            try
                            {
                                Result.Add(iCMO.Where(x => x.FInterID == w.WorkId).First());
                            }
                            catch (Exception e)
                            {

                            }
                        }

                        //Можно убрать проверку если не нашлись плановые работы
                        if (Result.Count > 0)
                        {
                            iCMO = Result;
                        }
                    }
                    catch
                    {

                    }
                }

            }

            List<int> DeptId = FindCurrentDepartmentIdArray();
        //    iCMO = iCMO.Where(x => DeptId.Contains(x.FWorkShop.Value)).ToList();
            /*    if (DeptId > 0)
                {
                    iCMO = iCMO.Where(x => x.FWorkShop == DeptId).ToList();
                }
            */


            if (CultureRU())
            {

                foreach (var i in iCMO)
                {
                    i.t_Item = PerevestiItem(i.t_Item);
                }
            }

            if (iCMO.Count > 0)
            {
                ICMO I = iCMO.First();
                ViewBag.QR = "KOMPLEKTOVKA;" + I.FInterID + ";" + I.StarMehWorks.First().Id + ";" + I.t_Department.FItemID + ";" + I.StarMehWorks.First().PlanshetId + ";" + I.StarMehWorks.First().QTY;


            }

            return View(iCMO.ToList());
        }

        public List<NZP> FindWORKNZP(int WorkId)
        {
            //  ICMO W = new ICMO();
            List<NZP> NZP = new List<NZP>();
            try
            {
                //  W = db.ICMO.Where(x => x.FInterID == WorkId).Include(x=>x.PPBOMEntry).First();

                NZP = db.NZP.Where(x => x.WorkId == WorkId).Include(x => x.Stock).Include(x => x.Item).Include(x => x.Dvigenie).Include(x => x.Department).Include(x => x.Dvigenie.QRTable).ToList();
                foreach (var n in NZP)
                {
                    try
                    {
                        // n.Z = new ZakazPostavshiku();
                        string Tip = "POORD";
                        if (n.Dvigenie.ZakazPostavshiku.Contains("WW"))
                        {
                            Tip = "WW";
                        }

                        if (Tip.Equals("POORD"))
                        {
                            n.POOrder = db.POOrder.Where(x => x.FInterID == n.POOrderId).Include(x => x.POOrderEntry).Include(x => x.t_Supplier).First();
                        }

                        //    n.Z.FindEntries(n.POOrderId, Tip, 0, n.Item.FNumber);
                        n.Item = PerevestiItem(n.Item);


                    }
                    catch
                    {

                    }
                }
            }
            catch
            {

            }
            return NZP;
        }

        public List<NZPNEW> FindWORKNZPNEW(int WorkId)
        {
            //  ICMO W = new ICMO();
            List<NZPNEW> NZP = new List<NZPNEW>();
            try
            {

                NZP = db.NZPNEW.Where(x => x.WorkId == WorkId).ToList();
              
            }
            catch
            {

            }
            return NZP;
        }

        public StarWorkView AddToStarMechWorkView(PlanoviWorks pw, StarMehWorks sw, ICMO w)
        {
            StarWorkView swv = new StarWorkView();
            decimal MaxInWork =0;
            decimal MaxVipusk = 0;
            if (pw != null)
            {
                swv.PW = pw;
                swv.WORK = pw.ICMO;
                swv.Item = PerevestiItem(pw.ICMO.t_Item);
                swv.PlanDate = pw.Date.Value;
               MaxInWork = pw.ICMO.FQty - pw.ICMO.FCommitQty;
                MaxVipusk = MaxInWork;
            }
            else
            {
                swv.PW = null;
                swv.WORK = w;
                swv.Item = PerevestiItem(pw.ICMO.t_Item);
                swv.PlanDate = DateTime.Now.Date;
                MaxInWork = w.FQty - w.FCommitQty;
                MaxVipusk = MaxInWork;
            }
            try
            {
                swv.SMWork = sw;
                swv.Planshet = swv.SMWork.ComputerNames;
                swv.StartDate = swv.SMWork.DateStart.Value;

                swv.Proizvedeno = swv.SMWork.QTYFact;
                swv.Proizvesti = swv.SMWork.QTY;

                if (swv.Proizvesti > MaxVipusk)
                {
                    swv.Proizvesti = MaxVipusk;
                }
                swv.Raznica = swv.Proizvesti - swv.Proizvedeno;


                if (swv.Raznica <= 0)
                {
                    swv.Completed = true;
                }
              

            }
            catch
            {
                swv.Planshet = null;
                swv.SMWork = null;
                swv.StartDate = DateTime.Now.Date;
                swv.Proizvedeno = 0;
                if (pw.QTY > MaxVipusk)
                {
                    swv.Proizvesti = MaxVipusk;
                    swv.Raznica = MaxVipusk;
                }
                else
                {
                    swv.Proizvesti = pw.QTY;
                    swv.Raznica = pw.QTY;
                }



            }
            return swv;
        }

        public ActionResult SpisokStarWork(int Day = 0)
        {

            List<ICMO> iCMO = new List<ICMO>();
            List<ICMO> Result = new List<ICMO>();
            List<StarMehWorks> SW = new List<StarMehWorks>();
            List<ComputerNames> Planshets = new List<ComputerNames>();
             //int DeptId = FindDeptId(FindCurrentDepartment());
            DateTime Date = DateTime.Now.AddMonths(-13);
            DateTime DN = DateTime.Now.Date;
            List<string> CurrentRoles = FindCurrentRoles();
        
            ViewBag.Day = Day;
            List<int> DeptId = FindCurrentDepartmentIdArray();

            ViewBag.Regim = 2;
            ViewBag.Header = Resources.Resource.PeremestitSProizvodstva;
            ViewBag.DateNaznacheniya = FindDatesString();

            //   List<StarMehWorks> PW = new List<StarMehWorks>();
            List<PlanoviWorks> PW = new List<PlanoviWorks>();
            try
            {
                SW = db.StarMehWorks.Where(x => x.DateStart == DN).ToList();
            }
            catch
            {

            }

            List<StarWorkView> SWV = new List<StarWorkView>();

            if (Day != 0)
            {
                DN = DN.AddDays(Day);
               
            }
            ViewBag.DN = DN;
            List<PlanoviWorks> PWW = new List<PlanoviWorks>();
            List<StarMehWorks> SMWW = new List<StarMehWorks>();
 //Сначала ищем плановые работы на дату
            try
            {
                PWW = db.PlanoviWorks.Where(x => x.Date.Value.Year == DN.Date.Year && x.Date.Value.Month == DN.Date.Month && x.Date.Value.Day == DN.Date.Day).Include(x => x.ICMO).Where(x=>x.ICMO!=null).Include(x => x.ICMO.t_Department).Include(x => x.ICMO.t_Item).ToList();//

           }
            catch
            {

            }

            if (CurrentRoles.Contains("Администратор")==false)
            {
                try
                {
                    // PWW = PWW.Where(x => DeptId.Contains(x.ICMO.FWorkShop.Value)).ToList();//
                    List<PlanoviWorks> pww = new List<PlanoviWorks>();
                    foreach (var p in PWW)
                    {
                        if (DeptId.Contains(p.ICMO.FWorkShop.Value))
                        {

                            pww.Add(p);

                        }
                    }
                    PWW = pww;

                }
                catch (Exception e)
                {

                }
            }    

            //Теперь ищем работы старшего мастера так как можно назначить на завтра то чего завтра в плане не будет
            try
            {
                SMWW = db.StarMehWorks.Where(x => x.DateStart == DN.Date).Include(x => x.ComputerNames).Include(x=>x.ICMO).Include(x=>x.ICMO.t_Department).Include(x => x.ICMO.t_Item).Where(x=>DeptId.Contains(x.ICMO.FWorkShop.Value)).ToList();
                SW = db.StarMehWorks.Where(x => x.DateStart == DN.Date).Include(x => x.ComputerNames).Include(x => x.ICMO).Include(x => x.ICMO.t_Department).Include(x => x.ICMO.t_Item).Where(x => DeptId.Contains(x.ICMO.FWorkShop.Value)).ToList(); 
                ViewBag.SW = SW;
            }
            catch
            {

            }

            try
            {
               
               
                foreach (var pw in PWW)
                {
                    StarWorkView swv = new StarWorkView();
                    swv.PW = pw;
                    swv.WORK = pw.ICMO;
                    swv.Item = PerevestiItem(pw.ICMO.t_Item);
                    swv.PlanDate = pw.Date.Value;
                    decimal MaxInWork = pw.ICMO.FQty - pw.ICMO.FCommitQty;
                    decimal MaxVipusk = MaxInWork;
                    try
                    {
                      swv.SMWork =  SMWW.Where(x => x.WorkId == pw.WorkId).First();
                        swv = AddToStarMechWorkView(pw, swv.SMWork, pw.ICMO);
                     //   swv.Planshet = swv.SMWork.ComputerNames;
                     //   swv.StartDate = swv.SMWork.DateStart.Value;
                      
                     //   swv.Proizvedeno = swv.SMWork.QTYFact;
                     //   swv.Proizvesti = swv.SMWork.QTY;
                      
                     //   if (swv.Proizvesti > MaxVipusk)
                    //    {
                    //       swv.Proizvesti = MaxVipusk;
                    //    }
                    //    swv.Raznica = swv.Proizvesti - swv.Proizvedeno;


                    //    if (swv.Raznica <= 0)
                    //    {
                    //        swv.Completed = true;
                    //    }
                       SMWW.Remove(swv.SMWork);
                       
                    }
                    catch
                    {
                        /*   swv.Planshet = null;
                           swv.SMWork = null;
                           swv.StartDate = DN;
                           swv.Proizvedeno = 0;
                           if (pw.QTY>MaxVipusk)
                           {
                               swv.Proizvesti = MaxVipusk;
                               swv.Raznica = MaxVipusk;
                           }
                           else
                           {
                               swv.Proizvesti = pw.QTY;
                               swv.Raznica = pw.QTY;
                           }
                          */
                       swv = AddToStarMechWorkView(pw, null, pw.ICMO);

                    }
                    SWV.Add(swv);


                }

                if (SMWW.Count > 0)
                {
                    foreach (var sw in SMWW)
                    {
                     
                        SWV.Add(AddToStarMechWorkView(null, sw, sw.ICMO));
                    }
                        
                }

            }
            catch
            {

            }



            /*

            try
            {
                var MaxDate = db.PlanoviWorks.Max(x => x.Date);

                //    PW = db.StarMehWorks.Where(x=>x.DateStart == DN.Date).Include(x=>x.ICMO).Include(x => x.ICMO.t_Department).Include(x => x.ICMO.t_Item).Include(x => x.ICMO.t_Item.NomenklaturaEnterprise).Include(x => x.ICMO.StarMehWorks).ToList();
                if (Day != 0)
                {

                    PW = FindPlanoviWorks(DN.ToString());
                }
                else
                {
                    PW = db.PlanoviWorks.Where(x => x.Date.Value.Year == DN.Year && x.Date.Value.Month == DN.Month && x.Date.Value.Day == DN.Day && x.QTY > 0).Include(x => x.ICMO).Include(x => x.ICMO.t_Department).Include(x => x.ICMO.t_Item).Include(x => x.ICMO.t_Item.NomenklaturaEnterprise).ToList();

                }
                foreach (var w in PW)
                {
                    try
                    {
                        w.ICMO.StarMehWorks = new List<StarMehWorks>();
                        w.ICMO.FCommitQty = 0;
                        if (SW.Count > 0)
                        {
                            w.ICMO.StarMehWorks = SW.Where(y => y.DateStart.Value == DN && y.WorkId == w.WorkId).ToList();//добавляем отправленное задание на планшет SMW
                            try
                            {
                                w.ICMO.FCommitQty = w.ICMO.StarMehWorks.Where(x => x.DateStart == DN).Sum(x => x.QTYFact);
                            }
                            catch
                            {

                            }
                        }
                        w.ICMO.FQty = w.QTY;

                        w.ICMO.FPlanCommitDate = w.Date;
                        //    Result.Add(iCMO.Where(x => x.FInterID == w.WorkId).First());
                        Result.Add(w.ICMO);
                    }
                    catch (Exception e)
                    {

                    }
                }

                //Можно убрать проверку если не нашлись плановые работы
                if (Result.Count > 0)
                {
                    iCMO = Result;
                }
            }
            catch (Exception e)
            {

            }

            if (iCMO.Count == 0)
            {
                iCMO = db.ICMO.Include(i => i.t_Department).Include(x => x.t_Item).Where(x => x.FStatus == 1).Include(x => x.t_Item.NomenklaturaEnterprise).Include(x => x.StarMehWorks).ToList();
            }

            // int DeptId = FindDeptId(FindCurrentDepartment());
            List<ICMO> Works = new List<ICMO>();
            foreach (int D in DeptId)
            {
                if (D > 0)
                {
                    Planshets.AddRange(FindPlanshets(D));
                    Works.AddRange(iCMO.Where(x => x.FWorkShop == D).ToList());
                }
            }

            if (CultureRU())
            {
                foreach (var i in iCMO)
                {
                    i.t_Item = PerevestiItem(i.t_Item);
                }
            }
            */
            if (Planshets.Count == 0)
            {
                Planshets = db.ComputerNames.ToList();
            }
            ComputerNames C = new ComputerNames();
            C.ComputerId = "::1";
            C.DepartmentId = 0;
            C.Name = Resources.Resource.NeNaznacheno;

            try
            {
                Planshets.Insert(0, C);
            }
            catch
            {
                Planshets.Add(C);
            }

            ViewBag.Planshets = Planshets;
            /*
            if (Works.Count > 0)
            {
                iCMO = Works;
            }
            foreach (var w in iCMO)
            {
                try
                {
                    if (w.StarMehWorks != null && w.StarMehWorks.Count > 0)
                    {
                        foreach (var p in w.StarMehWorks)
                        {

                            try
                            {
                                p.ComputerNames = Planshets.Where(x => x.Id == p.PlanshetId).First();
                            }
                            catch
                            {

                            }

                        }
                    }
                }
                catch
                {

                }
            }
            */

            //Выводим список всех заданий на сегодня


            //  return View(iCMO.ToList());

            return View(SWV);
        }

        [Culture]
        public JsonResult AddProverkaOTK(string QRData, int Status)
        {
            DateTime D = DateTime.Now;
            ProverkaOTK OTK = new ProverkaOTK();
            int I = 0;
            try
            {
                OTK = db.ProverkaOTK.Where(x => x.QRString.Equals(QRData)).First();
                I = 1;
            }
            catch
            {

            }

          
            OTK.Status = Status;
            OTK.UserId = FindCurrentKDWUser().Id;
            OTK.QRString = QRData;
            OTK.Dat = D;

            if (I == 0)
            {


                try
                {
                    db.ProverkaOTK.Add(OTK);
                    db.SaveChanges();
                }
                catch (Exception e)
                {

                }
            }
            else
            {
                try
                {
                    db.Entry(OTK).State = EntityState.Modified;
                    db.SaveChanges();
                }
                catch (Exception e)
                {

                }
            }
            return Json("");
        }



        [Culture]
        public JsonResult AddStatusOTK(int DvigenieId, int Status, bool NEW = false)
        {
            DateTime D = DateTime.Now;
            Control OTK = new Control();
            OTK.Status = Status;
            OTK.UserId = FindUserID(FindCurrentUser());
            OTK.DvigenieId = DvigenieId;
            OTK.Dat = D;
            OTK.DvigenieNEW = NEW;
            
            try
            {
                db.Control.Add(OTK);
                db.SaveChanges();
            }
            catch
            {

            }

            Session["Dvigenie"] = null;


            return Json("");
        }



        [Culture]
        public ActionResult StatusWork()
        {
            return View();
        }
        [Culture]
        public ActionResult StatusWorkMenu()
        {
            return View();
        }
        [Culture]
        public JsonResult SmenaStatusa(int WorkId, short StatusId)
        {
            ICMO I = db.ICMO.Where(x => x.FInterID == WorkId).First();
            I.FStatus = StatusId;
            I.FCheckDate = DateTime.Now;
            int UserId = 0;
            try
            {
                UserId = FindUserID(FindCurrentUser());
            }
            catch
            {

            }
            if (UserId != 0)//Попробуем установить чеккера
            {
                I.FCheckerID = UserId;
            }
            try
            {
                db.Entry(I).State = EntityState.Modified;
                db.SaveChanges();
            }
            catch
            {

            }
            return Json(StatusId);
        }

        [Culture]
        public JsonResult SmenaDate(int WorkId, DateTime Date, string type)
        {
            ICMO I = db.ICMO.Where(x => x.FInterID == WorkId).First();
            if (type.Equals("end"))
            {
                I.FPlanFinishDate = Date;
            }
            else
            {
                I.FPlanCommitDate = Date;
            }

            int UserId = 0;
            try
            {
                UserId = FindUserID(FindCurrentUser());
            }
            catch
            {

            }
            if (UserId != 0)//Попробуем установить чеккера
            {
                I.FCheckerID = UserId;
            }

            I.FCheckDate = DateTime.Now;
            try
            {
                db.Entry(I).State = EntityState.Modified;
                db.SaveChanges();
            }
            catch
            {

            }
            return Json("Ok");
        }


        public ActionResult WorkInfo()
        {
            return View();
        }

        public ActionResult WorkLog(string WorkNumber)
        {
            List<InfoWorks> W = new List<InfoWorks>();
            try
            {
               W = db.InfoWorks.Where(x => x.FBillNo.Equals(WorkNumber)).ToList();
            }
            catch
            {

            }
            return View(W);
        }

        [Culture]

        public ActionResult WorkInOut(string WorkNumber)
        {
            ICMO W = new ICMO();
            List<PPBOMEntry> PE = new List<PPBOMEntry>();
            List<ICStockBill> S = new List<ICStockBill>();
            List<ICStockBillEntry> SE = new List<ICStockBillEntry>();
            WorkView WW = new WorkView();
            try
            {
               W = db.ICMO.Where(x => x.FBillNo.Equals(WorkNumber)).Include(x=>x.t_Department).First();
               PE = db.PPBOMEntry.Where(x => x.FICMOInterID == W.FInterID).ToList();
                SE = db.ICStockBillEntry.Where(x => x.FICMOInterID == W.FInterID).Include(x=>x.ICStockBill).ToList();
            //    List<int> SEI = SE.Select(x => x.FInterID).Distinct().ToList();
             //   S = db.ICStockBill.Where(x => SEI.Contains(x.FInterID)).ToList();
     
            
                   
                    WW.WORK = W;
                    WW.CINs = SE.Where(x => x.FICMOInterID == W.FInterID&& x.ICStockBill.FBillNo.Contains("CIN")).ToList();
                    WW.SOUTS = SE.Where(x => x.FICMOInterID == W.FInterID && x.ICStockBill.FBillNo.Contains("SOUT")).ToList();
                    WW.BE = db.PPBOMEntry.Where(x => x.FICMOInterID == W.FInterID).Include(x=>x.t_Item).ToList();
                   

            }
            catch
            {

            }
            return View(WW);
          
        }


        //Изменение статусов заданий на производство
        [Culture]
        public ActionResult StatusWorkTable(string ItemNumber = "")
        {
            Session["Dvigenie"] = null;
            DateTime Date = DateTime.Now.AddMonths(-13);
            List<ICMO> Items = new List<ICMO>();
            if (ItemNumber != "")
            {
                Items = db.ICMO.Include(x => x.t_Item).Where(x => x.t_Item.FNumber.Contains(ItemNumber) || x.FBillNo.Contains(ItemNumber) && x.FCheckDate > Date).Include(x => x.t_Department).OrderBy(x => x.FCheckDate).ToList();
            }
            else
            {
                Items = db.ICMO.Include(x => x.t_Item).Where(x => x.FCheckDate > Date && x.FStatus == 1).Include(x => x.t_Department).ToList();
            }

            List<SelectListItem> SL = new List<SelectListItem>();
            SelectListItem I = new SelectListItem();
            I.Value = "0";
            I.Text = Resources.Resource.NeProizvoditsa;
            SL.Add(I);
            I = new SelectListItem();
            I.Value = "1";
            I.Text = Resources.Resource.VRabote;
            SL.Add(I);
            I = new SelectListItem();
            I.Value = "3";
            I.Text = Resources.Resource.Vipolneno;
            SL.Add(I);
            ViewBag.Statuses = SL;
            return View(Items);
        }



        [Culture]
        public ActionResult CompleteWork(int Id)
        {
            DateTime Date = DateTime.Now.AddMonths(-13);
            var Items = db.ICMO.Where(x => x.FInterID == Id).Include(x => x.t_Item).Include(x => x.t_Department).First();
            var Stocks = SearchStorages();
            List<string> Managers = SearchMOL();// SearchMOLByStock(Stocks[0]);//
            int PlanshetId = FindPlanshetId();
            DateTime D = DateTime.Now.Date;

            int UserId = CurrentKDWUserModel().Id;
            if (UserId==0)
            {
              return  RedirectToAction("Login", "Home");
            }



            StarMehWorks SW = new StarMehWorks();
            List<DepartmentToStocks> DS = new List<DepartmentToStocks>();
            try
            {
                DS = db.DepartmentToStocks.Where(x => x.PlanshetId == PlanshetId && x.DepartmentId == Items.FWorkShop.Value).Include(x => x.Stock).Include(x=>x.MOL).ToList();
            }
            catch
            {

            }
            try
            {
                SW = db.StarMehWorks.Where(x => x.WorkId == Id && D == x.DateStart).First();
            }
            catch
            {

            }

            

            if (DS.Count > 0)
            {

               
                Dictionary<int, string> S = new Dictionary<int, string>();
                foreach (DepartmentToStocks ds in DS)
                {
                    try
                    {
                        S.Add(ds.StockId, ds.Stock.FName);
                        if (Managers.Contains(ds.MOL.FName)==false)
                        {
                            Managers.Add(ds.MOL.FName);
                        }
                    }
                    catch
                    {

                    }

                }
                if (S.Count > 0)
                {
                    ViewBag.Stocks = S;
                }
                //  Stocks = DS.Where(x=>x.StockId.conta Stocks.Where(x=>x.Key == )
            }
            else
            {
                ViewBag.Stocks = Stocks;
            }

            ViewBag.MaxVipusk = FindMaxVipusk(Id);
            ViewBag.Department = Items.t_Department;
            ViewBag.ZadanieNaTochkuNugno = SW.QTY;
            ViewBag.ZadanieNaTochkuEst = SW.QTYFact;
            ViewBag.SW = SW;
            ViewBag.Managers = Managers;

            return View(Items);
        }




        public JsonResult SOUTplusCIN(int ToWork, string Manager, decimal QTY, string Liniya, string ToStock)
        {

            string Message = "";
            int StockFromID = 0;
            ICMO Work = new ICMO();
            int ManagerID = 0;
            int UserID = 0;
            int DepartmentID = 0;
            int LiniyaId = 0;
            t_Item Item = new t_Item();
            PPBOMEntry BOMEntry = new PPBOMEntry();
            decimal QTYnaSklade = 0;
            decimal Price = 0;
            string User = FindCurrentUser();
            int StockID = 0;
            int ToStockId = 0;
            int PlanshetId = FindPlanshetId();
            DateTime D = DateTime.Now.Date;
            //Ищем WORK
            try
            {
                Work = db.ICMO.Where(x => x.FInterID == ToWork).Include(x => x.t_Department).Include(x => x.StarMehWorks).First();
            }
            catch
            {

            }
            // Ищем линию
            try
            {
                if (Liniya.Equals("-") == false)
                {
                    LiniyaId = db.t_Item.Where(x => x.FItemClassID == 3004 && x.FName.Equals(Liniya)).Select(x => x.FItemID).First();
                }

            }
            catch
            {

            }
            //Ищем склад для выгрузки пр-ва
            try
            {
                ToStockId = FindStockID(ToStock);
            }
            catch
            {

            }

            //Ищем пользователей
            ManagerID = FindManagerID(Manager);
            UserID = FindUserID(User);

            StarMehWorks StarWork = new StarMehWorks();
            StarWork.Id = 1;
            try
            {
                StarWork = Work.StarMehWorks.Where(x => x.Complete == false && x.PlanshetId == PlanshetId && x.DateStart == D).OrderBy(x => x.Poryadok).First();
            }
            catch
            {
            }

            if (StarWork.QTY < QTY || QTY == 0)
            {
                return Json(Resources.Resource.NomenklaturiNedostatochno);
            }
            //Ищем комплектовку
            KomplektovkaView K = new KomplektovkaView();
            K = FindKomplektovka(GenerateKomplektovkaString(Work.FInterID, StarWork.Id, Work.FWorkShop.Value, StarWork.PlanshetId, QTY));
            List<Komplekt> komplekt = new List<Komplekt>();

            foreach (var bom in K.BOMs)
            {
                decimal QTYOstalos = bom.FQtyScrap * QTY;
                foreach (var nzp in K.NZPs)
                {



                    Komplekt c = new Komplekt();
                    c.ItemId = nzp.ItemId;
                    c.POOrderId = nzp.POOrderId;
                    if (komplekt.Where(x => x.ItemId == c.ItemId && x.POOrderId == c.POOrderId).ToList().Count() > 0)
                    {
                        //Если такой комплект уже есть то нам не надо
                    }
                    else
                    {
                        komplekt.Add(c); //если такого комплекта нет то добавляем парт номер в комплект
                    }

                    if (nzp.ItemId == bom.FItemID)
                    {

                        decimal QTYSpisat = QTYOstalos;
                        if (nzp.QTY >= QTYOstalos)
                        {
                            QTYSpisat = QTYOstalos;
                            QTYOstalos = 0;
                        }
                        else
                        {
                            QTYSpisat = nzp.QTY;
                            QTYOstalos -= nzp.QTY;
                        }

                        if (QTYSpisat > 0)
                        {
                            nzp.QTY -= QTYSpisat;
                            using (var db2 = new KingDeeDB())
                            {
                                //Возвращаем НЗП в движение, чтобы потом с него списалось
                                Dvigenie Dv = db2.Dvigenie.Where(x => x.Id == nzp.DvigenieId).First();
                                EditDvigenie(Dv, nzp.QTY + QTYSpisat);
                            }
                            //Создаем перемещение на пр-во, списываем номенклатуру
                            int DvigId = 0;
                            string Data = SOUTfromQR(nzp.DvigenieId, Work.FInterID, ManagerID, UserID, DepartmentID, QTYOstalos, LiniyaId); // сначала отнимаем
                            try
                            {
                                string[] S = Data.Split(';');
                                DvigId = Convert.ToInt32(S[0]);
                            }
                            catch
                            {

                            }
                            //в итоге вычитаем НЗП
                            try
                            {
                                using (var db2 = new KingDeeDB())
                                {
                                    db2.Entry(nzp).State = EntityState.Modified;
                                    db2.SaveChanges();
                                }
                            }
                            catch
                            {

                            }


                        }
                    }
                }
            }

            //Формируем 1 документ поступления 
            string post = "Error;";
            try
            {
                post = CINfromQR(ToStockId, ManagerID, Work.FInterID, QTY, UserID);
                string[] S = post.Split(';');
                int cin = Convert.ToInt32(S[3]);
                foreach (Komplekt ko in komplekt)
                {
                    try
                    {
                        ko.DvigenieCIN = cin;
                        using (var db2 = new KingDeeDB())
                        {
                            db2.Komplekt.Add(ko);
                            db2.SaveChanges();
                        }
                    }
                    catch
                    {

                    }

                }

            }
            catch
            {

            }

            return Json(post);

        }

        public string CINfromQR(int StockID, int ManagerID, int InterID, decimal FCommitQty, int UserId)
        {
            string Message = "";


            int progress = 0;
            KomplektovkaView K = new KomplektovkaView();

            ProgressHub.SendMessage("Проходим проверки...", progress);
            /*    try
                {
               //     StockID = db.t_Stock.Where(x => x.FName.Equals(Stock)).Select(a => a.FItemID).First();
               //     ManagerID = FindUserID(Manager); //db.t_Item.Include(x=>x.MOL.Where(x => x.FItemClassID == 3 && x.FName.Equals(Manager)).Select(a => a.FItemID).First();

                }
                catch
                {
                    return Json(Resources.Resource.ZapolniteYellow);
                }
            */
            decimal MaxVipusk = 0;
            try
            {
                MaxVipusk = FindMaxVipusk(InterID);

            }
            catch
            {

            }

            var ICMO = db.ICMO.Where(x => x.FInterID == InterID).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Include(x => x.NZP).Include(x => x.StarMehWorks).First();//Строка в заказе поставщику

            if (FCommitQty > ICMO.FQty - ICMO.FCommitQty)
            {
                return "";
            }

            if (FCommitQty == 0)
            {
                return "";
            }

            List<Dvigenie> Dvigs = new List<Dvigenie>();
            try
            {
                Dvigs = db.Dvigenie.Where(x => x.Work.Equals(ICMO.FBillNo) && x.FBillNo.Contains("CIN") == false).ToList();
            }
            catch
            {
                //Если движений нет вообще то создадим новое абстрактное движение

            }
            if (Dvigs.Count == 0)
            {
                Dvigenie D = new Dvigenie();
                D.POOrderId = 1151; //TODO Установить любой другой номер 
                Dvigs.Add(D);
            }

            List<PPBOMEntry> BE = new List<PPBOMEntry>();
            try
            {
                BE = db.PPBOMEntry.Where(x => x.FICMOInterID == InterID).Include(x => x.t_Item).ToList();//Include(x => x.PPBOM).Where(x => x.PPBOM.FHeadSelfY0227.Equals(ICMO.FBillNo)).Include(x=>x.t_Item).ToList();
            }
            catch
            {
                return "";
            }
            int StarId = 1;
            try
            {
                StarId = ICMO.StarMehWorks.Where(x => x.Complete == false).OrderByDescending(x => x.DateStart).Take(1).First().Id;
            }
            catch
            {

            }

            //Ищем НЗП связанного с данным WORK
            // K = FindKomplektovka(GenerateKomplektovkaString(InterID, StarId, ICMO.FWorkShop.Value, FindPlanshetId(), FCommitQty));


            progress = 10;


            var MaxNum = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            //Плюсуем макс номер
            MaxNum.FMaxNum++;
            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 2).First();

            string WIN = "CIN0" + MaxStockID.FCurNo;
            ProgressHub.SendMessage("Создаем поступление..." + WIN, progress);

            //  var POOrder = db.POOrder.Where(x => x.FInterID == InterID).Include(x => x.t_Department).First();//Берем данные из заказа поставщику







            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum.FMaxNum.Value;
            StockBill.FDate = DateTime.Now.Date;
            StockBill.FTranType = 2;
            StockBill.FBillNo = WIN;
            StockBill.FDeptID = ICMO.FWorkShop.Value;
            StockBill.FCheckerID = ManagerID;
            StockBill.FPosterID = ManagerID;
            StockBill.FManagerID = ManagerID;
            StockBill.FSManagerID = ManagerID;
            StockBill.FBillerID = ManagerID;
            StockBill.FFManagerID = ManagerID;
            StockBill.FHookInterID = 0;//Неизвестно что за хук
            StockBill.FPosted = 1;
            StockBill.FCheckSelect = 0;
            StockBill.FROB = 1;
            StockBill.FStatus = 1;
            StockBill.FUpStockWhenSave = false;
            StockBill.FCancellation = false;
            StockBill.FOrgBillInterID = 0;
            StockBill.FBillTypeID = 0;
            StockBill.FPOStyle = 0;
            StockBill.FVchInterID = 0;
            StockBill.FBackFlushed = false;
            StockBill.FUUID = Guid.NewGuid();
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
            StockBill.FMarketingStyle = 12530;
            StockBill.FCheckDate = DateTime.Now;
            StockBill.FExplanation = ICMO.FNote;
            StockBill.FSelTranType = 85;
            StockBill.FChildren = 0;
            StockBill.FHookStatus = 0;
            StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;
            StockBill.FsourceType = 37521;
            StockBill.FPayCondition = 0;
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
            StockBill.FPOMode = 0;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";
            StockBill.FHeadSelfA0143 = ICMO.FNote;
            StockBill.FSCBillNo = ICMO.FBillNo;
            StockBill.FHeadSelfA0233 = ICMO.FNote;
            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum.FMaxNum.Value;

                db.Entry(MaxNum).State = EntityState.Modified;
                db.SaveChanges();


                MaxStockID.FCurNo++;
                MaxStockID.FDesc = "CIN+0" + MaxStockID.FCurNo;
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();
                go = true;
            }
            catch (Exception e)
            {

            }
            progress = 25;
            ProgressHub.SendMessage("Генерируем QR код..." + WIN, progress);


            var QR = new QRTable();
            int QRID = 0;
            int lvl = 0;
            int Parent = 0;
            if (go)//если добавлена шапка то добавляем строки
            {

                //Сначала добавим поступление на склад (Новое)
                lvl = SelectMaxLev(Dvigs[0].POOrderId, ICMO.FItemID, Dvigs[0].ZakazPostavshiku);
                lvl++;
                QRID = SaveQR(ICMO.t_Item, Dvigs[0].ZakazPostavshiku, Dvigs[0].POOrderId, lvl);
                Parent = SaveDvigenie(Dvigs[0].ZakazPostavshiku, WIN, FCommitQty, ICMO.FItemID, Dvigs[0].POOrderId, ICMO.FWorkShop.Value, StockID, QRID, lvl, 0, ICMO.FBillNo);
                //

                foreach (PPBOMEntry E in BE)
                {
                    try
                    {
                        decimal QTYSpisat = E.FQtyScrap * FCommitQty;
                        try
                        {
                            List<Dvigenie> DS = Dvigs.Where(x => x.ItemID == E.FItemID && x.QTYFact > 0).ToList();
                            if (DS.Count > 0)
                            {
                                decimal Ostatok = QTYSpisat;
                                foreach (Dvigenie D in DS)
                                {
                                    if (Ostatok > 0)
                                    {
                                        if (Ostatok <= D.QTYFact)
                                        {
                                            D.QTYFact = Ostatok;
                                            Ostatok = 0;
                                            EditDvigenie(D, D.QTYFact);//Изменяем количество предыдущего

                                            SaveDvigenie(D.ZakazPostavshiku, WIN, D.QTYFact, D.ItemID, D.POOrderId, ICMO.FWorkShop.Value, StockID, D.QRID.Value, D.Lev);//Добавляем новое движение выпуска
                                        }
                                        else
                                        {
                                            Ostatok = Ostatok - D.QTYFact;

                                            SaveDvigenie(D.ZakazPostavshiku, WIN, D.QTYFact, D.ItemID, D.POOrderId, ICMO.FWorkShop.Value, StockID, D.QRID.Value, D.Lev);//Добавляем новое движение выпуска
                                            EditDvigenie(D, 0);//Изменяем количество предыдущего



                                        }
                                    }

                                }
                            }
                            //Правим BOMENtry
                            E.FQty += QTYSpisat;
                            E.FQtyConsume += QTYSpisat;
                            E.FAuxQtyConsume += QTYSpisat;

                            E.FWIPAuxQTY -= QTYSpisat;
                            E.FWIPQTY -= QTYSpisat;
                            if (E.FQty > E.FQtyMust)
                            {
                                E.FQty = E.FQtyMust;
                            }
                            db.Entry(E).State = EntityState.Modified;
                            db.SaveChanges();



                        }
                        catch
                        {

                        }
                    }
                    catch
                    {

                    }
                }


                //Сохраняем QR код
                // string STQ = ICMO.t_Item.FNumber + ";" + ICMO.t_Item.FName + ";" + FCommitQty + ";" + StockBill.FCheckDate.Value.ToString("dd.MM.yyyy") + ";" + ICMO.FBillNo + ";" + ICMO.t_Item.NomenklaturaEnterprise.First().RusName + ";" + StockID + ";";

                progress = 40;
                ProgressHub.SendMessage("Создаем строку поступления" + WIN + "...", progress);


                go = false;

                Entry.FBrNo = "0";
                decimal price = 0;//Рассчитать стоимость материалов

                Entry.FItemID = ICMO.FItemID;
                Entry.FQtyMust = ICMO.FQty;
                Entry.FAuxQtyMust = ICMO.FQty;
                Entry.FQty = FCommitQty;
                Entry.FPrice = price;//TODO сделать расчет стоимости исходя из БОМа?
                Entry.FBatchNo = "";
                decimal Q = Convert.ToDecimal(FCommitQty);
                decimal C = Convert.ToDecimal(price);
                Entry.FAmount = Q * C;
                Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                Entry.FNote = ICMO.FMTONo; // FindModelByItem(ICMO.FItemID); //ICMO.FNote;
                Entry.FUnitID = 257;//Единица измерения прицепить из t_item
                Entry.FAuxPrice = price;
                Entry.FPurchasePrice = Entry.FPurchasePrice; // Закупочная цена с налогом из заказа поставщику
                Entry.FPurchaseAmount = Q * Entry.FPurchasePrice;
                Entry.FAuxQty = FCommitQty;
                Entry.FSourceBillNo = ICMO.FBillNo;
                Entry.FDCStockID = StockID;
                Entry.FSourceInterId = ICMO.FInterID;
                Entry.FOrderBillNo = "";
                Entry.FOrderInterID = 0;
                Entry.FOrderEntryID = 0;
                Entry.FMapNumber = QR.Id.ToString();//Сюда сохраняем QR Id
                if (ICMO.t_Item.FNumber[0].Equals("9"))
                {
                    Entry.FMTONo = ICMO.FMTONo;          //Убран 4.10 Пишем в ремарку, берем из общего котла // Заказ покупателя из WORK 08.06.2023
                }
                else
                {
                    Entry.FMTONo = "";
                }

                Entry.FMapNumber = "";
                Entry.FContractBillNo = "";
                Entry.FICMOBillNo = ICMO.FBillNo;
                //  Entry.FMTONo = "";
                Entry.FItemSize = "";
                Entry.FItemSuite = "";
                Entry.FPositionNo = "";
                Entry.FSEOutBillNo = "";
                Entry.FConfirmMemEntry = "";
                Entry.FItemStatementBillNO = "";
                Entry.FReturnNoticeBillNO = "";
                Entry.FSplitState = "";
                Entry.FICMOInterID = ICMO.FInterID;



                try
                {
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();




                    go = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                }
            }

            if (go)
            {
                Message = "Ok";
                progress = 60;
                ProgressHub.SendMessage("Перемещаем номенклатуру...", progress);
                go = false;
                //Добавляем в остаток на складе
                ICInventory Sklad = new ICInventory();
                int EstLiStrokaNaSklade = 0;
                try
                {
                    EstLiStrokaNaSklade = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == ICMO.FItemID).Count();
                }
                catch
                {

                }
                if (EstLiStrokaNaSklade > 0)
                {

                    try
                    {
                        Sklad = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == ICMO.FItemID).First();
                        Sklad.FQty += FCommitQty;
                    }
                    catch (Exception SE)
                    {
                        Console.WriteLine("Не смогли найти строку на складе " + SE.Message);
                    }

                    try
                    {

                        db.Entry(Sklad).State = EntityState.Modified;
                        db.SaveChanges();
                        go = true;
                    }

                    catch (Exception exx)
                    {
                        Console.WriteLine("Ошибка добавления на склад " + exx.Message);
                    }
                }
                else
                {
                    //Если нет такой строки то добавляем новую
                    Sklad.FQty = FCommitQty;
                    Sklad.FStockID = StockID;
                    Sklad.FItemID = ICMO.FItemID;
                    Sklad.FBrNo = "0";
                    Sklad.FBatchNo = "";
                    Sklad.FKFDate = "";
                    Sklad.FMTONo = "";
                    try
                    {
                        db.ICInventory.Add(Sklad);
                        db.SaveChanges();
                        go = true;
                    }
                    catch (Exception exxx)
                    {
                        Console.WriteLine("Не смогли добавить новую строку поступления на склад ICInventory " + exxx.Message);
                    }
                }


            }




            //Меняем остатки в WORK
            try
            {
                progress = 80;
                ProgressHub.SendMessage("Модифицируем " + ICMO.FBillNo + "...", progress);
                if (ICMO.FCommitQty == 0)
                {
                    ICMO.FStartDate = DateTime.Now;
                    ICMO.FPlanCommitDate = DateTime.Now;

                }
                ICMO.FCommitQty += FCommitQty;
                ICMO.FAuxCommitQty += FCommitQty;
                ICMO.FStockQty += FCommitQty;

                ICMO.FAuxStockQty += FCommitQty;

                if (ICMO.FCommitQty == ICMO.FQty)
                {
                    ICMO.FStatus = 3;
                    ICMO.FFinishDate = DateTime.Now;
                    ICMO.FPlanFinishDate = DateTime.Now;
                }
                db.Entry(ICMO).State = EntityState.Modified;
                db.SaveChanges();

                try
                {
                    StarMehWorks SW = new StarMehWorks();
                    DateTime D = DateTime.Now.Date;
                    SW = db.StarMehWorks.Where(x => x.Complete == false && x.WorkId == InterID && x.DateStart == D).First();
                    SW.QTYFact += FCommitQty;
                    db.Entry(SW).State = EntityState.Modified;
                    db.SaveChanges();
                }
                catch
                {

                }

                ViewBag.Message = "Ok";
                //Двигаем PMC DETAIL
                try
                {

                    ProgressHub.SendMessage("Модифицируем PLANPMCDETAIL...", progress);

                    ICPlan_PMCDetail P = ICMO.ICPlan_PMCDetail.Where(x => x.FItemID == ICMO.FItemID).First();
                    P.FStockQty += FCommitQty;
                    P.FWillInQty -= FCommitQty;
                    db.Entry(P).State = EntityState.Modified;
                    db.SaveChanges();
                }
                catch
                {

                }
            }
            catch (Exception E)
            {
                ViewBag.Message = "Ошибка = " + E.Message;
            }




            return "Ok;" + QRID + ";" + "true" + ";" + Parent.ToString();
        }


        

        public void AddLitnik(int GPId, decimal GPQTY, int ToStockId = 14889, int WorkId=0)
        {
            SaveToDocLog(0, GPId, "Ищем литник", GPQTY, 0, 0, "ЛИТНИК");
            //Ищем литник в списке ГП
            decimal LitnikQTY = 0;
            ICBOMChild BOME = new ICBOMChild();
            try
            {
                 BOME = db.ICBOMChild.Include(x => x.ICBOM).Where(x => x.ICBOM.FItemID == GPId && x.FMaterielType == 376).First();
                //Если нашли литник тогда 
                if (BOME.FQty > 0)
                {
                    ToStockId = 14889; //Литник всегда сохраняем на склад пластика Шипицин 13.03.2023
                    LitnikQTY = BOME.FQty * GPQTY;
                    bool NaSkladDobavleno = PeremeshenieNaSklad(0, ToStockId, BOME.FItemID, LitnikQTY, true);//Плюсуем на склад
                    SaveToDocLog(0, BOME.FItemID, "Сохранили ЛИТНИК на склад ПЛАСТИКА 14889 (зашито) статус=" + NaSkladDobavleno, LitnikQTY, ToStockId, 0, "ЛИТНИК");
                }
            }
            catch (Exception e)
            {
                SaveToDocLog(0, GPId, "Не нашли литник в боме " + e.Message, GPQTY, 0, 0, "ЛИТНИК");
                return;
            }
            ICMO W = new ICMO();
            try
            {
                W = db.ICMO.Where(x => x.FInterID == WorkId).First();
               
            }
            catch
            {

            }
            UsersKDW U = FindCurrentKDWUser();

            var MaxNum = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            //Плюсуем макс номер
            MaxNum.FMaxNum++;

            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 24).First();

            string SOUT = "SOUT" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);




            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum.FMaxNum.Value;
            StockBill.FDate = DateTime.Now.Date;
            StockBill.FTranType = 24;
            StockBill.FBillNo = SOUT;
            StockBill.FDeptID = W.FWorkShop.Value; //Возможно можно перемещать на подразделение!!! 270 есть в таблице
            StockBill.FEmpID = null;
            StockBill.FSupplyID = null;
            StockBill.FCheckerID = U.UserID; // TODO найти пользака текущего. Сделать модуль регистрации пользователей и сопоставить их с кинди
            StockBill.FManagerID = U.MOLId;
            StockBill.FSManagerID = U.MOLId;
            StockBill.FBillerID = U.UserID;
            StockBill.FFManagerID = U.MOLId;
            StockBill.FPosterID = U.UserID;

            StockBill.FHookInterID = 0;//Неизвестно что за хук
            StockBill.FVchInterID = 0;//При перемещении есть записи с указанным ID например 229
            StockBill.FPosted = 1;
            StockBill.FCheckSelect = 0;
            StockBill.FROB = -1;
            StockBill.FStatus = 1;
            StockBill.FUpStockWhenSave = false;
            StockBill.FCancellation = false;
            StockBill.FOrgBillInterID = 0;
            StockBill.FBillTypeID = 0;
            StockBill.FPOStyle = null;
            StockBill.FBackFlushed = false;
            StockBill.FPurposeID = 12000;
            StockBill.FUUID = Guid.NewGuid();
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
            StockBill.FMarketingStyle = 12530;
            StockBill.FRefType = 0;
            StockBill.FCheckDate = DateTime.Now;
            StockBill.FExplanation = "WEB " + U.Name;
            StockBill.FSelTranType = 85;// также может быть 85, 0, 1012510
            StockBill.FChildren = 0;
            StockBill.FHookStatus = 0;
            StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;
            StockBill.FsourceType = 37521;
            StockBill.FPayCondition = 0;
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
            StockBill.FPOMode = 0;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";
            StockBill.FNote = FindModelByItem(BOME.FItemID);
            StockBill.FHeadSelfA0143 = "KingDeeWeb";
            StockBill.FHeadSelfB0435 = W.FNote;




            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum.FMaxNum.Value;

                db.Entry(MaxNum).State = EntityState.Modified;
                db.SaveChanges();


                MaxStockID.FCurNo++;
                MaxStockID.FDesc = "SOUT+" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();
                go = true;
            }
            catch (Exception e)
            {

            }



            var QR = new QRTable();
            int QRID = 0;
            int DvigId = 0;
            bool PrintQR = false;
            if (go)//если добавлена шапка то добавляем строки
            {

              PrintQR = true;
            


                go = false;
                try
                {
                    Entry.FBrNo = "0";

                    Entry.FItemID = BOME.FItemID;
                    Entry.FQtyMust = LitnikQTY;
                    Entry.FAuxQtyMust = LitnikQTY;
                    Entry.FQty = -LitnikQTY;
                    Entry.FPrice = 0; //Цену нужно откуда-то брать при перемещении
                    Entry.FBatchNo = "";
                    decimal Q = Convert.ToDecimal(LitnikQTY);
                    decimal C = Convert.ToDecimal(Entry.FPrice);
                    Entry.FAmount = Q * C;
                    Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                 
                    Entry.FUnitID = 259;//Это единица измерения
                    Entry.FAuxPrice = Entry.FPrice;
                    Entry.FPurchasePrice = Entry.FPurchasePrice; // Закупочная цена с налогом из заказа поставщику
                    Entry.FPurchaseAmount = Q * Entry.FPurchasePrice;
                    Entry.FAuxQty = -LitnikQTY;
                    Entry.FPriceRef = Entry.FPrice;
                    Entry.FAuxPriceRef = Entry.FAuxPrice;
                    Entry.FAmtRef = Q * C;
                    Entry.FSourceBillNo = W.FBillNo;
                    Entry.FICMOBillNo = W.FBillNo;
                    Entry.FICMOInterID = W.FInterID;
                    Entry.FPPBomEntryID = 1;// Work.PPBOM.PPBOMEntry.Where(x => x.FItemID == ItemID).First().FEntryID; //TODO ПЕРЕДЕЛАТЬ
                    Entry.FSourceTranType = 85;
                    Entry.FSCStockID = ToStockId;//откуда
                    Entry.FSourceEntryID = 2;
                    Entry.FDCStockID = 0;//куда
                    Entry.FSourceInterId = W.FInterID;
                    Entry.FPlanAmount = -Entry.FAmount;
                    Entry.FOrderBillNo = "";
                    Entry.FOrderInterID = 0;
                    Entry.FOrderEntryID = 0;
                    Entry.FMapNumber = QR.Id.ToString();//Сюда сохраняем QR Id
                    Entry.FReProduceType = 1059;
                    Entry.FPlanMode = 14036;
                    Entry.FMTONo = W.FMTONo; //  Заказ клиента урезанный из WORK
                    Entry.FNote = W.FNote;//"KingDeeWeb";

                    Entry.FContractBillNo = "";
   
                   
                    Entry.FItemSize = "";
                    Entry.FItemSuite = "";
                    Entry.FPositionNo = "";
                    Entry.FSEOutBillNo = "";
                    Entry.FConfirmMemEntry = "";
                    Entry.FItemStatementBillNO = "";
                    Entry.FReturnNoticeBillNO = "";
                    Entry.FSplitState = "";


                }
                catch
                {
                  
                }

                try
                {
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();

                    go = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                }
            }



        }


        //Работающий выпуск продукции CIN
        public ActionResult CINCorrect(int DvigenieCINId, decimal QTY)
        {
            string Message = "";
            List<string> ResultShow = new List<string>();
            decimal DeltaSpisat = 0;
            Dvigenie DCIN = db.Dvigenie.Where(x => x.Id == DvigenieCINId).First(); //Ищем движение
            ICMO W = db.ICMO.Where(x => x.FBillNo == DCIN.Work).Include(x => x.PPBOMEntry).Include(x => x.NZP).First(); // Ищем WORK с бомом ;
            ICStockBill CIN = db.ICStockBill.Where(x => x.FBillNo == DCIN.FBillNo).First();//Ищем документ
            ICStockBillEntry CINEntry = db.ICStockBillEntry.Where(x => x.FInterID == CIN.FInterID && x.FItemID.Value == DCIN.ItemID).First();//Ищем строку документа для корректировки
            if (DCIN.QTYFact > QTY)
            {
                DeltaSpisat = DCIN.QTYFact - QTY;//Количество к списанию обязательно больше 0 (т.е. можно скорректировать код 

                foreach (var bom in W.PPBOMEntry)
                {

                    //Правим BOMENtry
                    try
                    {
                        decimal SpisatSBoma = Math.Round(DeltaSpisat * bom.FQtyScrap, 3);
                        bom.FQtyConsume -= SpisatSBoma;
                        bom.FAuxQtyConsume -= SpisatSBoma;
                        bom.FWIPAuxQTY += SpisatSBoma;
                        bom.FWIPQTY += SpisatSBoma;
                        db.Entry(bom).State = EntityState.Modified;
                        db.SaveChanges();
                        SaveToDocLog(DCIN.Id, bom.FItemID, "Вернули в БОМ " + SpisatSBoma, QTY, 0, W.FInterID, DCIN.FBillNo);
                        ResultShow.Add("success;Item" + bom.FItemID + " QTY" + SpisatSBoma + "-> PPBOMEntry");
                        try
                        {
                            NZP nzp = W.NZP.Where(x => x.ItemId == bom.FItemID).OrderByDescending(x => x.Id).First();
                            {
                                nzp.QTY += SpisatSBoma;
                                nzp.Active = true;
                                db.Entry(nzp).State = EntityState.Modified;
                                SaveToDocLog(DCIN.Id, bom.FItemID, "Вернули в НЗП NZPID=" + nzp.Id, QTY, 0, W.FInterID, DCIN.FBillNo);
                                ResultShow.Add("success;Item" + bom.FItemID + " QTY" + SpisatSBoma + "-> NZP" + nzp.Id);
                            }
                        }
                        catch (Exception ex)
                        {
                            ResultShow.Add("warning;Item" + bom.FItemID + " QTY" + SpisatSBoma + "-| NZP");
                            SaveToDocLog(DCIN.Id, bom.FItemID, "Не нашли НЗП " + ex.Message, QTY, 0, W.FInterID, DCIN.FBillNo);

                        }




                    }
                    catch (Exception e)
                    {
                        ResultShow.Add("danger;Item" + bom.FItemID + "-| PPBOMEntry");
                        SaveToDocLog(DCIN.Id, bom.FItemID, "Ошибка не смогли сохранить изменения в БОМ " + DCIN.QTYFact + " меньше чем скорректированное кол-во " + QTY, QTY, 0, W.FInterID, DCIN.FBillNo);

                    }


                }
                //Списываем выпуск с ворка
                try
                {
                    using (var db2 = new KingDeeDB())
                    {
                        //Ну раз уж выпуск уменьшился то ворк точно открылся для пр-ва
                        ICMO WORK = db2.ICMO.Where(x => x.FInterID == W.FInterID).First();
                        WORK.FCommitQty -= DeltaSpisat;
                        WORK.FAuxCommitQty -= DeltaSpisat;
                        WORK.FStockQty -= DeltaSpisat;
                        WORK.FAuxStockQty -= DeltaSpisat;
                        WORK.FClosed = 0;
                        WORK.FCloseDate = null;
                        WORK.FStatus = 1;
                        WORK.FCheckerID = null;
                        WORK.FMrpClosed = 0;
                        db2.Entry(WORK).State = EntityState.Modified;
                        db2.SaveChanges();
                        ResultShow.Add("success;QTY" + DeltaSpisat + "-> " + WORK.FBillNo);
                        SaveToDocLog(DCIN.Id, DCIN.ItemID, "Сохранили изменения в " + W.FBillNo + " QTY=" + DeltaSpisat, QTY, 0, W.FInterID, DCIN.FBillNo);


                    }
                }
                catch
                {
                    SaveToDocLog(DCIN.Id, DCIN.ItemID, "Ошибка не смогли сохранить изменения в " + W.FBillNo + " QTY=" + DeltaSpisat, QTY, 0, W.FInterID, DCIN.FBillNo);
                    ResultShow.Add("danger;QTY" + DeltaSpisat + "-| " + W.FBillNo);

                }

                //Уменьшаем СИН
                try
                {
                    CINEntry.FCommitQty -= DeltaSpisat;
                    CINEntry.FAuxCommitQty -= DeltaSpisat;
                    CINEntry.FAuxQty -= DeltaSpisat;
                    CINEntry.FAuxCommitQty -= DeltaSpisat;
                    db.Entry(CINEntry).State = EntityState.Modified;
                    db.SaveChanges();
                    SaveToDocLog(DCIN.Id, DCIN.ItemID, "Сохранили изменения в строке " + CIN.FBillNo + " QTY=" + DeltaSpisat, QTY, 0, W.FInterID, DCIN.FBillNo);
                    ResultShow.Add("success;QTY" + DeltaSpisat + "-> CINEntry");

                }
                catch
                {
                    ResultShow.Add("danger;QTY" + DeltaSpisat + "-| CINEntry");
                    SaveToDocLog(DCIN.Id, DCIN.ItemID, "Ошибка не смогли сохранить изменения в строке " + CIN.FBillNo + " QTY=" + DeltaSpisat, QTY, 0, W.FInterID, DCIN.FBillNo);

                }


                //Уменьшаем склад

                bool NaSkladDobavleno = PeremeshenieNaSklad(CIN.FInterID, DCIN.StockId, W.FItemID, DeltaSpisat, false);//Минусуем на складе

                if (NaSkladDobavleno)
                {
                    SaveToDocLog(DCIN.Id, DCIN.ItemID, "Уменьшили остаток на складе Id=" + DCIN.StockId + " QTY=" + DeltaSpisat, QTY, DCIN.StockId, W.FInterID, DCIN.FBillNo);
                    ResultShow.Add("success;Stock" + DCIN.StockId + " QTY" + DeltaSpisat + "-> ICInventory");

                }
                else
                {
                    ResultShow.Add("danger;Stock" + DCIN.StockId + " QTY" + DeltaSpisat + "-| ICInventory");
                    SaveToDocLog(DCIN.Id, DCIN.ItemID, "Ошибка не смогли уменьшить остаток на складе " + CIN.FBillNo + " QTY=" + DeltaSpisat, QTY, 0, W.FInterID, DCIN.FBillNo);

                }


            }
            else
            {
                ResultShow.Add("danger;Stock" + DCIN.StockId + " QTY" + DeltaSpisat + "-| ICInventory");
                SaveToDocLog(DCIN.Id, DCIN.ItemID, "Ошибка фактический остаток в коде " + DCIN.QTYFact + " меньше или равен скорректированному кол-ву " + QTY, QTY, 0, W.FInterID, DCIN.FBillNo);
                return View(ResultShow);
            }


            //Двигаем PMC DETAIL
            try
            {
                ICPlan_PMCDetail P = db.ICPlan_PMCDetail.Where(x => x.FItemID == W.FItemID).First();
                P.FStockQty -= DeltaSpisat;
                P.FWillInQty += DeltaSpisat;
                db.Entry(P).State = EntityState.Modified;
                db.SaveChanges();
                SaveToDocLog(DCIN.Id, DCIN.ItemID, "Вернули PLANPMCDETAIL " + DCIN.QTYFact , QTY, 0, W.FInterID, DCIN.FBillNo);

            }
            catch (Exception ee)
            {
                SaveToDocLog(DCIN.Id, DCIN.ItemID, "Ошибка не смогли вернуть PLANPMCDETAIL " + ee.Message , QTY, 0, W.FInterID, DCIN.FBillNo);

            }


           
   try
            {
                DCIN.QTYFact -= DeltaSpisat;
              
                db.Entry(DCIN).State = EntityState.Modified;
                db.SaveChanges();
                ResultShow.Add("success;DvigenieId" + DCIN.Id + " QTY" + DeltaSpisat + "-> Dvigenie");
                SaveToDocLog(DCIN.Id, DCIN.ItemID, "Вернули в даижение теперь =" + DCIN.QTYFact, QTY, 0, W.FInterID, DCIN.FBillNo);

            }
            catch (Exception ee)
            {
                ResultShow.Add("danger;DvigenieId" + DCIN.Id + " QTY" + DeltaSpisat + "-| Dvigenie");
                SaveToDocLog(DCIN.Id, DCIN.ItemID, "Ошибка не смогли вернуть в движение " + ee.Message, QTY, 0, W.FInterID, DCIN.FBillNo);

            }



            string Res = "";
          /*  foreach (var x in ResultShow)
            {
                Res += ";" + x;
            }
            Res =Res.Remove(Res.Length - 1);
          */
            return View(ResultShow);
        }

        public string CINfromCompleteWorkNEW(string Stock, string Manager, int InterID, decimal FCommitQty, int StarWorkId =0 )
        {
            UsersKDW U = CurrentKDWUserModel();
            List<NZPNEW> nzps = new List<NZPNEW>();
            ICMO ICMO = new ICMO();
            List<PPBOMEntry> Entrys = new List<PPBOMEntry>();
           // WorkView WV = new WorkView();
            StarMehWorks SW = new StarMehWorks();
            DvigenieNEW NewD = new DvigenieNEW();
            int UserId = U.UserID;
            int MOLId = U.MOLId;

            if (UserId==0)
            {
                return "Error - Login;";
            }
             int ManagerID = FindManagerID(Manager); 

            decimal MaxVipusk =0;
            int StockID = FindStockID(Stock);
            FCommitQty = Math.Round(FCommitQty, 0);


            try
            {
                ICMO = db.ICMO.Where(x => x.FInterID == InterID).First();
            }
            catch
            {
                SaveToDocLog(0, ICMO.FItemID, "Ошибка не смогли найти WORK!" + FCommitQty, FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);
                return Resources.Resource.ErrorNeNaidenWork;
            }

            try
            {
                Entrys = db.PPBOMEntry.Where(x => x.FICMOInterID == ICMO.FInterID).ToList();
            }
            catch
            {
                SaveToDocLog(0, ICMO.FItemID, "Ошибка не смогли найти BOM!" + FCommitQty, FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);
                return Resources.Resource.ErrorNeNaidenBOM;
            }



            SaveToDocLog(0, ICMO.FItemID, "Начинаем выпуск продукции в кол-ве"+ FCommitQty, FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);
            if (FCommitQty<=0)
            {
                SaveToDocLog(0, ICMO.FItemID, "Ошибка слишком маленькое значение для выпуска, необходимо производить выпуск не менее 1 единицы округляем при выпуске!" + FCommitQty, FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);
                return Resources.Resource.ErrorCeloeChislo;
            }

            if (StockID==0)
            {
                SaveToDocLog(0, ICMO.FItemID, "Ошибка не смогли определить склад для выпуска!" + FCommitQty, FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);
                return Resources.Resource.ErrorNeOpredelenSklad;
            }
            if (UserId==0)
            {
                SaveToDocLog(0, ICMO.FItemID, "Ошибка не смогли определить пользователя, перезайдите в программу!" + FCommitQty, FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);
                return Resources.Resource.ErrorNeOpredelenPolzovatel;
            }

            if (ManagerID == 0)
            {
                SaveToDocLog(0, ICMO.FItemID, "Ошибка не смогли определить МОЛа склада, выберите другого!" + FCommitQty, FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);
                return Resources.Resource.ErrorNeOpredelenMOL;
            }

            try
            {
                SW = db.StarMehWorks.Where(x => x.Id == StarWorkId).First();
            }
            catch
            {
                SaveToDocLog(0, ICMO.FItemID, "Ошибка не смогли найти задание старшего мастера!" + FCommitQty, FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);
                return Resources.Resource.ErrorNeNaidenStarWork;
            }

            

            string Resut = "";
           

            try
            {
                nzps = db.NZPNEW.Where(x => x.WorkId == InterID && x.Active == true && x.QTYFact > 0).ToList();
            }
            catch
            {

            }

            //Ищем максимальный выпуск

            MaxVipusk = Math.Round(FindMaxVipusk(InterID,StarWorkId), 0);
            SaveToDocLog(0, ICMO.FItemID, "Максимально можно выпустить " + MaxVipusk + " Максимум в WORK ="+ICMO.FQty+" Выпущено="+ICMO.FCommitQty, FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);
            if (MaxVipusk<FCommitQty)
            {
                SaveToDocLog(0, ICMO.FItemID, "Ошибка Мы столько не сможем выпустить, максимум " + MaxVipusk, FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);
                return Resources.Resource.ErrorMnogo + MaxVipusk;
            }

            if (ICMO.FQty - ICMO.FCommitQty -FCommitQty<0)
            {
                SaveToDocLog(0, ICMO.FItemID, "Ошибка Мы столько не сможем выпустить" + FCommitQty.ToString() + ", максимум в задании WORK=" + (ICMO.FQty - ICMO.FCommitQty).ToString(), FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);
                return Resources.Resource.ErrorMnogo + (ICMO.FQty - ICMO.FCommitQty).ToString();
            }

            /*
            try
            {
                Entrys = db.PPBOMEntry.Where(x => x.FICMOInterID == InterID).Include(x => x.t_Item).ToList();//Include(x => x.PPBOM).Where(x => x.PPBOM.FHeadSelfY0227.Equals(ICMO.FBillNo)).Include(x=>x.t_Item).ToList();
            }
            catch
            {
                return "";
            }
*/

            //Проверяем обеспеченность QR кодов
          /*  foreach (var Item in Entrys.ToList())
            {
                
                try
                {
                    decimal Sum = nzps.Where(x => x.ItemId == Item.FItemID).Sum(x => x.QTYFact);
                    if (Sum<Item.FQty)
                    {//Если в НЗП нет такого количества
                        SaveToDocLog(0, ICMO.FItemID, "Ошибка Сумма по перемещенным QR кодам=" + Sum + "/BOMQTY=" + Item.FQty + " не обеспечена номенклатурой в НЗП ItemId= " + Item.FItemID, FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);

                        return "Сумма по перемещенным QR кодам=" + Sum + "/BOMQTY="+ Item.FQty + " не обеспечена номенклатурой в НЗП ItemId= "+Item.FItemID ;
                    }
                }
                catch
                {

                }
            }
          */

            int StarId = 1;
            if (StarWorkId == 0)
            {
                try
                {
                    StarId = SW.Id;//ICMO.StarMehWorks.Where(x => x.Complete == false).OrderByDescending(x => x.DateStart).Take(1).First().Id;
                }
                catch
                {

                }
            }
            else
            {
                StarId = StarWorkId;
            }

            if (StarId ==0)
            {

                return Resources.Resource.ErrorNeNaidenStarWork;

            }

            SaveToDocLog(0, ICMO.FItemID, "Все проверки успешно пройдены начинаем создание документа", FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);

            //Проверки пройдены начинаем выпуск
            var MaxNum = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            //Плюсуем макс номер
            MaxNum.FMaxNum++;
            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 2).First();

            string WIN = "CIN" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);
            SaveToDocLog(MaxNum.FMaxNum.Value, ICMO.FItemID, "Создаем шапку документа CIN ", FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);

            //  Шапка документа
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum.FMaxNum.Value; //Максимальное значение по счетчику ICMaxNum
            StockBill.FDate = DateTime.Now.Date;       //Дата без времени
            StockBill.FTranType = 2;                   //Тип документа CIN
            StockBill.FBillNo = WIN;                   //Номер документа создается на основании таблицы ICBillNo
            StockBill.FDeptID = ICMO.FWorkShop.Value;  //Подразделение
            StockBill.FCheckerID = U.MOLId;            //Менеджер
            StockBill.FPosterID = UserId;              //Пользователь
            StockBill.FManagerID = U.MOLId;            //Менеджер
            StockBill.FSManagerID = U.MOLId;           //Менеджер
            StockBill.FBillerID = UserId;              //Пользователь
            StockBill.FFManagerID = U.MOLId;           //Менеджер
            StockBill.FHookInterID = 0;                //Мы не знаем что это за хук, скорее всего связь с дочерним документом требуется пояснение
            StockBill.FPosted = 1;                     //Опубликован / проведен
            StockBill.FROB = 1;                        //Если -1 то сторно
            StockBill.FStatus = 1;                     //Статус  возможно здесь нужно поставить 3? Если да то в какой момент
            StockBill.FUpStockWhenSave = false;        //скопировано
            StockBill.FCancellation = false;           //Отменен или нет мы ставим нет
            StockBill.FOrgBillInterID = 0;             //скопировано
            StockBill.FBillTypeID = 0;                 //скопировано
            StockBill.FPOStyle = 252;                  //скопировано
            StockBill.FBackFlushed = false;            //скопировано
            StockBill.FUUID = Guid.NewGuid();          //Генерируем GUID
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks); //Дата операции
            StockBill.FMarketingStyle = 12530;         //Скопировано
            StockBill.FCheckDate = DateTime.Now.Date;  //Дата без времени
            StockBill.FExplanation = "WEB " + U.Name;    //Наша пометка
            StockBill.FSelTranType = 85;               //Тип документа скопирован
            StockBill.FChildren = 0;                   //Количество детей у документа по умолчанию 0
            StockBill.FHookStatus = 0;                 //Статус захвата ставим 0 
            StockBill.FEnterpriseID = 0;               //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;                //Скопировано
            StockBill.FsourceType = 37521;             //Скопировано
            StockBill.FPayCondition = 1000;            //Скопировано
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM"); //Дата месяц ставится только в наших документах 
            StockBill.FPOMode = 36680;                 //Скопировано
            StockBill.FHeadSelfA0143 = "KingDeeWeb";   //Наша пометка
            StockBill.FCheckSelect = 0;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";

            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum.FMaxNum.Value;

                db.Entry(MaxNum).State = EntityState.Modified;
                db.SaveChanges();

                SaveToDocLog(StockBill.FInterID, ICMO.FItemID, "Создали шапку документа CIN " + StockBill.FBillNo, FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);
                MaxStockID.FCurNo++;
                MaxStockID.FDesc = "CIN+0" + MaxStockID.FCurNo;
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();
                SaveToDocLog(StockBill.FInterID, ICMO.FItemID, "Отредактировали счетчик CIN " + MaxStockID.FCurNo.Value, FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);

                bool BC = BillCodeDvig(2, MaxStockID.FCurNo.Value);
                SaveToDocLog(0, 0, "Сдвинут счетчик " + WIN + " статус=" + BC.ToString(), 0, 0, 0, WIN);
                go = true;
            }
            catch (Exception e)
            {

            }

            decimal Price = 0;
            //Генерируем новый QR код на выпуск
            NewD =  CreateNewQRCode(StockBill.FBillNo, ICMO.FItemID, StockID, FCommitQty, StockBill.FBillNo, 0, 0, "", 0, 0, 0, false, false, ICMO.FInterID,0,ICMO.FMTONo);
            //Начинаем выпуск построчно
      


            foreach (var E in Entrys.ToList())
            {
                decimal QTYSpisat = E.FQtyScrap * FCommitQty;
                decimal OstalosSpisat = QTYSpisat;
                decimal Spisano = 0;
              
                foreach (var n in nzps.Where(x => x.QTYFact > 0).ToList())
                {
                    try
                    {
                       
                        if (n.QTYFact >= OstalosSpisat)
                        {
                            n.QTYFact = n.QTYFact- OstalosSpisat;
                            Spisano += OstalosSpisat;
                          
                            OstalosSpisat = 0;
                           
                        }
                        else
                        {
                           // QTYSpisat -= n.QTYFact;
                            Spisano += n.QTYFact;

                            OstalosSpisat = OstalosSpisat - n.QTYFact;
                            n.QTYFact = 0;
                            
                        }
                 
                      //  Price +=Spisano* 
                        //сохраняем изменения в бд
                        try
                        {

                            db.Entry(n).State = EntityState.Modified;
                            db.SaveChanges();
                            SaveToDocLog(0, E.FItemID, "Списали из NZPNEW количество =" + QTYSpisat, E.FWIPQTY.Value, 0, E.FICMOInterID, ICMO.FBillNo);
                          
                        }
                        catch
                        {
                            SaveToDocLog(StockBill.FInterID, ICMO.FItemID, "Ошибка не смогли отредактировать значение в NZPNew =" + n.Id+" QTYFact ="+n.QTYFact, FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);

                        }
                    }
                    catch
                    {

                    }
                    if (OstalosSpisat <= 0)
                    {
                        break;
                    }

                 

                }

              //  E.FQtyConsume += QTYSpisat;
             //   E.FAuxQtyConsume += QTYSpisat;
                E.FWIPAuxQTY = E.FWIPAuxQTY - QTYSpisat;
                E.FWIPQTY = E.FWIPQTY - QTYSpisat;
                decimal QTYSpisano = 0;
                if (E.FQty > E.FQtyMust)
                {
                    E.FQty = E.FQtyMust;
                }
                try
                {
                    db.Entry(E).State = EntityState.Modified;
                    db.SaveChanges();
                    SaveToDocLog(0, E.FItemID, "Списали из НЗП FWIPQTY,FWIPAuxQTY количество =" + QTYSpisat, E.FWIPQTY.Value, 0, E.FICMOInterID, ICMO.FBillNo);
                    SaveToDocLog(0, E.FItemID, "Сохранили значение =" + QTYSpisat, E.FWIPQTY.Value, 0, E.FICMOInterID, ICMO.FBillNo);
                    SaveToWORKLog(WIN, QTYSpisat, E.FItemID, E.t_Item.FNumber, E.ICMO.FBillNo, E.FQty, E.FQtyMust, E.FQtyPick, E.FStockQty, E.FWIPQTY.Value, E.FQtySupply);
                }
                catch
                {
                    SaveToDocLog(0, E.FItemID, "Ошибка при редактировании строки BOM =" + QTYSpisat, E.FWIPQTY.Value, 0, E.FICMOInterID, ICMO.FBillNo);
                }


            }

            string WorkShop = "";
            try
            {
                WorkShop = db.t_Item.Where(x => x.FItemID == ICMO.FWorkShop.Value).Select(x => x.FName).First();
            }
            catch
            {

            }
            decimal Q = Convert.ToDecimal(FCommitQty);
            decimal C = Convert.ToDecimal(Price);



            Entry.FItemID = ICMO.FItemID; //Id Номенклатуры

            Entry.FQtyMust = ICMO.FQty; //Выпущенное количество
            Entry.FAuxQtyMust = ICMO.FQty;
            Entry.FQty = FCommitQty;
            Entry.FAuxQty = FCommitQty;

            Entry.FPrice = Price;//Расчетная цена 
            Entry.FAuxPrice = Price;

            Entry.FAmount = Q * C; //Цена * Количество
            Entry.FEntryID = 1;//Номер строки в документе (всегда 1)
            Entry.FNote = WorkShop + "KingDeeWeb"; // Пометка о том что документ проведен через нашу систему
            Entry.FUnitID = 257;//Единица измерения выпуск всегда в штуках

            Entry.FPurchasePrice = 0; // Закупочная цена с налогом из заказа поставщику
            Entry.FPurchaseAmount = Q * Entry.FPurchasePrice; //Закупочная цена с налогом * Количество

            Entry.FDCStockID = StockID; // Склад поступления

            Entry.FMapNumber = "NEWD="+NewD.Id.ToString();//Сюда сохраняем QR Id
            Entry.FPlanMode = 14036; //Этот номер скопирован
            Entry.FSourceTranType = 85;//Это тип документа ICMO

            Entry.FICMOBillNo = ICMO.FBillNo; // Ссылка на WORK
            Entry.FICMOInterID = ICMO.FInterID;
            Entry.FSourceBillNo = ICMO.FBillNo;
            Entry.FSourceInterId = ICMO.FInterID;
            if (ICMO.t_Item.FNumber[0].Equals("9"))
            {
                Entry.FMTONo = ICMO.FMTONo;          //Убран 4.10 Пишем в ремарку, берем из общего котла // Заказ покупателя из WORK 08.06.2023
            }
            else
            {
                Entry.FMTONo = "";
            }
            Entry.FNote = ICMO.FMTONo;//"KingDeeWeb";
            Entry.FBrNo = "0";

            Entry.FBatchNo = "";

            Entry.FContractBillNo = "";
            Entry.FOrderBillNo = "";
            Entry.FOrderInterID = 0;
            Entry.FOrderEntryID = 0;
            Entry.FItemSize = "";
            Entry.FItemSuite = "";
            Entry.FPositionNo = "";
            Entry.FSEOutBillNo = "";
            Entry.FConfirmMemEntry = "";
            Entry.FItemStatementBillNO = "";
            Entry.FReturnNoticeBillNO = "";
            Entry.FSplitState = "";




            try
            {
                db.ICStockBillEntry.Add(Entry);
                db.SaveChanges();
                SaveToDocLog(StockBill.FInterID, ICMO.FItemID, "Сохранили строку документа CIN ", FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);

             

                go = true;
            }
            catch (Exception ex)
            {
                Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                SaveToDocLog(StockBill.FInterID, ICMO.FItemID, "Ошибка Не смогли добавить строку " + ex.Message, FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
            }

            bool NaSkladDobavleno = false;

            //Добавляем выпуск на склад
            if (ICMO.t_Item.FNumber[0].Equals("9"))
            {
                Entry.FMTONo = ICMO.FMTONo;          //Убран 4.10 Пишем в ремарку, берем из общего котла // Заказ покупателя из WORK 08.06.2023
                PeremeshenieNaSklad(MaxNum.FMaxNum.Value, StockID, ICMO.FItemID, FCommitQty, true, ICMO.FMTONo);//Плюсуем на склад
            }
            else
            {
                Entry.FMTONo = "";
                PeremeshenieNaSklad(MaxNum.FMaxNum.Value, StockID, ICMO.FItemID, FCommitQty, true, "",true);//Плюсуем на склад в общий котел если не ГП
            }
            

            
            SaveToDocLog(StockBill.FInterID, ICMO.FItemID, "Сохранили поступление на склад статус=" + NaSkladDobavleno, FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
            AddLitnik(ICMO.FItemID, FCommitQty, StockID, ICMO.FInterID);//Добавляем литник если он есть при производстве



            //Меняем остатки в WORK
            try
            {


                if (ICMO.FCommitQty == 0)
                {
                    ICMO.FStartDate = DateTime.Now.Date;
                    ICMO.FPlanCommitDate = DateTime.Now.Date;

                }
                ICMO.FCommitQty += FCommitQty;
                ICMO.FAuxCommitQty += FCommitQty;
                ICMO.FStockQty += FCommitQty;
                ICMO.FAuxStockQty += FCommitQty;


                if (ICMO.FCommitQty >= ICMO.FQty)
                {
                    ICMO.FStatus = 3;
                    ICMO.FFinishDate = DateTime.Now.Date;
                    ICMO.FPlanFinishDate = DateTime.Now.Date;
                    ICMO.FCheckerID = U.MOLId; //Добавлено 02/03/2023 после исправления ошибки Антиворк Мол закрывающий ворк из производства
                    ICMO.FCloseDate = DateTime.Now.Date;
                    ICMO.FMrpClosed = 1;
                    SaveToDocLog(NewD.Id, ICMO.FItemID, "Закрыли работу так как выпущено все ICMO ", FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
                }
                db.Entry(ICMO).State = EntityState.Modified;
                db.SaveChanges();
                SaveToDocLog(NewD.Id, ICMO.FItemID, "Сохранили выпуск в ICMO ", FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
                try
                {
                    StarMehWorks SMW = new StarMehWorks();
                    DateTime D = DateTime.Now.Date;
                    SMW = db.StarMehWorks.Where(x => x.Id == StarId && x.Complete == false && x.WorkId == InterID ).First();
                    SMW.QTYFact += FCommitQty;
                    db.Entry(SW).State = EntityState.Modified;
                    db.SaveChanges();
                    SaveToDocLog(NewD.Id, ICMO.FItemID, "Сохранили выпуск в работе старшего мастера ", FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
                }
                catch
                {
                    SaveToDocLog(NewD.Id, ICMO.FItemID, "Ошибка. Не смогли сохранить выпуск в работе старшего мастера ", FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
                }

                ViewBag.Message = "Ok";
                //Двигаем PMC DETAIL
                try
                {
                    ICPlan_PMCDetail P = ICMO.ICPlan_PMCDetail.Where(x => x.FItemID == ICMO.FItemID).First();
                    P.FStockQty += FCommitQty;
                    P.FWillInQty -= FCommitQty;
                    db.Entry(P).State = EntityState.Modified;
                    db.SaveChanges();
                    SaveToDocLog(NewD.Id, ICMO.FItemID, "Изменили  ICPlan_PMCDetail", FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
                }
                catch
                {
                    SaveToDocLog(NewD.Id, ICMO.FItemID, "Ошибка. Не смогли сохранить ICPlan_PMCDetail ", FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
                }
            }
            catch (Exception E)
            {
                ViewBag.Message = "Ошибка = " + E.Message;
                SaveToDocLog(NewD.Id, ICMO.FItemID, "Ошибка в сохранении WORK" + E.Message, FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
            }
            //Добавляем записи в таблицу комплекта  


             return "Ok;" + NewD.Id + ";" + "true" + ";";
        }


        //Работающий выпуск продукции CIN
        public string CINfromCompleteWork(string Stock, string Manager, int InterID, decimal FCommitQty, int StarWorkId=0)
        {
            string Message = "";
            int progress = 0;
            KomplektovkaView K = new KomplektovkaView();
            int StockID = 0;
            int ManagerID = 0;
            UsersKDW U = CurrentKDWUserModel();
            int UserId =U.UserID;
            SaveToDocLog(0, 0, "Начат выпуск CIN проходим проверки ", FCommitQty, 0, InterID, "");

                try
                {
                    StockID = FindStockID(Stock);//db.t_Stock.Where(x => x.FName.Equals(Stock)).Select(a => a.FItemID).First();
                    ManagerID = FindManagerID(Manager); //db.t_Item.Include(x=>x.MOL.Where(x => x.FItemClassID == 3 && x.FName.Equals(Manager)).Select(a => a.FItemID).First();

                }
                catch
                {
                //    return Json(Resources.Resource.ZapolniteYellow);
                }
            
            if (FCommitQty<0)
            {
                SaveToDocLog(0, 0, Resources.Resource.NomenklaturiNedostatochno + FCommitQty.ToString() + " < 0!", FCommitQty, 0, 0, "");

                return Resources.Resource.NomenklaturiNedostatochno  + FCommitQty.ToString()+ " < 0!";

            }

            var ICMO = db.ICMO.Where(x => x.FInterID == InterID).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Include(x => x.NZP).Include(x => x.StarMehWorks).First();//Строка в заказе поставщику

            decimal MaxVipusk = 0;
             MaxVipusk =Math.Round(FindMaxVipusk(InterID,StarWorkId),0);
            if (MaxVipusk< FCommitQty)
            {
                SaveToDocLog(0, ICMO.FItemID, "Ошибка попытка выпустить больше чем возможно Макс выпуск ="+MaxVipusk+" Выпускаем = "+ FCommitQty, FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
                return Resources.Resource.NomenklaturiNedostatochno + MaxVipusk.ToString()+" < "+FCommitQty.ToString() ;
            }    

            if (FCommitQty > Math.Round(ICMO.FQty - ICMO.FCommitQty,0))
            {
                SaveToDocLog(0, ICMO.FItemID, "Ошибка попытка выпустить больше чем в задании на производство Макс выпуск =" + (ICMO.FQty - ICMO.FCommitQty).ToString() + " Выпускаем = " + FCommitQty, FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
                return Resources.Resource.ZadanieNaProizvodstvo +" < "+ FCommitQty.ToString();
            }

            if (FCommitQty == 0)
            {
                SaveToDocLog(0, ICMO.FItemID, "Ошибка попытка выпустить ноль = " + FCommitQty, FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);

                return Resources.Resource.NomenklaturiNedostatochno +  " = 0" ;
            }

            List<Dvigenie> Dvigs = new List<Dvigenie>();
            try
            {
                Dvigs = db.NZP.Where(x => x.WorkId == ICMO.FInterID&&x.Active==true&&x.QTY>0).Include(x => x.Dvigenie).Select(x => x.Dvigenie).ToList();
                //  Dvigs = db.Dvigenie.Where(x => x.Work.Equals(ICMO.FBillNo) && x.FBillNo.Contains("CIN") == false).ToList();
            }
            catch
            {
             
                //Если движений нет вообще то создадим новое абстрактное движение

            }
            if (Dvigs.Count == 0)
            {
                Dvigenie D = new Dvigenie();
                D.POOrderId = 1151; //TODO Установить любой другой номер 
                D.ZakazPostavshiku = "POORD000022";
                Dvigs.Add(D);
            }

            List<NZPNEW> DvigsNEW = new List<NZPNEW>();
            try
            {
                DvigsNEW = db.NZPNEW.Where(x => x.WorkId == ICMO.FInterID && x.Active == true && x.QTYFact > 0).ToList();
                //  Dvigs = db.Dvigenie.Where(x => x.Work.Equals(ICMO.FBillNo) && x.FBillNo.Contains("CIN") == false).ToList();
            }
            catch
            {

                //Если движений нет вообще то создадим новое абстрактное движение

            }

            List<PPBOMEntry> BE = new List<PPBOMEntry>();
            try
            {
                BE = db.PPBOMEntry.Where(x => x.FICMOInterID == InterID).Include(x => x.t_Item).ToList();//Include(x => x.PPBOM).Where(x => x.PPBOM.FHeadSelfY0227.Equals(ICMO.FBillNo)).Include(x=>x.t_Item).ToList();
            }
            catch
            {
                return "";
            }
            int StarId = 1;
            if (StarWorkId == 0)
            {
                try
                {
                    StarId = ICMO.StarMehWorks.Where(x => x.Complete == false).OrderByDescending(x => x.DateStart).Take(1).First().Id;
                }
                catch
                {

                }
            }
            else
            {
                StarId = StarWorkId;
            }
            //Ищем НЗП связанного с данным WORK
            // K = FindKomplektovka(GenerateKomplektovkaString(InterID, StarId, ICMO.FWorkShop.Value, FindPlanshetId(), FCommitQty));


            progress = 10;


            var MaxNum = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            //Плюсуем макс номер
            MaxNum.FMaxNum++;
            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 2).First();

            string WIN = "CIN" + DopolnitNumber(MaxStockID.FCurNo.Value,6);
            ProgressHub.SendMessage("Создаем поступление..." + WIN, progress);
            SaveToDocLog(MaxNum.FMaxNum.Value, ICMO.FItemID, "Создаем шапку документа CIN ", FCommitQty,StockID, ICMO.FInterID, ICMO.FBillNo);
            //  var POOrder = db.POOrder.Where(x => x.FInterID == InterID).Include(x => x.t_Department).First();//Берем данные из заказа поставщику







            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  Шапка документа
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum.FMaxNum.Value; //Максимальное значение по счетчику ICMaxNum
            StockBill.FDate = DateTime.Now.Date;       //Дата без времени
            StockBill.FTranType = 2;                   //Тип документа CIN
            StockBill.FBillNo = WIN;                   //Номер документа создается на основании таблицы ICBillNo
            StockBill.FDeptID = ICMO.FWorkShop.Value;  //Подразделение
            StockBill.FCheckerID = U.MOLId;            //Менеджер
            StockBill.FPosterID = UserId;              //Пользователь
            StockBill.FManagerID = U.MOLId;            //Менеджер
            StockBill.FSManagerID = U.MOLId;           //Менеджер
            StockBill.FBillerID = UserId;              //Пользователь
            StockBill.FFManagerID = U.MOLId;           //Менеджер
            StockBill.FHookInterID = 0;                //Мы не знаем что это за хук, скорее всего связь с дочерним документом требуется пояснение
            StockBill.FPosted = 1;                     //Опубликован / проведен
            StockBill.FROB = 1;                        //Если -1 то сторно
            StockBill.FStatus = 1;                     //Статус  возможно здесь нужно поставить 3? Если да то в какой момент
            StockBill.FUpStockWhenSave = false;        //скопировано
            StockBill.FCancellation = false;           //Отменен или нет мы ставим нет
            StockBill.FOrgBillInterID = 0;             //скопировано
            StockBill.FBillTypeID = 0;                 //скопировано
            StockBill.FPOStyle = 252;                  //скопировано
            StockBill.FBackFlushed = false;            //скопировано
            StockBill.FUUID = Guid.NewGuid();          //Генерируем GUID
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks); //Дата операции
            StockBill.FMarketingStyle = 12530;         //Скопировано
            StockBill.FCheckDate = DateTime.Now.Date;  //Дата без времени
            StockBill.FExplanation = "WEB "+U.Name;    //Наша пометка
            StockBill.FSelTranType = 85;               //Тип документа скопирован
            StockBill.FChildren = 0;                   //Количество детей у документа по умолчанию 0
            StockBill.FHookStatus = 0;                 //Статус захвата ставим 0 
            StockBill.FEnterpriseID = 0;               //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;                //Скопировано
            StockBill.FsourceType = 37521;             //Скопировано
            StockBill.FPayCondition = 1000;            //Скопировано
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM"); //Дата месяц ставится только в наших документах 
            StockBill.FPOMode = 36680;                 //Скопировано
            StockBill.FHeadSelfA0143 = "KingDeeWeb";   //Наша пометка
            StockBill.FCheckSelect = 0; 
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";

            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum.FMaxNum.Value;

                db.Entry(MaxNum).State = EntityState.Modified;
                db.SaveChanges();

                SaveToDocLog(StockBill.FInterID, ICMO.FItemID, "Создали шапку документа CIN "+StockBill.FBillNo , FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);
                MaxStockID.FCurNo++;
                MaxStockID.FDesc = "CIN+0" + MaxStockID.FCurNo;
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();
                SaveToDocLog(StockBill.FInterID, ICMO.FItemID, "Отредактировали счетчик CIN " + MaxStockID.FCurNo.Value, FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);
                go = true;
            }
            catch (Exception e)
            {

            }
       

            var QR = new QRTable();
            int QRID = 0;
            int lvl = 0;
            int Parent = 0;

            KomplektovkaView Komplektovka = FindKomplektovka(ICMO.FInterID);
            if (go)//если добавлена шапка то добавляем строки
            {

                //Сначала добавим поступление на склад (Новое)
                lvl = SelectMaxLev(Dvigs[0].POOrderId, ICMO.FItemID, Dvigs[0].ZakazPostavshiku);
                lvl++;
                QRID = SaveQR(ICMO.t_Item,Dvigs[0].ZakazPostavshiku,  Dvigs[0].POOrderId, lvl);
                SaveToDocLog(MaxNum.FMaxNum.Value, ICMO.FItemID, "Сгенерировали QR код "+ QRID, FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);
                Parent = SaveDvigenie(Dvigs[0].ZakazPostavshiku, WIN, FCommitQty, ICMO.FItemID, Dvigs[0].POOrderId,ICMO.FWorkShop.Value, StockID, QRID, lvl, 0, ICMO.FBillNo);
                //

                SaveToDocLog(MaxNum.FMaxNum.Value, ICMO.FItemID, "Сохранили движение "+ Parent, FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);



                decimal Price = 0;
                decimal PriceSNalogom = 0;
                foreach (PPBOMEntry E in BE)
                {
                    try
                    {
                        decimal QTYSpisat = E.FQtyScrap * FCommitQty;
                        try
                        {
                            List<Dvigenie> DS = Dvigs.Where(x => x.ItemID == E.FItemID && x.QTYFact > 0).ToList();
                            if (DS.Count > 0)
                            {
                                decimal Ostatok = QTYSpisat;
                            
                                foreach (Dvigenie D in DS)
                                {
                                    if (Ostatok > 0)
                                    {
                                        NZP nzp = new NZP();
                                        //Вычитаем остатки из таблицы НЗП
                                        try
                                        {
                                          nzp=  Komplektovka.NZPs.Where(x => x.DvigenieId == D.Id).First();
                                        }
                                        catch
                                        {

                                        }
                                        decimal PriceNZP = 0;
                                        decimal PriceSNalogomNZP = 0;
                                        try
                                        {
                                            ZakazPostavshiku Z = new ZakazPostavshiku();
                                            Z.FindEntries(D.POOrderId, D.ZakazPostavshiku, 0, D.ItemID.ToString());
                                            PriceNZP = Z.SelectedEntry.PurchasePrice; //Закупочная цена с налогом
                                            PriceSNalogomNZP = Z.SelectedEntry.PurchasePrice; //Закупочная цена с налогом
                                        }
                                        catch
                                        {

                                        }

                                        int CINId = 0;
                                        Komplekt ko= new Komplekt();
                                        if (Ostatok <= D.QTYFact)
                                        {
                                            decimal QTYNewDvig = Ostatok;
                                            D.QTYFact -= Ostatok;
                                            nzp.QTY -= Ostatok;
                                            Ostatok = 0;
                                            EditNZP(nzp, nzp.QTY);
                                            if (PriceNZP>0) //Добавляем к цене изделия
                                            {
                                                Price += PriceNZP * Ostatok;
                                            }
                                            if (PriceSNalogomNZP > 0) //Добавляем к цене изделия
                                            {
                                                PriceSNalogom += PriceSNalogom * Ostatok;
                                            }
                                            // EditDvigenie(D, D.QTYFact);//Изменяем количество предыдущего

                                            //   CINId = SaveDvigenie(Dvigs[0].ZakazPostavshiku,WIN, QTYNewDvig, D.ItemID, D.POOrderId,ICMO.FWorkShop.Value, StockID, D.QRID.Value, D.Lev);//Добавляем новое движение выпуска


                                        }
                                        else
                                        {
                                            decimal QTYNewDvig = D.QTYFact;
                                            Ostatok = Ostatok - D.QTYFact;
                                            nzp.QTY = 0;
                                            nzp.Active = false;
                                            EditNZP(nzp, nzp.QTY);
                                            if (PriceNZP > 0) //Добавляем к цене изделия
                                            {
                                                Price += PriceNZP * D.QTYFact;
                                            }
                                            if (PriceSNalogomNZP > 0) //Добавляем к цене изделия
                                            {
                                                PriceSNalogom += PriceSNalogom * D.QTYFact;
                                            }
                                            //  CINId =  SaveDvigenie(Dvigs[0].ZakazPostavshiku,WIN, QTYNewDvig, D.ItemID, D.POOrderId, ICMO.FWorkShop.Value, StockID, D.QRID.Value, D.Lev);//Добавляем новое движение выпуска
                                            //    EditDvigenie(D, 0);//Изменяем количество предыдущего



                                        }
                                       
                                        ko.DvigenieCIN = Parent;//Привязываем Комплект к движению
                                        ko.ItemId = D.ItemID;
                                        ko.POOrderId = D.POOrderId;
                                   

                                        try
                                        {

                                            db.Komplekt.Add(ko);
                                            db.SaveChanges();
                                            SaveToDocLog(MaxNum.FMaxNum.Value, ICMO.FItemID, "Комплект собран OrderId=" + ko.POOrderId+" ItemId="+ko.ItemId, FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);
                                            // db.Entry(nzp).State = EntityState.Modified;
                                            //  db.SaveChanges();
                                        }
                                        catch (Exception e)
                                        {
                                            SaveToDocLog(MaxNum.FMaxNum.Value, ICMO.FItemID, "Ошибка не смогли записать комплект " + e.Message, FCommitQty, StockID, ICMO.FInterID, ICMO.FBillNo);
                                        }

                                    }

                                }
                            }
                            //Правим BOMENtry
                        
                            E.FQtyConsume += QTYSpisat;
                            E.FAuxQtyConsume += QTYSpisat;
                            E.FWIPAuxQTY -= QTYSpisat;
                            E.FWIPQTY -= QTYSpisat;
                            SaveToDocLog(Parent, E.FItemID, "Списали из НЗП FWIPQTY,FWIPAuxQTY количество ="+ QTYSpisat, E.FWIPQTY.Value, 0, E.FICMOInterID, ICMO.FBillNo);
                            if (E.FQty > E.FQtyMust)
                            {
                                E.FQty = E.FQtyMust;
                            }
                            db.Entry(E).State = EntityState.Modified;
                            db.SaveChanges();
                            SaveToDocLog(Parent, E.FItemID, "Сохранили значение =" + QTYSpisat, E.FWIPQTY.Value, 0, E.FICMOInterID, ICMO.FBillNo);



                        }
                        catch
                        {

                        }
                    }
                    catch
                    {

                    }
                }
             

                //Сохраняем QR код
                // string STQ = ICMO.t_Item.FNumber + ";" + ICMO.t_Item.FName + ";" + FCommitQty + ";" + StockBill.FCheckDate.Value.ToString("dd.MM.yyyy") + ";" + ICMO.FBillNo + ";" + ICMO.t_Item.NomenklaturaEnterprise.First().RusName + ";" + StockID + ";";


                go = false;

                Entry.FBrNo = "0";
                //decimal price = 0;//Рассчитать стоимость материалов
                string WorkShop = "";
                try
                {
                   WorkShop =  db.t_Item.Where(x => x.FItemID == ICMO.FWorkShop.Value).Select(x => x.FName).First();
                }
                catch
                {

                }
                decimal Q = Convert.ToDecimal(FCommitQty);
                decimal C = Convert.ToDecimal(Price);



                Entry.FItemID = ICMO.FItemID; //Id Номенклатуры

                Entry.FQtyMust = ICMO.FQty; //Выпущенное количество
                Entry.FAuxQtyMust = ICMO.FQty;
                Entry.FQty = FCommitQty;
                Entry.FAuxQty = FCommitQty;

                Entry.FPrice = Price;//Расчетная цена 
                Entry.FAuxPrice = Price;

                Entry.FAmount = Q * C; //Цена * Количество
                Entry.FEntryID = 1;//Номер строки в документе (всегда 1)
                Entry.FUnitID = 257;//Единица измерения выпуск всегда в штуках
  
                Entry.FPurchasePrice = PriceSNalogom; // Закупочная цена с налогом из заказа поставщику
                Entry.FPurchaseAmount = Q * Entry.FPurchasePrice; //Закупочная цена с налогом * Количество

                Entry.FDCStockID = StockID; // Склад поступления

                Entry.FMapNumber = QR.Id.ToString();//Сюда сохраняем QR Id
                Entry.FPlanMode = 14036; //Этот номер скопирован
                Entry.FSourceTranType = 85;//Это тип документа ICMO

                Entry.FICMOBillNo = ICMO.FBillNo; // Ссылка на WORK
                Entry.FICMOInterID = ICMO.FInterID;
                Entry.FSourceBillNo = ICMO.FBillNo;
                Entry.FSourceInterId = ICMO.FInterID;
                Entry.FMTONo = ICMO.FMTONo; //  Заказ клиента урезанный из WORK
                Entry.FNote = ICMO.FNote;//"KingDeeWeb";


                Entry.FBatchNo = "";
                Entry.FContractBillNo = "";
                Entry.FOrderBillNo = "";
                Entry.FOrderInterID = 0;
                Entry.FOrderEntryID = 0;
                Entry.FMTONo = "";
                Entry.FItemSize = "";
                Entry.FItemSuite = "";
                Entry.FPositionNo = "";
                Entry.FSEOutBillNo = "";
                Entry.FConfirmMemEntry = "";
                Entry.FItemStatementBillNO = "";
                Entry.FReturnNoticeBillNO = "";
                Entry.FSplitState = "";




                try
                {
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();
                    SaveToDocLog(Parent, ICMO.FItemID, "Сохранили строку документа CIN " , FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);



                    go = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                    SaveToDocLog(Parent, ICMO.FItemID, "Ошибка Не смогли добавить строку " + ex.Message, FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
                }
            }

            if (go)
            {
                Message = "Ok";
                progress = 60;
                ProgressHub.SendMessage("Перемещаем номенклатуру...", progress);
                go = false;
                //Добавляем в остаток на складе
                bool NaSkladDobavleno = PeremeshenieNaSklad(MaxNum.FMaxNum.Value,StockID, ICMO.FItemID, FCommitQty, true);//Плюсуем на склад
                SaveToDocLog(Parent, ICMO.FItemID, "Сохранили поступление на склад статус="+NaSkladDobavleno , FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
                AddLitnik(ICMO.FItemID, FCommitQty, StockID, ICMO.FInterID);//Добавляем литник если он есть при производстве

                /*
                                ICInventory Sklad = new ICInventory();

                                int EstLiStrokaNaSklade = 0;
                                try
                                {
                                    EstLiStrokaNaSklade = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == ICMO.FItemID).Count();

                                }
                                catch
                                {

                                }
                                if (EstLiStrokaNaSklade > 0)
                                {

                                    try
                                    {
                                        Sklad = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == ICMO.FItemID).First();
                                        Sklad.FQty += FCommitQty;
                                    }
                                    catch (Exception SE)
                                    {
                                        Console.WriteLine("Не смогли найти строку на складе " + SE.Message);
                                    }

                                    try
                                    {

                                        db.Entry(Sklad).State = EntityState.Modified;
                                        db.SaveChanges();
                                        SaveToDocLog(Parent, ICMO.FItemID, "Сохранили поступление на склад ", FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
                                        go = true;
                                    }

                                    catch (Exception exx)
                                    {
                                        Console.WriteLine("Ошибка добавления на склад " + exx.Message);
                                        SaveToDocLog(Parent, ICMO.FItemID, "Ошибка Не смогли добавить на склад ", FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
                                    }
                                }
                                else
                                {
                                    //Если нет такой строки то добавляем новую
                                    Sklad.FQty = FCommitQty;
                                    Sklad.FStockID = StockID;
                                    Sklad.FItemID = ICMO.FItemID;
                                    Sklad.FBrNo = "0";
                                    Sklad.FBatchNo = "";
                                    Sklad.FKFDate = "";
                                    Sklad.FMTONo = "";
                                    try
                                    {
                                        db.ICInventory.Add(Sklad);
                                        db.SaveChanges();
                                        SaveToDocLog(Parent, ICMO.FItemID, "Сохранили поступление на склад ", FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
                                        go = true;
                                    }
                                    catch (Exception exxx)
                                    {
                                        Console.WriteLine("Не смогли добавить новую строку поступления на склад ICInventory " + exxx.Message);
                                        SaveToDocLog(Parent, ICMO.FItemID, "Ошибка Не смогли добавить на склад ", FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
                                    }
                                }
                */

            }

         


            //Меняем остатки в WORK
            try
            {
                progress = 80;
                ProgressHub.SendMessage("Модифицируем " + ICMO.FBillNo + "...", progress);
                if (ICMO.FCommitQty == 0)
                {
                    ICMO.FStartDate = DateTime.Now.Date;
                    ICMO.FPlanCommitDate = DateTime.Now.Date;

                }
                ICMO.FCommitQty += FCommitQty;
                ICMO.FAuxCommitQty += FCommitQty;
                ICMO.FStockQty += FCommitQty;
                ICMO.FAuxStockQty += FCommitQty;

                if (ICMO.FCommitQty >= ICMO.FQty)
                {
                    ICMO.FStatus = 3;
                    ICMO.FFinishDate = DateTime.Now.Date;
                    ICMO.FPlanFinishDate = DateTime.Now.Date;
                    ICMO.FCheckerID = U.MOLId; //Добавлено 02/03/2023 после исправления ошибки Антиворк Мол закрывающий ворк из производства
                    ICMO.FCloseDate = DateTime.Now.Date;
                    ICMO.FMrpClosed = 1;
                }
                db.Entry(ICMO).State = EntityState.Modified;
                db.SaveChanges();
                SaveToDocLog(Parent, ICMO.FItemID, "Сохранили выпуск в ICMO ", FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
                try
                {
                    StarMehWorks SW = new StarMehWorks();
                    DateTime D = DateTime.Now.Date;
                    SW = db.StarMehWorks.Where(x => x.Id == StarId&&x.Complete == false && x.WorkId == InterID && x.DateStart == D).First();
                    SW.QTYFact += FCommitQty;
                    db.Entry(SW).State = EntityState.Modified;
                    db.SaveChanges();
                    SaveToDocLog(Parent, ICMO.FItemID, "Сохранили выпуск в работе старшего мастера ", FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
                }
                catch
                {

                }

                ViewBag.Message = "Ok";
                //Двигаем PMC DETAIL
                try
                {

                    ProgressHub.SendMessage("Модифицируем PLANPMCDETAIL...", progress);

                    ICPlan_PMCDetail P = ICMO.ICPlan_PMCDetail.Where(x => x.FItemID == ICMO.FItemID).First();
                    P.FStockQty += FCommitQty;
                    P.FWillInQty -= FCommitQty;
                    db.Entry(P).State = EntityState.Modified;
                    db.SaveChanges();
                    SaveToDocLog(Parent, ICMO.FItemID, "Изменили  ICPlan_PMCDetail", FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
                }
                catch
                {

                }
            }
            catch (Exception E)
            {
                ViewBag.Message = "Ошибка = " + E.Message;
                SaveToDocLog(Parent, ICMO.FItemID, "Ошибка  ICPlan_PMCDetail" +E.Message, FCommitQty, 0, ICMO.FInterID, ICMO.FBillNo);
            }
           //Добавляем записи в таблицу комплекта  

            Komplektovka.SaveComplekt(Parent);
            AddStatusOTK(Parent, 8);

            return "Ok;" + QRID + ";" + "true" + ";" + Parent.ToString();
        }


        [HttpPost]
        [Culture]
        public JsonResult SaveCompleteWorkJson(string Stock, string Manager, int InterID, int FCommitQty)
        {
            string Message = "";

            int StockID = 0;
            int ManagerID = 0;
    
            int progress = 0;
            KomplektovkaView K = new KomplektovkaView();

            ProgressHub.SendMessage("Проходим проверки...", progress);
            try
            {
                StockID = db.t_Stock.Where(x => x.FName.Equals(Stock)).Select(a => a.FItemID).First();
                ManagerID = FindUserID(Manager); //db.t_Item.Include(x=>x.MOL.Where(x => x.FItemClassID == 3 && x.FName.Equals(Manager)).Select(a => a.FItemID).First();

            }
            catch
            {
                return Json(Resources.Resource.ZapolniteYellow);
            }



            var ICMO = db.ICMO.Where(x => x.FInterID == InterID).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Include(x=>x.NZP).Include(x=>x.StarMehWorks).First();//Строка в заказе поставщику

            if (FCommitQty > ICMO.FQty - ICMO.FCommitQty)
            {
                return Json(Resources.Resource.VveliBolsheChemVZakaze);
            }

            if (FCommitQty == 0)
            {
                return Json(Resources.Resource.NomenklaturiNedostatochno);
            }

            List<Dvigenie> Dvigs = new List<Dvigenie>();
            try
            {
                Dvigs = db.Dvigenie.Where(x => x.Work.Equals(ICMO.FBillNo)&& x.FBillNo.Contains("CIN")==false).ToList();
            }
            catch
            {
                //Если движений нет вообще то создадим новое абстрактное движение
             
            }
            if (Dvigs.Count == 0)
            {
                Dvigenie D = new Dvigenie();
                D.POOrderId = 1151; //TODO Установить любой другой номер 
                Dvigs.Add(D);
            }

            List<PPBOMEntry> BE = new List<PPBOMEntry>();
            try
            {
                BE = db.PPBOMEntry.Where(x => x.FICMOInterID == InterID).Include(x => x.t_Item).ToList();//Include(x => x.PPBOM).Where(x => x.PPBOM.FHeadSelfY0227.Equals(ICMO.FBillNo)).Include(x=>x.t_Item).ToList();
            }
            catch
            {
                return Json("Не можем найти строки PPBOM");
            }
            int StarId = 1;
            try
            {
                StarId =ICMO.StarMehWorks.Where(x => x.Complete == false).OrderByDescending(x => x.DateStart).Take(1).First().Id;
            }
            catch
            {

            }

            //Ищем НЗП связанного с данным WORK
            K = FindKomplektovka(GenerateKomplektovkaString(InterID, StarId, ICMO.FWorkShop.Value,FindPlanshetId(), FCommitQty));


            progress = 10;
  

            var MaxNum = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            //Плюсуем макс номер
            MaxNum.FMaxNum++;
            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 2).First();

            string WIN = "CIN0" + MaxStockID.FCurNo;
            ProgressHub.SendMessage("Создаем поступление..."+WIN, progress);

            //  var POOrder = db.POOrder.Where(x => x.FInterID == InterID).Include(x => x.t_Department).First();//Берем данные из заказа поставщику
            if (Session["CurrentUser"] == null)
            {
                return Json(Resources.Resource.ViberitePolzovatelya);
            }


            int userId = FindUserID(FindCurrentUser());



            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum.FMaxNum.Value;
            StockBill.FDate = DateTime.Now.Date;
            StockBill.FTranType = 2;
            StockBill.FBillNo = WIN;
            StockBill.FDeptID = ICMO.FWorkShop.Value;
            StockBill.FCheckerID = userId;
            StockBill.FPosterID = userId;
            StockBill.FManagerID = ManagerID;
            StockBill.FSManagerID = ManagerID;
            StockBill.FBillerID = userId;
            StockBill.FFManagerID = ManagerID;
            StockBill.FHookInterID = 37861;//Неизвестно что за хук
            StockBill.FPosted = 1;
            StockBill.FCheckSelect = 0;
            StockBill.FROB = 1;
            StockBill.FStatus = 1;
            StockBill.FUpStockWhenSave = false;
            StockBill.FCancellation = false;
            StockBill.FOrgBillInterID = 0;
            StockBill.FBillTypeID = 0;
            StockBill.FPOStyle = 252;
            StockBill.FBackFlushed = false;
            StockBill.FUUID = Guid.NewGuid();
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
            StockBill.FMarketingStyle = 12530;
            StockBill.FCheckDate = DateTime.Now;
            StockBill.FExplanation = "KingDeeWeb";
            StockBill.FSelTranType = 85;
            StockBill.FChildren = 1;
            StockBill.FHookStatus = 2;
            StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;
            StockBill.FsourceType = 37521;
            StockBill.FPayCondition = 1000;
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
            StockBill.FPOMode = 36680;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";
            StockBill.FHeadSelfA0143 = "KingDeeWeb";
            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum.FMaxNum.Value;

                db.Entry(MaxNum).State = EntityState.Modified;
                db.SaveChanges();


                MaxStockID.FCurNo++;
                MaxStockID.FDesc = "CIN+0" + MaxStockID.FCurNo;
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();
                go = true;
            }
            catch (Exception e)
            {

            }
            progress = 25;
            ProgressHub.SendMessage("Генерируем QR код..." + WIN, progress);


            var QR = new QRTable();
            int QRID = 0;
            int lvl = 0;
            int Parent = 0;
            if (go)//если добавлена шапка то добавляем строки
            {

                //Сначала добавим поступление на склад (Новое)
                lvl = SelectMaxLev(Dvigs[0].POOrderId, ICMO.FItemID, Dvigs[0].ZakazPostavshiku);
                lvl++;
                QRID = SaveQR(ICMO.t_Item, Dvigs[0].ZakazPostavshiku, Dvigs[0].POOrderId, lvl);
                Parent = SaveDvigenie(Dvigs[0].ZakazPostavshiku,WIN, FCommitQty, ICMO.FItemID, Dvigs[0].POOrderId,ICMO.FWorkShop.Value, StockID, QRID, lvl,0,ICMO.FBillNo);
               //

                foreach(PPBOMEntry E in BE)
                {
                    try
                    {
                        decimal QTYSpisat = E.FQtyScrap * FCommitQty;
                        try
                        {
                            List<Dvigenie> DS = Dvigs.Where(x => x.ItemID == E.FItemID&&x.QTYFact>0).ToList();
                            if (DS.Count > 0)
                            {
                                decimal Ostatok = QTYSpisat;
                                foreach (Dvigenie D in DS)
                                {
                                    if (Ostatok > 0)
                                    {
                                        if (Ostatok <= D.QTYFact)
                                        {
                                            D.QTYFact = Ostatok;
                                            Ostatok = 0;
                                            EditDvigenie(D, D.QTYFact);//Изменяем количество предыдущего

                                            SaveDvigenie(Dvigs[0].ZakazPostavshiku,WIN, D.QTYFact, D.ItemID, D.POOrderId, ICMO.FWorkShop.Value, StockID, D.QRID.Value, D.Lev);//Добавляем новое движение выпуска
                                        }
                                        else
                                        {
                                            Ostatok = Ostatok - D.QTYFact;
                                           
                                            SaveDvigenie(Dvigs[0].ZakazPostavshiku,WIN, D.QTYFact, D.ItemID, D.POOrderId, ICMO.FWorkShop.Value, StockID, D.QRID.Value, D.Lev);//Добавляем новое движение выпуска
                                            EditDvigenie(D, 0);//Изменяем количество предыдущего



                                        }
                                    }

                                }
                            }
                            //Правим BOMENtry
                            E.FQty += QTYSpisat;
                            E.FQtyConsume += QTYSpisat;
                            E.FAuxQtyConsume += QTYSpisat;
                            E.FWIPAuxQTY -= QTYSpisat;
                            E.FWIPQTY -= QTYSpisat;
                            if (E.FQty>E.FQtyMust)
                            {
                                E.FQty = E.FQtyMust;
                            }
                            db.Entry(E).State = EntityState.Modified;
                            db.SaveChanges();

                           
                         
                        }
                        catch
                        {

                        }
                    }
                    catch
                    {

                    }
                }


                //Сохраняем QR код
                // string STQ = ICMO.t_Item.FNumber + ";" + ICMO.t_Item.FName + ";" + FCommitQty + ";" + StockBill.FCheckDate.Value.ToString("dd.MM.yyyy") + ";" + ICMO.FBillNo + ";" + ICMO.t_Item.NomenklaturaEnterprise.First().RusName + ";" + StockID + ";";

                progress = 40;
                ProgressHub.SendMessage("Создаем строку поступления" + WIN+"...", progress);


                go = false;

                Entry.FBrNo = "0";
                decimal price = 0;//Рассчитать стоимость материалов

                Entry.FItemID = ICMO.FItemID;
                Entry.FQtyMust = ICMO.FQty;
                Entry.FAuxQtyMust = ICMO.FQty;
                Entry.FQty = FCommitQty;
                Entry.FPrice = price;//TODO сделать расчет стоимости исходя из БОМа?
                Entry.FBatchNo = "";
                decimal Q = Convert.ToDecimal(FCommitQty);
                decimal C = Convert.ToDecimal(price);
                Entry.FAmount = Q * C;
                Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                Entry.FNote = "KingDeeWeb";
                Entry.FUnitID = 257;//Единица измерения прицепить из t_item
                Entry.FAuxPrice = price;
                Entry.FPurchasePrice = Entry.FPurchasePrice; // Закупочная цена с налогом из заказа поставщику
                Entry.FPurchaseAmount = Q * Entry.FPurchasePrice;
                Entry.FAuxQty = FCommitQty;
                Entry.FSourceBillNo = ICMO.FBillNo;
                Entry.FDCStockID = StockID;
                Entry.FSourceInterId = ICMO.FInterID;
                Entry.FOrderBillNo = "";
                Entry.FOrderInterID = 0;
                Entry.FOrderEntryID = 0;
                Entry.FMapNumber = QR.Id.ToString();//Сюда сохраняем QR Id


                Entry.FMapNumber = "";
                Entry.FContractBillNo = "";
                Entry.FICMOBillNo = ICMO.FBillNo;
                Entry.FMTONo = "";
                Entry.FItemSize = "";
                Entry.FItemSuite = "";
                Entry.FPositionNo = "";
                Entry.FSEOutBillNo = "";
                Entry.FConfirmMemEntry = "";
                Entry.FItemStatementBillNO = "";
                Entry.FReturnNoticeBillNO = "";
                Entry.FSplitState = "";
                Entry.FICMOInterID = ICMO.FInterID;



                try
                {
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();




                    go = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                }
            }

            if (go)
            {
                progress = 60;
                ProgressHub.SendMessage("Перемещаем номенклатуру..." , progress);
                go = false;
                //Добавляем в остаток на складе
                ICInventory Sklad = new ICInventory();
                int EstLiStrokaNaSklade = 0;
                try
                {
                    EstLiStrokaNaSklade = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == ICMO.FItemID).Count();
                }
                catch
                {

                }
                if (EstLiStrokaNaSklade > 0)
                {

                    try
                    {
                        Sklad = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == ICMO.FItemID).First();
                        Sklad.FQty += FCommitQty;
                    }
                    catch (Exception SE)
                    {
                        Console.WriteLine("Не смогли найти строку на складе " + SE.Message);
                    }

                    try
                    {

                        db.Entry(Sklad).State = EntityState.Modified;
                        db.SaveChanges();
                        go = true;
                    }

                    catch (Exception exx)
                    {
                        Console.WriteLine("Ошибка добавления на склад " + exx.Message);
                    }
                }
                else
                {
                    //Если нет такой строки то добавляем новую
                    Sklad.FQty = FCommitQty;
                    Sklad.FStockID = StockID;
                    Sklad.FItemID = ICMO.FItemID;
                    Sklad.FBrNo = "0";
                    Sklad.FBatchNo = "";
                    Sklad.FKFDate = "";
                    Sklad.FMTONo = "";
                    try
                    {
                        db.ICInventory.Add(Sklad);
                        db.SaveChanges();
                        go = true;
                    }
                    catch (Exception exxx)
                    {
                        Console.WriteLine("Не смогли добавить новую строку поступления на склад ICInventory " + exxx.Message);
                    }
                }


            }

            if (go)
            {
                Message = "Ok";
            }
            //     "(FBrNo, FInterID, FEntryID, FItemID, FQtyMust,FAuxQtyMust, FQty, FPrice, FBatchNo, " +
            //                        "FAmount, FNote, FUnitID, FAuxPrice, FAuxQty, FProcessCost, FMaterialCost, FTaxAmount," +
            //                         " FSourceBillNo, FDCStockID, FSourceInterId, FOrderBillNo, FOrderInterID, FOrderEntryID)" +
            //                         "VALUES('O', " + InterId + "," + NPP + ", " + NL[0].FItemId + ", " + KolichestvoVZakaze + ", " + KolichestvoVZakaze + ", " + QTY + ", " + CENA + ", '', " +
            //                         "" + Amount + ", 'Enterprise', 259, " + CENA + ", " + QTY + ", 0, 0, 0," +
            //                         " '" + PURCH + "', " + SkladKitai + ", " + PURCHINTERID + ", '" + PURCH + "', " + PURCHINTERID + "," + StrokaPURCH + ")", true);




            //Меняем остатки в WORK
            try
            {
                progress = 80;
                ProgressHub.SendMessage("Модифицируем " + ICMO.FBillNo+ "...", progress);
                if (ICMO.FCommitQty ==0)
                {
                    ICMO.FStartDate = DateTime.Now;
                    ICMO.FPlanCommitDate = DateTime.Now;

                }
                ICMO.FCommitQty += FCommitQty;
                ICMO.FAuxCommitQty += FCommitQty;
                ICMO.FStockQty += FCommitQty;
                ICMO.FAuxStockQty += FCommitQty;

                if (ICMO.FCommitQty == ICMO.FQty)
                {
                    ICMO.FStatus = 3;
                    ICMO.FFinishDate = DateTime.Now;
                    ICMO.FPlanFinishDate = DateTime.Now;
                }
                db.Entry(ICMO).State = EntityState.Modified;
                db.SaveChanges();

                try
                {
                    StarMehWorks SW = new StarMehWorks();
                    DateTime D = DateTime.Now.Date;
                    SW = db.StarMehWorks.Where(x => x.Complete == false && x.WorkId == InterID && x.DateStart == D).First();
                    SW.QTYFact += FCommitQty;
                    db.Entry(SW).State = EntityState.Modified;
                    db.SaveChanges();
                }
                catch
                {

                }

                ViewBag.Message = "Ok";
                //Двигаем PMC DETAIL
                try
                {

                    ProgressHub.SendMessage("Модифицируем PLANPMCDETAIL...", progress);

                    ICPlan_PMCDetail P = ICMO.ICPlan_PMCDetail.Where(x => x.FItemID == ICMO.FItemID).First();
                    P.FStockQty += FCommitQty;
                    P.FWillInQty -= FCommitQty;
                    db.Entry(P).State = EntityState.Modified;
                    db.SaveChanges();
                }
                catch
                {

                }
            }
            catch (Exception E)
            {
                ViewBag.Message = "Ошибка = " + E.Message;
            }

     


            return Json(Message + ";" + QRID+";"+"true");
        }

     

        public int FindManagerID(string Manager)
        {
            int Result = 0;
            try
            {//Если передано число то ничего не ищем
                Result = Convert.ToInt32(Manager);
            }
            catch
            {

            }
            if (Result!=0)
            {
                return Result;
            }

            try //сначала ищем в китайской базе
            {
             //   Result = db.t_User.Where(x => x.FName.Equals(Manager)).Select(x=>x.FUserID).First();
               Result = db.t_Item.Where(x => x.FItemClassID == 3 && x.FName.Equals(Manager)).Select(a => a.FItemID).First();
            }
            catch
            {

            }
            if (Result == 0)
            {
                try
                {
                    Result = db.StocksMOL.Where(x => x.MOL.Equals(Manager)).Select(x => x.MOLID.Value).First();
                }
                catch
                {

                }
            }
          
            return Result;
        }

        public List<StatusOTK> FindStatusesOTK()
        {
            List<StatusOTK> S = new List<StatusOTK>();

            try
            {
                S = db.StatusOTK.ToList();
            }
            catch
            {

            }
            return S;
        }

        public ActionResult OstatkiInQR()
        {
            return View();
        }
        public ActionResult OstatkiInQRTable(string Name)
        {
            DateTime D = DateTime.Now.AddMonths(-1).Date;
            int DeptId = FindDeptId(FindCurrentDepartment());

            List<ICMO> Works = new List<ICMO>();
            List<Dvigenie> Dvigs = new List<Dvigenie>();
            t_Item I = new t_Item();
            List<StatusOTK> S = FindStatusesOTK() ;
            try
            {
                Name = Name.Replace(" ","");
                I = db.t_Item.Where(x =>  x.FNumber.Equals(Name)).Include(x=>x.NomenklaturaEnterprise).First();
            }
            catch (Exception e)
            {

            }
            try
            {
                //Ищем WORKS
                if (Name != null)
                {
                    //берем 100 ворков
                    try
                    {
                        Dvigs = db.Dvigenie.Where(x => x.QTYFact > 0 && x.ItemID == I.FItemID).Include(x => x.Stock).Include(x => x.Control).OrderBy(x => x.StockId).ToList();
                    }
                    catch (Exception e)
                    {

                    }

                    if (Dvigs.Count > 0)
                    {
                        foreach (var d in Dvigs)
                        {
                            try
                            {
                                List<Control> C = new List<Control>();
                                d.Item = I;
                                C.Add(d.Control.OrderByDescending(x => x.Dat).First());
                                foreach (var cc in C)
                                {
                                    cc.StatusOTK = S.Where(x => x.Id == cc.Status).First();
                                            
                                }
                                d.Control = C;
                            }
                            catch
                            {

                            }
                        }

                    }

                }
            }
            catch
            {

            }
            return View(Dvigs);
        }

        public ActionResult OstatkiInQRMenu()
        {
            return View();
        }

        public ActionResult OstatkiInWork()
        {
            return View();
        }

        public ActionResult OstatkiInWorkTable(string Name)
        {
            DateTime D = DateTime.Now.AddMonths(-1).Date;
        int DeptId = FindDeptId(FindCurrentDepartment());
        
            List<ICMO> Works = new List<ICMO>();
            try
            {
                //Ищем WORKS
                if (Name == null )
                {
                    //берем 100 ворков
                    Works = db.ICMO.Where(x =>x.FPlanCommitDate>=D&&x.FStatus == 1).Include(x => x.PPBOM).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Take(5).ToList();
                }
                else
                {

                    Works = db.ICMO.Where(x => x.FBillNo.Contains(Name) && x.FStatus == 1).Include(x => x.PPBOM).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).ToList();
                }

                if (DeptId == 0)
                {

                }
                else
                {
                    Works = Works.Where(x => x.FWorkShop == DeptId).ToList();
                }

                foreach (var W in Works)
                {
                    foreach (var BOM in W.PPBOM)
                    {
                        try
                        {
                            //Цепляем к WORKS BOMENTRY
                            BOM.PPBOMEntry = db.PPBOMEntry.Where(x => x.FInterID == BOM.FInterID).Include(x=>x.t_Item).Include(x=>x.t_Item.NomenklaturaEnterprise).ToList();
                            BOM.t_Item.FName =  FindRussianName(BOM.t_Item);
                        }
                        catch
                        {

                        }
                    }
                }
            }
            catch
            {

            }
            return View(Works);
        }

        public ActionResult OstatkiInWorkMenu()
        {
            return View();
        }


        public ActionResult VozvratIsNZPNEW()
        {
            ViewBag.DefaultStockId = 13689;

            if (Session["KomplektovkaStockId"] != null)
            {
                ViewBag.DefaultStockId = (int)Session["KomplektovkaStockId"];
            }

            ViewBag.DefaultDepartmentId = 0;
            if (Session["KomplektovkaDepartmentId"] != null)
            {
                ViewBag.DefaultDepartmentId = (int)Session["KomplektovkaDepartmentId"];
            }
            ViewBag.Departments = SearchAllDepartments();
            ViewBag.Stocks = SearchStorages("",false,false,false,false,false,true);
            ViewBag.Managers = SearchMOL();
            ViewBag.Prichini = FindAllPrichiniVozvrata();
            int Count = GetCount();
            ViewBag.Count = Count;
            return View();
        }

        public ActionResult VozvratIsNZPNEWTABLE(string Nomenklatura = "", string WorkNumber="")
        {
            DateTime D = DateTime.Now.AddMonths(-5).Date;
            List<int> DeptId = FindCurrentDepartmentIdArray();// FindDeptId(FindCurrentDepartment());
            int Count = GetCount();
            ViewBag.Count = Count;
      

            List<ICMO> Works = new List<ICMO>();
            List<int> SW = new List<int>();
            List<PPBOMEntry> Result = new List<PPBOMEntry>();
            List<int> Noms = new List<int>();
            List<int> Ws = new List<int>();

            if (Nomenklatura != "")
            {
                try
                {
                    Noms = db.t_Item.Where(x => x.FNumber.Contains(Nomenklatura) || x.FName.Contains(Nomenklatura)).Select(x => x.FItemID).ToList();
                }
                catch
                {

                }
            }
            if (WorkNumber != "")
            {
                try
                {
                    Ws = db.ICMO.Where(x => x.FBillNo.Contains(WorkNumber)).Select(x => x.FInterID).ToList();
                }
                catch
                {

                }
            }

            try
            {


               // Result = db.PPBOMEntry.Where(x => x.FWIPQTY > 0).Include(x => x.ICMO).Where(x => x.ICMO.FCheckDate >= D.Date && x.ICMO.FCommitQty >= x.ICMO.FQty).Include(x=>x.t_Item).ToList();
                if (Nomenklatura != "")
                {
                  Result = db.PPBOMEntry.Where(x => x.FWIPQTY > 0).Include(x => x.ICMO).Where(x => x.ICMO.FCheckDate >= D.Date&& Noms.Contains(x.FItemID)).Include(x => x.t_Item).Take(Count).ToList();// Result.Where(x => Noms.Contains(x.FItemID)).ToList();  && x.ICMO.FCommitQty >= x.ICMO.FQty
                }

                if (WorkNumber != "")
                {
                  Result = db.PPBOMEntry.Where(x => x.FWIPQTY > 0).Include(x => x.ICMO).Where(x => x.ICMO.FCheckDate >= D.Date && Ws.Contains(x.ICMO.FInterID)).Include(x => x.t_Item).Take(Count).ToList();// 
                                                                                                                                                                                                        //Result.Where(x => Ws.Contains(x.ICMO.FInterID)).ToList();
                }

                if (WorkNumber !=""&& Nomenklatura!="")
                {
                    Result = db.PPBOMEntry.Where(x => x.FWIPQTY > 0).Include(x => x.ICMO).Where(x => x.ICMO.FCheckDate >= D.Date && Ws.Contains(x.ICMO.FInterID) && Noms.Contains(x.FItemID)).Include(x => x.t_Item).Take(Count).ToList();// 
                }

                if (WorkNumber == "" && Nomenklatura == "")
                {
                    Result = db.PPBOMEntry.Where(x => x.FWIPQTY > 0).Include(x => x.ICMO).Where(x => x.ICMO.FCheckDate >= D.Date ).Include(x => x.t_Item).Take(Count).ToList();// 
                }



            }
            catch
            {

            }
         

            return View(Result.Take(Count).ToList());
        }

        public ActionResult OstatkiVBOM()
        {
            DateTime D = DateTime.Now.AddMonths(-1).Date;
            int DeptId = FindDeptId(FindCurrentDepartment());

            List<ICMO> Works = new List<ICMO>();
            List<int> SW = new List<int>();
            List<ICMO> Result = new List<ICMO>();
            
            try
            {
          
                    try
                    {
                      SW =  db.StarMehWorks.Where(x => x.QTYFact >= x.QTY).Select(x => x.WorkId).Distinct().ToList();
                    }
                    catch
                    {

                    }
                    if (SW.Count > 0)
                    {
                        
                        Works = db.ICMO.Where(x => SW.Contains(x.FInterID) && x.FQty <= x.FCommitQty).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).Include(x=>x.StarMehWorks).ToList();
                    }

                  

                if (DeptId == 0)
                {

                }
                else
                {
                    Works = Works.Where(x => x.FWorkShop == DeptId).ToList();
                }
                if (Works.Count > 0)
                {
                   
                    foreach (var W in Works)
                    {
                        List<PPBOMEntry> E = new List<PPBOMEntry>();
                        List<NZP> N = new List<NZP>();
                        foreach (var BOM in W.PPBOMEntry)
                        {
                            if (BOM.FQtyMust < BOM.FQty || BOM.FWIPQTY > 0) //ищем бомы где осталось НЗП
                            {
                                if (CultureRU())
                                {
                                    try
                                    {
                                      
                                        //Цепляем к WORKS BOMENTRY
                                        BOM.t_Item = db.t_Item.Where(x => x.FItemID == BOM.FItemID).Include(x => x.NomenklaturaEnterprise).First();
                                    //   W.NZP =  db.NZP.Where(x => x.WorkId == W.FInterID && x.ItemId == BOM.FItemID).ToList();
                                        BOM.t_Item.FName = FindRussianName(BOM.t_Item);
                                    }
                                    catch
                                    {

                                    }
                                }
                                E.Add(BOM);
                            }
                        }
                       
                        if (E.Count>0)
                        {
                            W.NZP = FindWORKNZP(W.FInterID);


                            W.PPBOMEntry = E;
                            Result.Add(W);
                        }
                    }
                   
                }
            }
            catch
            {

            }
            return View(Result);
        }





        public string CINSTORNO(int DvigenieId, string Manager, decimal QTY, string StockTo , NZP nzp)
        {
            string Message = "";
            
            int StockFromID = 0;
            ICMO Work = new ICMO();
            int ManagerID = 0;
            int UserID = 0;
            int DepartmentID = 0;
            t_Item Item = new t_Item();
            PPBOMEntry BOMEntry = new PPBOMEntry();
            ICStockBill IC = new ICStockBill();
            ICStockBillEntry ICE = new ICStockBillEntry();
            decimal QTYnaSklade = 0;
            string User = FindCurrentUser();
            int StockID = 0;
            int StockFromId = 0;
            Dvigenie Dvig = new Dvigenie();
            KomplektovkaView K = new KomplektovkaView();
            if (DvigenieId != null && DvigenieId != 0)
            {
                try
                {
                    K = LoadKomplektovka();
                    Dvig = db.Dvigenie.Where(x => x.Id == DvigenieId).First(); //FindDvigenie(DvigenieId);
                  //  IC = db.ICStockBill.Where(x => x.FBillNo.Equals(Dvig.FBillNo)).Include(x => x.ICStockBillEntry).First();
                  //  ICE = IC.ICStockBillEntry.Where(x => x.FItemID == Dvig.ItemID).First();

                }
                catch (Exception e)
                {
                    Message = e.Message;
                }
            }
            else
            {
           
                return Message;
            }


            ItemView I = new ItemView();
            if (DvigenieId != 0)
            {
                try
                {
                    I.LastDvig = Dvig;

                    /*    I.Item = I.LastDvig.Item;
                        I.POOrder = I.LastDvig.POOrder;
                        I.QTY = I.LastDvig.QTYFact;
                        I.Lev = I.LastDvig.Lev;
                        I.StockOrDep = I.LastDvig.Stock;
                        I.FindDvigenies();
                    */

                }
                catch
                {

                }
            }

            try
            {
                StockFromID = I.LastDvig.StockFromId;
                StockID = FindStockID(StockTo);//ICE.FSCStockID;
            }
            catch (Exception e)
            {
                Message = "Не найден склад отправления / получения " + e.Message;
            }
            if (User == "")
            {
                return Message;
            }
            try
            {
                DepartmentID = Dvig.StockId;
                Work = db.ICMO.Where(x => x.FInterID== K.WorkId).Include(x => x.t_Department).Include(x => x.PPBOM).First();
               // int BOM = Work.PPBOM.First().FInterID;
                BOMEntry = db.PPBOMEntry.Where(x => x.FICMOInterID == K.WorkId && x.FItemID == Dvig.ItemID).First();
                //     DepartmentID = Work.t_Department.FItemID;
                ManagerID = FindUserID(FindCurrentUser());//FindManagerID(Manager);
                UserID = FindUserID(FindCurrentUser());//db.t_Item.Where(x => x.FItemClassID == 3 && x.FName.Equals(User)).Select(a => a.FItemID).First();
                Item = db.t_Item.Where(x => x.FItemID == Dvig.ItemID).Include(x => x.NomenklaturaEnterprise).First();
              //  QTYnaSklade = Dvig.QTYFact;// QTYNaSklade(StockFromID, Item.FItemID);


            }
            catch (Exception e)
            {
                Message = "Не смогли найти основные параметры "+e.Message;
                return Message;
            }



        /*    if (QTYnaSklade < QTY)
            {
                Message = Resources.Resource.QTYNaSkladeNedostatochno;
                return Message;
            }
*/
            if (QTY == 0)
            {
                Message = Resources.Resource.QTYNaSkladeNedostatochno;
                return Message;
            }

            var MaxNum = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            //Плюсуем макс номер
            MaxNum.FMaxNum++;

            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 24).First();

            string SOUT = "SOUT" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);

            UsersKDW U = FindCurrentKDWUser();



            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum.FMaxNum.Value;
            StockBill.FDate = DateTime.Now.Date;
            StockBill.FTranType = 24;
            StockBill.FBillNo = SOUT;
            StockBill.FDeptID = DepartmentID; //Возможно можно перемещать на подразделение!!! 270 есть в таблице
            StockBill.FEmpID = null;
            StockBill.FSupplyID = null;
            StockBill.FCheckerID = UserID; // TODO найти пользака текущего. Сделать модуль регистрации пользователей и сопоставить их с кинди
            StockBill.FManagerID = U.MOLId;
            StockBill.FSManagerID = U.MOLId;
            StockBill.FBillerID = UserID;
            StockBill.FFManagerID = ManagerID;

            StockBill.FHookInterID = 0;//Неизвестно что за хук
            StockBill.FVchInterID = 0;//При перемещении есть записи с указанным ID например 229
            StockBill.FPosted = 1;
            StockBill.FCheckSelect = 0;
            StockBill.FROB = -1;
            StockBill.FStatus = 1;
            StockBill.FUpStockWhenSave = false;
            StockBill.FCancellation = false;
            StockBill.FOrgBillInterID = 0;
            StockBill.FBillTypeID = 0;
            StockBill.FPOStyle = null;
            StockBill.FBackFlushed = false;
            StockBill.FPurposeID = 12000;
            StockBill.FUUID = Guid.NewGuid();
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
            StockBill.FMarketingStyle = 12530;
            StockBill.FRefType = 0;
            StockBill.FCheckDate = DateTime.Now;
            StockBill.FExplanation = "WEB " + U.Name;
            StockBill.FSelTranType = 85;// также может быть 85, 0, 1012510
            StockBill.FChildren = 0;
            StockBill.FHookStatus = 0;
            StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;
            StockBill.FsourceType = 37521;
            StockBill.FPayCondition = 0;
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
            StockBill.FPOMode = 0;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";
            StockBill.FNote = FindModelByItem(Dvig.ItemID);
            StockBill.FHeadSelfA0143 = "KingDeeWeb";
            StockBill.FHeadSelfB0435 = Work.FNote;




            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum.FMaxNum.Value;

                db.Entry(MaxNum).State = EntityState.Modified;
                db.SaveChanges();


                MaxStockID.FCurNo++;
                MaxStockID.FDesc = "SOUT+" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();
                go = true;
            }
            catch (Exception e)
            {

            }



            var QR = new QRTable();
            int QRID = 0;
            int DvigId = 0;
            bool PrintQR = false;
            if (go)//если добавлена шапка то добавляем строки
            {

                /*  if (Dvig.QTYFact == QTY)
                  {
                      SaveDvigenie(SOUT, QTY, Dvig.ItemID, Dvig.POOrderId, DepartmentID, Dvig.QRID.Value, Dvig.Lev, Dvig.Parent, Work.FBillNo);
                      QRID = Dvig.QRID.Value;
                  }
                  else
                  {
                      int lvl = SelectMaxLev(Dvig.POOrderId, Dvig.ItemID);
                      lvl++;
                      SaveDvigenie(SOUT, QTY, Dvig.ItemID, Dvig.POOrderId, DepartmentID, Dvig.QRID.Value, lvl, Dvig.Id, Work.FBillNo);

                      QRID = SaveQR(Dvig.Item, QTY, Dvig.POOrderId, lvl); //Сохраняем QR
                      PrintQR = true;
                  }
                  decimal QTYFact = Dvig.QTYFact - QTY;
                  EditDvigenie(Dvig, QTYFact);//Редактируем предыдущее движение, обновляем фактическое кол-во

                  */

              // if (QTY == Dvig.QTYFact)//если сторнируем всю партию
              //  {
                  DvigId=  SaveDvigenie(Dvig.ZakazPostavshiku,StockBill.FBillNo, QTY+Dvig.QTYFact, Item.FItemID, Dvig.POOrder.FInterID, StockFromId, StockID, QRID, Dvig.Lev, 0, "STORNO", Dvig.Mnimoe);
                   QRID = Dvig.QRID.Value;
              //  }
               /* else
                {
                    int MaxLVL = SelectMaxLev(Dvig.POOrder.FInterID, Dvig.Item.FItemID, Dvig.ZakazPostavshiku);
                    MaxLVL++;
                    QRID = SaveQR(Item, Dvig.ZakazPostavshiku, Dvig.POOrder.FInterID, MaxLVL);//поступление на склад генерит 0 уровень

                    //Добавляем движение
                  DvigId=  SaveDvigenie(Dvig.ZakazPostavshiku,StockBill.FBillNo, QTY, Item.FItemID, Dvig.POOrder.FInterID, StockFromId, StockID, QRID, MaxLVL, Dvig.Id, "STORNO", Dvig.Mnimoe);
                    PrintQR = true;
                }
               */

                nzp.QTY -= QTY;
                if (nzp.QTY<0)
                {
                    nzp.QTY = 0;
                }
                EditNZP(nzp, nzp.QTY);
                EditDvigenie(Dvig, 0); //пишем что в предыдущем движении теперь факт =0
                // EditDvigenie(Dvig, Dvig.QTYFact - QTY);


                //Сохраняем QR код
                // string STQ = Item.FNumber + ";" + Item.FName + ";" + QTY + ";" + StockBill.FCheckDate.Value.ToString("dd.MM.yyyy") + ";" + SOUT + ";" + FindRussianName(Item) + ";" + DepartmentID + ";";


                go = false;
                try
                {
                    Entry.FBrNo = "0";

                    Entry.FItemID = Item.FItemID;
                    Entry.FQtyMust = QTY;
                    Entry.FAuxQtyMust = QTY;
                    Entry.FQty = -QTY;
                    Entry.FPrice = 0; //Цену нужно откуда-то брать при перемещении
                    Entry.FBatchNo = "";
                    decimal Q = Convert.ToDecimal(QTY);
                    decimal C = Convert.ToDecimal(Entry.FPrice);
                    Entry.FAmount = Q * C;
                    Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                    Entry.FNote = "KingDeeWeb";
                    Entry.FUnitID = 259;//Это единица измерения
                    Entry.FAuxPrice = Entry.FPrice;
                    Entry.FPurchasePrice = Entry.FPurchasePrice; // Закупочная цена с налогом из заказа поставщику
                    Entry.FPurchaseAmount = Q * Entry.FPurchasePrice;
                    Entry.FAuxQty = -QTY;
                    Entry.FPriceRef = Entry.FPrice;
                    Entry.FAuxPriceRef = Entry.FAuxPrice;
                    Entry.FAmtRef = Q * C;
                    Entry.FSourceBillNo = Work.FBillNo;
                    Entry.FICMOBillNo = Work.FBillNo;
                    Entry.FICMOInterID = Work.FInterID;
                    Entry.FPPBomEntryID = 1;// Work.PPBOM.PPBOMEntry.Where(x => x.FItemID == ItemID).First().FEntryID; //TODO ПЕРЕДЕЛАТЬ
                    Entry.FSourceTranType = 85;
                    Entry.FSCStockID = StockFromID;//откуда
                    Entry.FDCStockID = 0;//куда
                    Entry.FSourceInterId = Work.FInterID;
                    Entry.FPlanAmount = -Entry.FAmount;
                    Entry.FOrderBillNo = "";
                    Entry.FOrderInterID = 0;
                    Entry.FOrderEntryID = 0;
                    Entry.FMapNumber = QR.Id.ToString();//Сюда сохраняем QR Id
                    Entry.FReProduceType = 1059;
                    Entry.FPlanMode = 14036;


                    Entry.FContractBillNo = "";
                    Entry.FICMOBillNo = "";
                    Entry.FMTONo = "";
                    Entry.FItemSize = "";
                    Entry.FItemSuite = "";
                    Entry.FPositionNo = "";
                    Entry.FSEOutBillNo = "";
                    Entry.FConfirmMemEntry = "";
                    Entry.FItemStatementBillNO = "";
                    Entry.FReturnNoticeBillNO = "";
                    Entry.FSplitState = "";


                    BOMEntry.FQty -= QTY;
                    BOMEntry.FAuxQty -= QTY;
                    BOMEntry.FStockQty -= QTY;
                    BOMEntry.FAuxStockQty -= QTY;
                    BOMEntry.FWIPAuxQTY -= QTY;
                    BOMEntry.FWIPQTY -= QTY;

                }
                catch
                {
                    Message = "Ошибка при создании строки. Данное задание на производство не содержит в БОМ номенклатуры " + Item.FNumber;
                    return Message;
                }

                try
                {
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();

                    db.Entry(BOMEntry).State = EntityState.Modified;
                    db.SaveChanges();



                    go = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                }
            }

            if (go)
            {
                //   go = PeremeshenieNaSklad(StockFromID, Item.FItemID, QTY, false);//Минусуем на склад
                go = PeremeshenieNaSklad(MaxNum.FMaxNum.Value, StockID, Item.FItemID, QTY, true);                                                                // if (go)
                                                                                                                                           // {
            }

            if (go)
            {
                Message = "Ok";
            }
            else
            {
                Message = "Error";
            }
            //     "(FBrNo, FInterID, FEntryID, FItemID, FQtyMust,FAuxQtyMust, FQty, FPrice, FBatchNo, " +
            //                        "FAmount, FNote, FUnitID, FAuxPrice, FAuxQty, FProcessCost, FMaterialCost, FTaxAmount," +
            //                         " FSourceBillNo, FDCStockID, FSourceInterId, FOrderBillNo, FOrderInterID, FOrderEntryID)" +
            //                         "VALUES('O', " + InterId + "," + NPP + ", " + NL[0].FItemId + ", " + KolichestvoVZakaze + ", " + KolichestvoVZakaze + ", " + QTY + ", " + CENA + ", '', " +
            //                         "" + Amount + ", 'Enterprise', 259, " + CENA + ", " + QTY + ", 0, 0, 0," +
            //                         " '" + PURCH + "', " + SkladKitai + ", " + PURCHINTERID + ", '" + PURCH + "', " + PURCHINTERID + "," + StrokaPURCH + ")", true);




            //Меняем остатки в заказе поставщику
            try
            {

                //   db.Entry(Item).State = EntityState.Modified;
                //    db.SaveChanges();
                ViewBag.Message = "Ok";
            }
            catch (Exception E)
            {
                ViewBag.Message = "Ошибка = " + E.Message;
            }
            return MaxNum.FMaxNum.Value + ";" + PrintQR.ToString() + ";" + QRID + ";" + DvigId; 
        }

        public ActionResult OtchetMinusNZP()
        {
            List<PPBOMEntry> PE = new List<PPBOMEntry>();
            decimal SummaSOUT = 0;
            decimal SummaCIN = 0;
            DateTime D = DateTime.Now.AddMonths(-1).Date;


            
            List<ICMO> Works = new List<ICMO>();

            try
            {
               Works = db.ICMO.Where(x => x.FCheckDate >= D).Include(x => x.t_Item).ToList();
            }
            catch
            {

            }


            try
            {
                foreach (ICMO W in Works)
                {
                    List<PPBOMEntry> BE = new List<PPBOMEntry>();
                    try
                    {
                        BE = db.PPBOMEntry.Where(x => x.FICMOInterID==W.FInterID && x.FWIPQTY < -0.5m).Include(x=>x.t_Item).ToList();
                    }
                    catch
                    {

                    }
                    if (BE.Count>0)
                    {
                        foreach( var be in BE)
                        {
                            be.ICMO = W;
                            PE.Add(be);
                        }
                    
                    }

                }

     
            }
            catch
            {

            }

            foreach (var pe in PE)
            {
                SummaSOUT = db.ICStockBillEntry.Where(x => x.FICMOInterID == pe.FICMOInterID && x.FItemID == pe.FItemID).Include(x => x.ICStockBill).Where(x=>x.ICStockBill.FTranType == 24).Sum(x=>x.FQty); //SOUTS

                SummaCIN = db.ICStockBillEntry.Where(x => x.FICMOInterID == pe.FICMOInterID).Include(x => x.ICStockBill).Where(x => x.ICStockBill.FTranType == 2).Sum(x => x.FQty) * pe.FQtyScrap; //SOUTS
                pe.FQty = SummaSOUT;
                pe.FQtyMust = SummaSOUT - SummaCIN;
                

            }

            return View(PE);
        }

        public bool BillCodeDvig(int FBillId, int NewId)
        {
            t_BillCodeRule BillCode = new t_BillCodeRule();
            bool Result = false;
            try
            {
                BillCode = db.t_BillCodeRule.Where(x => x.FBillTypeID.Equals(FBillId.ToString()) && x.FClassIndex == 2).OrderByDescending(x => x.FID).First();
                BillCode.FProjectVal = NewId.ToString();
                db.Entry(BillCode).State = EntityState.Modified;
                db.SaveChanges();
                Result = true;

            }
            catch
            {

            }
            return Result;
        }
        public JsonResult StornoPeremensheniyaNaProizvodstvoNEWJson(string Manager, decimal QTY, string StockTo, int BOMId, int ItemId, string Prichina="")
        {
            string Message = "";

            int StockFromID = 0;
            ICMO Work = new ICMO();
            int ManagerID = 0;
            int UserID = 0;
            int DepartmentID = 0;
            t_Item Item = new t_Item();
            PPBOMEntry BOMEntry = new PPBOMEntry();
            ICStockBill IC = new ICStockBill();
            ICStockBillEntry ICE = new ICStockBillEntry();
            decimal QTYnaSklade = 0;
            UsersKDW U = CurrentKDWUserModel();
            string User = U.t_Base_User.FName;//FindCurrentUser();
            int StockId = 0;
            string StockName = "";
            string DepartmentName = "";
            //  UsersKDW U = FindCurrentKDWUser();
            KomplektovkaView K = new KomplektovkaView();
            
   
            if (Prichina.Equals("")) { return Json(Resources.Resource.ZapolniteYellow); }
            else
            {
                string[] S = Prichina.Split(';');
                try
                {
                    int PrichinaId = Convert.ToInt16(S[1]);
                    Prichina = db.PrichiniSpisaniya.Where(x => x.Id == PrichinaId).Select(x => x.NameZh).First()+" -> "+ S[0];
                }
                catch
                {

                }
            }
         
           if (ItemId==0 || BOMId ==0 || QTY<=0 || StockTo.Equals("")|| Manager.Equals(""))
            {
                return Json(Resources.Resource.ZapolniteYellow);
            }
                try
                {
                BOMEntry = db.PPBOMEntry.Where(x => x.FItemID == ItemId && x.FInterID == BOMId).First();
                Work = db.ICMO.Where(x => x.FInterID == BOMEntry.FICMOInterID).First();

                }
                catch
                {

                }
            
            try
            {
               if (BOMEntry.FWIPQTY<0 || BOMEntry.FWIPQTY<QTY)
                {
                    return Json(Resources.Resource.NedostatochnoVNZP);
                }
            }
            catch
            {

            }

            try
            {
             
                StockId = FindStockID(StockTo);//ICE.FSCStockID;
                StockName = db.t_Item.Where(x => x.FItemID== StockId).Select(x=>x.FName).First();

            }
            catch
            {

            }
            if (User == "")
            {
                return Json(Resources.Resource.ViberitePolzovatelya);
            }
            try
            {
                DepartmentID = Work.FWorkShop.Value;
                DepartmentName = db.t_Item.Where(x => x.FItemID == DepartmentID).Select(x => x.FName).First();

                ManagerID = U.MOLId; //FindUserID(FindCurrentUser());//FindManagerID(Manager);
                UserID = U.UserID;//FindUserID(FindCurrentUser());//db.t_Item.Where(x => x.FItemClassID == 3 && x.FName.Equals(User)).Select(a => a.FItemID).First();
                Item = db.t_Item.Where(x => x.FItemID == ItemId).Include(x => x.NomenklaturaEnterprise).First();

                QTYnaSklade = BOMEntry.FWIPQTY.Value;// QTYNaSklade(StockFromID, Item.FItemID);


            }
            catch (Exception e)
            {
                return Json(Resources.Resource.ZapolniteYellow);
            }



            if (QTYnaSklade < QTY)
            {
                return Json(Resources.Resource.VveliBolsheChemVZakaze);
            }

            if (QTY == 0)
            {
                return Json(Resources.Resource.NomenklaturiNedostatochno);
            }


            SaveToDocLog(0, ItemId, "Начат возврат из НЗП сторно SOUT", QTY, StockId, BOMEntry.FICMOInterID, "");

            var MaxNum = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            //Плюсуем макс номер
            MaxNum.FMaxNum++;

            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 24).First();
           

            string SOUT = "SOUT" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);

       


            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum.FMaxNum.Value;
            StockBill.FDate = DateTime.Now.Date;
            StockBill.FTranType = 24;
            StockBill.FBillNo = SOUT;
            StockBill.FDeptID = DepartmentID; //Возможно можно перемещать на подразделение!!! 270 есть в таблице
            StockBill.FEmpID = null;
            StockBill.FSupplyID = null;
            StockBill.FCheckerID = UserID;
            StockBill.FManagerID = ManagerID;
            StockBill.FSManagerID = ManagerID; //ОтКого
            StockBill.FBillerID = UserID;
            StockBill.FFManagerID = ManagerID;//Кому
            StockBill.FPosterID = UserID;

            StockBill.FHookInterID = 0;//Неизвестно что за хук
            StockBill.FPosted = 1;
            StockBill.FCheckSelect = 0;
            StockBill.FROB = -1;
            StockBill.FNote = Prichina;
            StockBill.FUse = Prichina; //Только это поле видно в сторно причина пишется сюда
            StockBill.FStatus = 1;
            StockBill.FUpStockWhenSave = false;
            StockBill.FCancellation = false;
            StockBill.FOrgBillInterID = 0;
            StockBill.FBillTypeID = 0;
            StockBill.FPOStyle = null;
            StockBill.FBackFlushed = false;
            StockBill.FPurposeID = 12000;
            StockBill.FUUID = Guid.NewGuid();
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
            StockBill.FMarketingStyle = 12530;
            StockBill.FRefType = 0;
            StockBill.FCheckDate = DateTime.Now;
            StockBill.FExplanation = Prichina;
            StockBill.FSelTranType = 85;// также может быть 85, 0, 1012510
            StockBill.FChildren = 0;
            StockBill.FHookStatus = 0;
            StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;
            StockBill.FsourceType = 37521;
            StockBill.FPayCondition = 0;
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
            StockBill.FPOMode = 0;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";
            StockBill.FHeadSelfA0143 = "KingDeeWeb";
            StockBill.FVchInterID = null; // Для сторно везде так стоят 46541
            StockBill.FHeadSelfB0435 = Work.FNote;//Тянем производимый объект из ворка
            
            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum.FMaxNum.Value;

                db.Entry(MaxNum).State = EntityState.Modified;
                db.SaveChanges();


                MaxStockID.FCurNo++;
                MaxStockID.FDesc = "SOUT+" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();

                bool BC = BillCodeDvig(24, MaxStockID.FCurNo.Value);
                SaveToDocLog(0, ItemId, "Сдвинут счетчик SOUT статус="+BC.ToString(), QTY, StockId, BOMEntry.FICMOInterID, SOUT);
                SaveToDocLog(0, ItemId, "Создана шапка документа сторно SOUT", QTY, StockId, BOMEntry.FICMOInterID, SOUT);
                go = true;
            }
            catch (Exception e)
            {

            }




            int QRID = 0;
            bool PrintQR = false;
            DvigenieNEW D = new DvigenieNEW();
            if (go)//если добавлена шапка то добавляем строки
            {

                D =CreateNewQRCode(SOUT, ItemId, StockId, QTY, SOUT, 0, 0, "", 0, 0, 0, true, false, Work.FInterID);
                AddProverkaOTK(D.QRString, 2);
                    PrintQR = true;
              
                go = false;
                try
                {
                    Entry.FBrNo = "0";

                    Entry.FItemID = Item.FItemID;
                    Entry.FQtyMust = -QTY;
                    Entry.FAuxQtyMust = -QTY;
                    Entry.FQty = -QTY;
                    Entry.FPrice = FindPlanPrice(ItemId); //Цену нужно откуда-то брать при перемещении
                    Entry.FBatchNo = "";
                    decimal Q = Convert.ToDecimal(QTY);
                    decimal C = Convert.ToDecimal(Entry.FPrice);
                    Entry.FAmount = Q * C;
                    Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                    Entry.FNote = Prichina;
                    Entry.FUnitID = 259;//Это единица измерения
                    Entry.FAuxPrice = Entry.FPrice;
                    Entry.FPurchasePrice = Entry.FPurchasePrice; // Закупочная цена с налогом из заказа поставщику
                    Entry.FPurchaseAmount = Q * Entry.FPurchasePrice;
                    Entry.FAuxQty = -QTY;
                    Entry.FPriceRef = Entry.FPrice;
                    Entry.FAuxPriceRef = Entry.FAuxPrice;
                    Entry.FAmtRef = Q * C;
                    Entry.FSourceBillNo = Work.FBillNo;
                    Entry.FICMOBillNo = Work.FBillNo;
                    Entry.FICMOInterID = Work.FInterID;
                    Entry.FPPBomEntryID = 1;// Work.PPBOM.PPBOMEntry.Where(x => x.FItemID == ItemID).First().FEntryID; //TODO ПЕРЕДЕЛАТЬ
                    Entry.FSourceTranType = 85;
                    Entry.FSCStockID = StockId;//куда
                    Entry.FDCStockID = 0;//откуда
                    Entry.FSourceInterId = Work.FInterID;
                    Entry.FSourceEntryID = BOMEntry.FEntryID;
                    Entry.FPlanAmount = -Entry.FAmount;
                    Entry.FOrderBillNo = "";
                    Entry.FOrderInterID = 0;
                    Entry.FOrderEntryID = 0;
                    Entry.FCostOBJID = Work.FCostObjID;// Тянем ID производимого объекта
                    Entry.FMapNumber = D.QRString;//Сюда сохраняем QR Id
                    Entry.FReProduceType = 1059;
                    Entry.FPlanMode = 14036;//Тянется не тот заказ покупателя
                    Entry.FEntrySelfB0457 = DepartmentName;
                    Entry.FEntrySelfB0458 = StockName;

                    Entry.FContractBillNo = "";
                    Entry.FMTONo = "";
                    Entry.FItemSize = "";
                    Entry.FItemSuite = "";
                    Entry.FPositionNo = "";
                    Entry.FSEOutBillNo = "";
                    Entry.FConfirmMemEntry = "";
                    Entry.FItemStatementBillNO = "";
                    Entry.FReturnNoticeBillNO = "";
                    Entry.FSplitState = "";


                    BOMEntry.FQty -= QTY;
                    BOMEntry.FAuxQty -= QTY;
                    BOMEntry.FStockQty = BOMEntry.FQty;
                    BOMEntry.FAuxStockQty = BOMEntry.FQty;
                    BOMEntry.FWIPAuxQTY -= QTY;
                    BOMEntry.FWIPQTY -= QTY;


                    BOMEntry.FQtySupply = 0;//Math.Abs(BOMEntry.FAuxQtyMust - BOMEntry.FAuxStockQty); // Добавлено 22.09 так как отчеты Умара не сходятся. Поле должно показывать разницу.
                    BOMEntry.FAuxQtySupply = 0;//BOMEntry.FQtySupply;
                }
                catch
                {
                    return Json("Ошибка при создании строки. Данное задание на производство не содержит в БОМ номенклатуры " + Item.FNumber);
                }

                try
                {
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();
                    SaveToDocLog(0, ItemId, "Создана строка документа сторно SOUT", QTY, StockId, BOMEntry.FICMOInterID, SOUT);
                    db.Entry(BOMEntry).State = EntityState.Modified;
                    db.SaveChanges();
                    SaveToDocLog(0, ItemId, "Отредактирован БОМ SOUT", QTY, StockId, BOMEntry.FICMOInterID, SOUT);


                    go = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                }
            }

            //Редактируем НЗПNEW
            try
            {
                List<NZPNEW> nzp = db.NZPNEW.Where(x => x.Active && x.WorkId == BOMEntry.FICMOInterID && x.QTYFact > 0).ToList();
                decimal Spisat = QTY;
                foreach (var n in nzp)
                {
                    if (Spisat<=n.QTYFact)
                    {
                       
                        try
                        {
                            n.QTYFact = n.QTYFact - Spisat;
                            db.Entry(n).State = EntityState.Modified;
                            db.SaveChanges();
                            Spisat = 0;
                            break;
                        }
                        catch
                        {

                        }
                     

                    }
                    else
                    {
                        Spisat = n.QTYFact - Spisat;
                        n.QTYFact = 0;
                        n.Active = false;
                        db.Entry(n).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                }
                
            }
            catch
            {

            }

              if (go)
            {
                //   go = PeremeshenieNaSklad(StockFromID, Item.FItemID, QTY, false);//Минусуем на склад
                go = PeremeshenieNaSklad(MaxNum.FMaxNum.Value,  StockId, Item.FItemID, QTY, true);                                                                // if (go)
                                                                                                                                           // {
            }

            if (go)
            {
                Message = "Ok";
            }
            else
            {
                Message = "Error";
            }

            return Json(Message + ";" + D.Id + ";" + PrintQR, JsonRequestBehavior.AllowGet);
        }

        //Сторно перемещенимя на пр-во
        public JsonResult StornoPeremensheniyaNaProizvodstvoJson(int DvigenieId, string Manager, decimal QTY, string StockTo)
        {
            string Message = "";

            int StockFromID = 0;
            ICMO Work = new ICMO();
            int ManagerID = 0;
            int UserID = 0;
            int DepartmentID = 0;
            t_Item Item = new t_Item();
            PPBOMEntry BOMEntry = new PPBOMEntry();
            ICStockBill IC = new ICStockBill();
            ICStockBillEntry ICE = new ICStockBillEntry();
            decimal QTYnaSklade = 0;
            UsersKDW U = CurrentKDWUserModel();
            string User = U.t_Base_User.FName;//FindCurrentUser();
            int StockID = 0;
            int StockFromId = 0;
            Dvigenie Dvig = new Dvigenie();
          //  UsersKDW U = FindCurrentKDWUser();
            KomplektovkaView K = new KomplektovkaView();
            if (DvigenieId != null && DvigenieId != 0)
            {
                try
                {
                    Dvig = FindDvigenie(DvigenieId);
                    IC = db.ICStockBill.Where(x => x.FBillNo.Equals(Dvig.FBillNo)).Include(x => x.ICStockBillEntry).First();
                    ICE = IC.ICStockBillEntry.Where(x => x.FItemID == Dvig.ItemID).First();

                }
                catch
                {

                }
            }
            else
            {
                return Json(Resources.Resource.Error);
            }


            ItemView I = new ItemView();
            if (DvigenieId != 0)
            {
                try
                {
                    I.LastDvig = Dvig;
                    
                  /*    I.Item = I.LastDvig.Item;
                      I.POOrder = I.LastDvig.POOrder;
                      I.QTY = I.LastDvig.QTYFact;
                      I.Lev = I.LastDvig.Lev;
                      I.StockOrDep = I.LastDvig.Stock;
                      I.FindDvigenies();
                  */
         
                }
                catch
                {

                }
            }

            try
            {
                StockFromID = I.LastDvig.StockId;
                StockID = FindStockID(StockTo) ;//ICE.FSCStockID;
            }
            catch
            {

            }
            if (User == "")
            {
                return Json(Resources.Resource.ViberitePolzovatelya);
            }
            try
            {
                DepartmentID = Dvig.StockId;
                Work = db.ICMO.Where(x => x.FBillNo.Equals(ICE.FSourceBillNo)).Include(x => x.t_Department).Include(x => x.PPBOM).First();
                int BOM = Work.PPBOM.First().FInterID;
                BOMEntry = db.PPBOMEntry.Where(x => x.FItemID == Dvig.ItemID && x.FInterID == BOM).First();
                //     DepartmentID = Work.t_Department.FItemID;
                ManagerID = U.MOLId; //FindUserID(FindCurrentUser());//FindManagerID(Manager);
                UserID = U.UserID;//FindUserID(FindCurrentUser());//db.t_Item.Where(x => x.FItemClassID == 3 && x.FName.Equals(User)).Select(a => a.FItemID).First();
                Item = db.t_Item.Where(x => x.FItemID == Dvig.ItemID).Include(x => x.NomenklaturaEnterprise).First();
                QTYnaSklade = Dvig.QTYFact;// QTYNaSklade(StockFromID, Item.FItemID);

            
            }
            catch (Exception e)
            {
                return Json(Resources.Resource.ZapolniteYellow);
            }



            if (QTYnaSklade < QTY)
            {
                return Json(Resources.Resource.VveliBolsheChemVZakaze);
            }

            if (QTY == 0)
            {
                return Json(Resources.Resource.NomenklaturiNedostatochno);
            }

            var MaxNum = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            //Плюсуем макс номер
            MaxNum.FMaxNum++;

            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 24).First();

            string SOUT = "SOUT" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);




            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum.FMaxNum.Value;
            StockBill.FDate = DateTime.Now.Date;
            StockBill.FTranType = 24;
            StockBill.FBillNo = SOUT;
            StockBill.FDeptID = DepartmentID; //Возможно можно перемещать на подразделение!!! 270 есть в таблице
            StockBill.FEmpID = null;
            StockBill.FSupplyID = null;
            StockBill.FCheckerID = UserID; 
            StockBill.FManagerID = ManagerID;
            StockBill.FSManagerID = ManagerID; //ОтКого
            StockBill.FBillerID = UserID;
            StockBill.FFManagerID = ManagerID;//Кому

            StockBill.FHookInterID = 0;//Неизвестно что за хук
            StockBill.FVchInterID = null;//При перемещении есть записи с указанным ID например 229
            StockBill.FPosted = 1;
            StockBill.FCheckSelect = 0;
            StockBill.FROB = -1;
            StockBill.FStatus = 1;
            StockBill.FUpStockWhenSave = false;
            StockBill.FCancellation = false;
            StockBill.FOrgBillInterID = 0;
            StockBill.FBillTypeID = 0;
            StockBill.FPOStyle = null;
            StockBill.FBackFlushed = false;
            StockBill.FPurposeID = 12000;
            StockBill.FUUID = Guid.NewGuid();
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
            StockBill.FMarketingStyle = 12530;
            StockBill.FRefType = 0;
            StockBill.FCheckDate = DateTime.Now;
            StockBill.FExplanation = "WEB "+U.Name;
            StockBill.FSelTranType = 85;// также может быть 85, 0, 1012510
            StockBill.FChildren = 0;
            StockBill.FHookStatus = 0;
            StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;
            StockBill.FsourceType = 37521;
            StockBill.FPayCondition = 0;
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
            StockBill.FPOMode = 0;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";
            StockBill.FHeadSelfA0143 = "KingDeeWeb";
            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum.FMaxNum.Value;

                db.Entry(MaxNum).State = EntityState.Modified;
                db.SaveChanges();


                MaxStockID.FCurNo++;
                MaxStockID.FDesc = "SOUT+" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();
                go = true;
            }
            catch (Exception e)
            {

            }



            var QR = new QRTable();
            int QRID = 0;
            bool PrintQR = false;
            if (go)//если добавлена шапка то добавляем строки
            {

              /*  if (Dvig.QTYFact == QTY)
                {
                    SaveDvigenie(SOUT, QTY, Dvig.ItemID, Dvig.POOrderId, DepartmentID, Dvig.QRID.Value, Dvig.Lev, Dvig.Parent, Work.FBillNo);
                    QRID = Dvig.QRID.Value;
                }
                else
                {
                    int lvl = SelectMaxLev(Dvig.POOrderId, Dvig.ItemID);
                    lvl++;
                    SaveDvigenie(SOUT, QTY, Dvig.ItemID, Dvig.POOrderId, DepartmentID, Dvig.QRID.Value, lvl, Dvig.Id, Work.FBillNo);

                    QRID = SaveQR(Dvig.Item, QTY, Dvig.POOrderId, lvl); //Сохраняем QR
                    PrintQR = true;
                }
                decimal QTYFact = Dvig.QTYFact - QTY;
                EditDvigenie(Dvig, QTYFact);//Редактируем предыдущее движение, обновляем фактическое кол-во

                */

                if (QTY == Dvig.QTYFact)//если сторнируем всю партию
                {
                    SaveDvigenie(Dvig.ZakazPostavshiku,StockBill.FBillNo, QTY, Item.FItemID, Dvig.POOrder.FInterID, StockFromId, StockID, QRID, Dvig.Lev, 0, "STORNO", Dvig.Mnimoe);
                    QRID = Dvig.QRID.Value;
                }
                else
                {
                    int MaxLVL = SelectMaxLev(Dvig.POOrder.FInterID, Dvig.Item.FItemID, Dvig.ZakazPostavshiku);
                    MaxLVL++;
                    QRID = SaveQR(Item, Dvig.ZakazPostavshiku, Dvig.POOrder.FInterID, MaxLVL);//поступление на склад генерит 0 уровень

                    //Добавляем движение
                    SaveDvigenie(Dvig.ZakazPostavshiku,StockBill.FBillNo,  QTY, Item.FItemID, Dvig.POOrder.FInterID,StockFromId, StockID, QRID, MaxLVL, Dvig.Id, "STORNO", Dvig.Mnimoe);
                    PrintQR = true;
                }

                EditDvigenie(Dvig, Dvig.QTYFact - QTY);


                //Сохраняем QR код
                // string STQ = Item.FNumber + ";" + Item.FName + ";" + QTY + ";" + StockBill.FCheckDate.Value.ToString("dd.MM.yyyy") + ";" + SOUT + ";" + FindRussianName(Item) + ";" + DepartmentID + ";";


                go = false;
                try
                {
                    Entry.FBrNo = "0";

                    Entry.FItemID = Item.FItemID;
                    Entry.FQtyMust = QTY;
                    Entry.FAuxQtyMust = QTY;
                    Entry.FQty = -QTY;
                    Entry.FPrice = 0; //Цену нужно откуда-то брать при перемещении
                    Entry.FBatchNo = "";
                    decimal Q = Convert.ToDecimal(QTY);
                    decimal C = Convert.ToDecimal(Entry.FPrice);
                    Entry.FAmount = Q * C;
                    Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                    Entry.FNote = "KingDeeWeb";
                    Entry.FUnitID = 259;//Это единица измерения
                    Entry.FAuxPrice = Entry.FPrice;
                    Entry.FPurchasePrice = Entry.FPurchasePrice; // Закупочная цена с налогом из заказа поставщику
                    Entry.FPurchaseAmount = Q * Entry.FPurchasePrice;
                    Entry.FAuxQty = -QTY;
                    Entry.FPriceRef = Entry.FPrice;
                    Entry.FAuxPriceRef = Entry.FAuxPrice;
                    Entry.FAmtRef = Q * C;
                    Entry.FSourceBillNo = Work.FBillNo;
                    Entry.FICMOBillNo = Work.FBillNo;
                    Entry.FICMOInterID = Work.FInterID;
                    Entry.FPPBomEntryID = 1;// Work.PPBOM.PPBOMEntry.Where(x => x.FItemID == ItemID).First().FEntryID; //TODO ПЕРЕДЕЛАТЬ
                    Entry.FSourceTranType = 85;
                    Entry.FSCStockID = StockFromID;//откуда
                    Entry.FDCStockID = 0;//куда
                    Entry.FSourceInterId = Work.FInterID;
                    Entry.FPlanAmount = -Entry.FAmount;
                    Entry.FOrderBillNo = "";
                    Entry.FOrderInterID = 0;
                    Entry.FOrderEntryID = 0;
                    Entry.FMapNumber = QR.Id.ToString();//Сюда сохраняем QR Id
                    Entry.FReProduceType = 1059;
                    Entry.FPlanMode = 14036;


                    Entry.FContractBillNo = "";
                    Entry.FICMOBillNo = "";
                    Entry.FMTONo = "";
                    Entry.FItemSize = "";
                    Entry.FItemSuite = "";
                    Entry.FPositionNo = "";
                    Entry.FSEOutBillNo = "";
                    Entry.FConfirmMemEntry = "";
                    Entry.FItemStatementBillNO = "";
                    Entry.FReturnNoticeBillNO = "";
                    Entry.FSplitState = "";


                    BOMEntry.FQty -= QTY;
                    BOMEntry.FAuxQty -= QTY;
                    BOMEntry.FStockQty -= QTY;
                    BOMEntry.FAuxStockQty -= QTY;
                    BOMEntry.FWIPAuxQTY -= QTY;
                    BOMEntry.FWIPQTY -= QTY;

                }
                catch
                {
                    return Json("Ошибка при создании строки. Данное задание на производство не содержит в БОМ номенклатуры " + Item.FNumber);
                }

                try
                {
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();

                    db.Entry(BOMEntry).State = EntityState.Modified;
                    db.SaveChanges();



                    go = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                }
            }

            if (go)
            {
             //   go = PeremeshenieNaSklad(StockFromID, Item.FItemID, QTY, false);//Минусуем на склад
                go = PeremeshenieNaSklad(MaxNum.FMaxNum.Value,StockID, Item.FItemID, QTY, true);                                                                // if (go)
                                                                                                                                                // {
            }

            if (go)
            {
                Message = "Ok";
            }
            else
            {
                Message = "Error";
            }
            //     "(FBrNo, FInterID, FEntryID, FItemID, FQtyMust,FAuxQtyMust, FQty, FPrice, FBatchNo, " +
            //                        "FAmount, FNote, FUnitID, FAuxPrice, FAuxQty, FProcessCost, FMaterialCost, FTaxAmount," +
            //                         " FSourceBillNo, FDCStockID, FSourceInterId, FOrderBillNo, FOrderInterID, FOrderEntryID)" +
            //                         "VALUES('O', " + InterId + "," + NPP + ", " + NL[0].FItemId + ", " + KolichestvoVZakaze + ", " + KolichestvoVZakaze + ", " + QTY + ", " + CENA + ", '', " +
            //                         "" + Amount + ", 'Enterprise', 259, " + CENA + ", " + QTY + ", 0, 0, 0," +
            //                         " '" + PURCH + "', " + SkladKitai + ", " + PURCHINTERID + ", '" + PURCH + "', " + PURCHINTERID + "," + StrokaPURCH + ")", true);




            //Меняем остатки в заказе поставщику
            try
            {

                //   db.Entry(Item).State = EntityState.Modified;
                //    db.SaveChanges();
                ViewBag.Message = "Ok";
            }
            catch (Exception E)
            {
                ViewBag.Message = "Ошибка = " + E.Message;
            }


            return Json(Message + ";" + QRID + ";" + PrintQR, JsonRequestBehavior.AllowGet);
        }

        public decimal FindPlanPrice (int ItemId)
        {
            decimal Price = 0;
            try
            {
                Price = db.t_ICItem.Where(x => x.FItemID == ItemId).Select(x=>x.FPlanPrice.Value).First();
            }
            catch
            {

            }
            return Price;
        }


     


        public string SOUTfromQR(int DvigenieId, int WorkId, int ManagerID, int UserId, int DepartmentId, decimal QTY, int LiniyaId)
        {
            string Message = "";

            int StockFromID = 0;
            ICMO Work = new ICMO();
          

            UsersKDW U = FindCurrentKDWUser();

            t_Item Item = new t_Item();
            PPBOMEntry BOMEntry = new PPBOMEntry();
            decimal QTYnaSklade = 0;
            decimal Price = 0;
            string User = FindCurrentUser();
            int StockID = 0;
            Dvigenie Dvig = new Dvigenie();
            if (DvigenieId != null && DvigenieId != 0)
            {
                try
                {
                    Dvig = FindDvigenie(DvigenieId);
                }
                catch
                {

                }
            }
            else
            {
                return Resources.Resource.Error;
            }

            try
            {
                StockID = Dvig.StockId;

            }
            catch
            {

            }
            if (User == "")
            {
                return Resources.Resource.Error;
            }
            try
            {

                Price = FindPrice(Dvig);
                StockFromID = StockID;
                Work = db.ICMO.Where(x => x.FInterID == WorkId).Include(x => x.t_Department).First();
               // int BOM = Work.PPBOM.First().FInterID;
                BOMEntry = db.PPBOMEntry.Where(x => x.FItemID == Dvig.ItemID && x.FICMOInterID == Work.FInterID).First();
                //   UserID = db.t_Item.Where(x => x.FItemClassID == 3 && x.FName.Equals(User)).Select(a => a.FItemID).First();
                Item = db.t_Item.Where(x => x.FItemID == Dvig.ItemID).First();
                //  QTYnaSklade = Dvig.QTYFact;// QTYNaSklade(StockFromID, Item.FItemID);
                SaveToDocLog(DvigenieId,Item.FItemID, "Начали создание документа SOUT", QTY, 0, WorkId, "Пока не создан");
            }
            catch (Exception e)
            {
                SaveToDocLog(DvigenieId, Item.FItemID, "Ошибка ", QTY, 0, WorkId, "Пока не создан");
                return Resources.Resource.Error;
            }



            //   if (QTYnaSklade < QTY)
            //   {
            //        return Json(Resources.Resource.VveliBolsheChemVZakaze);
            //   }

            //   if (QTY == 0)
            //  {
            //       return Json(Resources.Resource.NomenklaturiNedostatochno);
            //   }

            // var MaxNum = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            int MaxNum = FindMaxNumStockBill();
            var MaxNumTable = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();
            //Плюсуем макс номер
            MaxNum++;

            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 24).First();

            string SOUT = "SOUT" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);




            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum;
            StockBill.FDate = DateTime.Now.Date;
            StockBill.FTranType = 24;
            StockBill.FBillNo = SOUT;
            StockBill.FDeptID = DepartmentId; //Перемещать на подразделение!!! 270 есть в таблице
            StockBill.FEmpID = null;
            StockBill.FSupplyID = null;
            StockBill.FCheckerID = UserId; 
            StockBill.FManagerID = U.MOLId;
            StockBill.FSManagerID = U.MOLId;
            StockBill.FBillerID = UserId;
            StockBill.FFManagerID = ManagerID;

            StockBill.FHookInterID = 0;//Неизвестно что за хук
            StockBill.FVchInterID = null;//При перемещении есть записи с указанным ID например 229
            StockBill.FPosted = 1;
            StockBill.FCheckSelect = 0;
            StockBill.FROB = 1;
            StockBill.FStatus = 1;
            StockBill.FUpStockWhenSave = false;
            StockBill.FCancellation = false;
            StockBill.FOrgBillInterID = 0;
            StockBill.FBillTypeID = 0;
            StockBill.FPOStyle = null;
            StockBill.FBackFlushed = false;
            StockBill.FPurposeID = 12000;
            StockBill.FUUID = Guid.NewGuid();
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
            StockBill.FMarketingStyle = 12530;
            StockBill.FRefType = 0;
            StockBill.FCheckDate = DateTime.Now.Date;
            StockBill.FExplanation = "WEB "+ U.Name;
            StockBill.FSelTranType = 85;// также может быть 85, 0, 1012510
            StockBill.FChildren = 0;
            StockBill.FHookStatus = 0;
            StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;
            StockBill.FsourceType = 37521;
            StockBill.FPayCondition = 0;
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
            StockBill.FNote = FindModelByItem(Dvig.ItemID);
            StockBill.FPOMode = 0;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";
            StockBill.FHeadSelfA0143 = "KingDeeWeb";
            StockBill.FAcctID = 0;
            StockBill.FVchInterID = null;//В SOUT здесь должен быть 0 Выявлено 03.03.2023
            StockBill.FHeadSelfB0435 = Work.FNote;//Тянем производимый объект из ворка
    
            if (LiniyaId != 0)
            {
                StockBill.FHeadSelfB0436 = LiniyaId;
            }
            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum;

                MaxNumTable.FMaxNum=MaxNum;
                db.Entry(MaxNumTable).State = EntityState.Modified;
                db.SaveChanges();
                SaveToDocLog(DvigenieId, Item.FItemID, "Создали документ SOUT ", QTY, 0, WorkId, SOUT);

                MaxStockID.FCurNo++;
                MaxStockID.FDesc = "SOUT+" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();
                go = true;
            }
            catch (Exception e)
            {

            }



            var QR = new QRTable();
            int QRID = 0;
            int DvigId = 0;
            bool PrintQR = false;
            if (go)//если добавлена шапка то добавляем строки
            {

                if (Dvig.QTYFact == QTY)
                {
                  DvigId =  SaveDvigenie(Dvig.ZakazPostavshiku,SOUT, 0, Dvig.ItemID, Dvig.POOrderId, StockFromID, DepartmentId, Dvig.QRID.Value, Dvig.Lev, Dvig.Parent, Work.FBillNo, Dvig.Mnimoe);
                    QRID = Dvig.QRID.Value;
                    AddStatusOTK(DvigId, 2);
                    SaveToDocLog(DvigId, Item.FItemID, "Количество в движении равен перемещаемому количеству. QRID=" + QRID, QTY, 0, WorkId, SOUT);
                }
                else
                {
                    int lvl = SelectMaxLev(Dvig.POOrderId, Dvig.ItemID, Dvig.ZakazPostavshiku);
                    lvl++;
                   
                    QRID = SaveQR(Dvig.Item, Dvig.ZakazPostavshiku, Dvig.POOrderId, lvl); //Сохраняем QR Dvig.QRID.Value
                    DvigId = SaveDvigenie(Dvig.ZakazPostavshiku, SOUT, 0, Dvig.ItemID, Dvig.POOrderId, StockFromID, DepartmentId, QRID , lvl, Dvig.Id, Work.FBillNo, Dvig.Mnimoe);
                    PrintQR = true;
                    AddStatusOTK(DvigId, 2);
                    SaveToDocLog(DvigId, Item.FItemID, "Количество в движении не равно перемещаемому количеству. QRID=" + QRID, QTY, 0, WorkId, SOUT);
                }
                decimal QTYFact = Dvig.QTYFact - QTY;


                SaveToDocLog(DvigId, Item.FItemID, "Создали движение для документа SOUT. QRID="+QRID, QTY, 0, WorkId, SOUT);

                EditDvigenie(Dvig, QTYFact);//Редактируем предыдущее движение, обновляем фактическое кол-во

                //Сохраняем QR код
                // string STQ = Item.FNumber + ";" + Item.FName + ";" + QTY + ";" + StockBill.FCheckDate.Value.ToString("dd.MM.yyyy") + ";" + SOUT + ";" + FindRussianName(Item) + ";" + DepartmentID + ";";

              

                go = false;
                try
                {
                    Entry.FBrNo = "0";

                    Entry.FItemID = Item.FItemID;
                    Entry.FQtyMust = QTY;
                    Entry.FAuxQtyMust = QTY;
                    Entry.FQty = QTY;
                    Entry.FPrice = Price;
                
                    Entry.FBatchNo = "";
                    decimal Q = Convert.ToDecimal(QTY);
                    decimal C = Convert.ToDecimal(Entry.FPrice);
                    Entry.FAmount = Q * C;
                    Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                    Entry.FNote = FindModelByItem(Item.FItemID);
                    Entry.FUnitID = 259;//Это единица измерения
                    Entry.FAuxPrice = Entry.FPrice;
                    Entry.FPurchasePrice = Entry.FPurchasePrice; // Закупочная цена с налогом из заказа поставщику
                    Entry.FPurchaseAmount = Q * Entry.FPurchasePrice;
                    Entry.FAuxQty = QTY;
                    Entry.FPriceRef = Entry.FPrice;
                    Entry.FAuxPriceRef = Entry.FAuxPrice;
                    Entry.FAmtRef = Q * C;
                    Entry.FSourceBillNo = Work.FBillNo;
                    Entry.FICMOBillNo = Work.FBillNo;
                    Entry.FICMOInterID = Work.FInterID;
                    Entry.FPPBomEntryID = BOMEntry.FEntryID;// Work.PPBOM.PPBOMEntry.Where(x => x.FItemID == ItemID).First().FEntryID; //TODO ПЕРЕДЕЛАТЬ
                    Entry.FSourceTranType = 85;
                    Entry.FSCStockID = StockFromID;//откуда
                    Entry.FDCStockID = 0;//куда
                    Entry.FSourceInterId = Work.FInterID;
                    Entry.FCostOBJID = Work.FCostObjID;// Тянем ID производимого объекта
                    Entry.FPlanPrice = FindPlanPrice(Item.FItemID);
                    decimal P = Convert.ToDecimal(Entry.FPlanPrice);
                    Entry.FAuxPlanPrice = Entry.FPlanPrice;
                    Entry.FPlanAmount = Q * P;
                    Entry.FSourceEntryID = 1;//Видимо ссылка на бом номер строки в боме?
                    Entry.FOrderBillNo = "";
                    Entry.FOrderInterID = 0;
                    Entry.FOrderEntryID = 0;
                    Entry.FMapNumber = QR.Id.ToString();//Сюда сохраняем QR Id
                    Entry.FReProduceType = 1059;
                    Entry.FPlanMode = 14036;
                    Entry.FEntrySelfB0457 = "";// Наименование поставщика
                    Entry.FEntrySelfB0458 = ""; //Наименование склада


                    Entry.FContractBillNo = "";
                 
                    Entry.FMTONo = "";
                    Entry.FItemSize = "";
                    Entry.FItemSuite = "";
                    Entry.FPositionNo = "";
                    Entry.FSEOutBillNo = "";
                    Entry.FConfirmMemEntry = "";
                    Entry.FItemStatementBillNO = "";
                    Entry.FReturnNoticeBillNO = "";
                    Entry.FSplitState = "";




                    BOMEntry.FQty += QTY;
                    BOMEntry.FAuxQty += QTY;
                    BOMEntry.FStockQty += QTY;
                    BOMEntry.FAuxStockQty += QTY;
                    BOMEntry.FWIPAuxQTY += QTY;
                    BOMEntry.FWIPQTY += QTY;


                }
                catch (Exception e)
                {
                    return Resources.Resource.Error;
                }

                try
                {
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();
                    SaveToDocLog(DvigId, Item.FItemID, "Создали строку в документе SOUT. N" + Entry.FInterID +"E"+Entry.FEntryID , QTY, 0, WorkId, SOUT);
                    db.Entry(BOMEntry).State = EntityState.Modified;
                    db.SaveChanges();
                    SaveToDocLog(DvigId, Item.FItemID, "Отредактировали бом", QTY, 0, WorkId, SOUT);



                    go = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                    SaveToDocLog(DvigId, Item.FItemID, " Не смогли добавить строку " + ex.Message, QTY, 0, WorkId, SOUT);

                }
            }

            if (go)
            {
                go = PeremeshenieNaSklad(MaxNum,StockFromID, Item.FItemID, QTY, false);//Минусуем на склад
                                                                                // if (go)
                                                                                // {
                                                                                //      go = PeremeshenieNaSklad(StockToID, Item.FItemID, QTY, true);//Плюсуем на склад
                                                                                //  }
            

            }

            if (go)
            {
                Message = "Ok";
            }
            else
            {
                Message = "Error";
            }
        



            //Меняем остатки в заказе поставщику
            try
            {

                //   db.Entry(Item).State = EntityState.Modified;
                //    db.SaveChanges();
                ViewBag.Message = "Ok";
            }
            catch (Exception E)
            {
                SaveToDocLog(DvigId, Item.FItemID, " Ошибка " + E.Message, QTY, 0, WorkId, SOUT);
                ViewBag.Message = "Ошибка = " + E.Message;
            }


            //   return DvigId;
            //Возвращаем ID документа SOUT
            SaveToDocLog(DvigId, Item.FItemID, " Финал передаем Json " + MaxNum + ";" + PrintQR.ToString() + ";" + QRID + ";" + DvigId, QTY, 0, WorkId, SOUT);
            return MaxNum+";"+PrintQR.ToString()+";"+QRID+";"+DvigId;
        }

        public JsonResult PeremeshenieNaProizvodstvoJsonQR(int DvigenieId, string ToWork, string Manager, decimal QTY, string Liniya)
        {
            string Message = "";

            int StockFromID = 0;
            ICMO Work = new ICMO();
            int ManagerID = 0;
            int UserID = 0;
            int DepartmentID = 0;
            int LiniyaId = 0;
            t_Item Item = new t_Item();
            PPBOMEntry BOMEntry = new PPBOMEntry();
            decimal QTYnaSklade = 0;
            decimal Price = 0;
            string User = FindCurrentUser();
            int StockID = 0;
            Dvigenie Dvig = new Dvigenie();
            if (DvigenieId != null && DvigenieId != 0)
            {
                try
                {
                    Dvig = FindDvigenie(DvigenieId);
                }
                catch
                {

                }
            }
            else
            {
                return Json(Resources.Resource.Error);
            }


            try
            {
                if (Liniya.Equals("-") == false)
                {
                  LiniyaId =   db.t_Item.Where(x => x.FItemClassID == 3004 && x.FName.Equals(Liniya)).Select(x=>x.FItemID).First();
                }
       
            }
            catch
            {

            }

            try
            {
                StockID = Dvig.StockId;

            }
            catch
            {

            }
            if (User == "")
            {
                return Json(Resources.Resource.ViberitePolzovatelya);
            }
            try
            {

                Price = FindPrice(Dvig);
                StockFromID = StockID;
                Work = db.ICMO.Where(x => x.FBillNo.Equals(ToWork)).Include(x => x.t_Department).Include(x => x.PPBOM).First();
                int BOM = Work.PPBOM.First().FInterID;
                BOMEntry = db.PPBOMEntry.Where(x => x.FItemID == Dvig.ItemID && x.FInterID == BOM).First();
                DepartmentID = Work.t_Department.FItemID;
                ManagerID = FindManagerID(Manager);
                UserID = FindUserID(User);
             //   UserID = db.t_Item.Where(x => x.FItemClassID == 3 && x.FName.Equals(User)).Select(a => a.FItemID).First();
                Item = db.t_Item.Where(x => x.FItemID == Dvig.ItemID).Include(x => x.NomenklaturaEnterprise).First();
                QTYnaSklade = Dvig.QTYFact;// QTYNaSklade(StockFromID, Item.FItemID);

            }
            catch (Exception e)
            {
                return Json(Resources.Resource.ZapolniteYellow);
            }



            if (QTYnaSklade < QTY)
            {
                return Json(Resources.Resource.VveliBolsheChemVZakaze);
            }

            if (QTY == 0)
            {
                return Json(Resources.Resource.NomenklaturiNedostatochno);
            }

            var MaxNum = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            //Плюсуем макс номер
            MaxNum.FMaxNum++;

            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 24).First();

            string SOUT = "SOUT" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);




            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum.FMaxNum.Value;
            StockBill.FDate = DateTime.Now.Date;
            StockBill.FTranType = 24;
            StockBill.FBillNo = SOUT;
            StockBill.FDeptID = DepartmentID; //Возможно можно перемещать на подразделение!!! 270 есть в таблице
            StockBill.FEmpID = null;
            StockBill.FSupplyID = null;
            StockBill.FCheckerID = UserID; // TODO найти пользака текущего. Сделать модуль регистрации пользователей и сопоставить их с кинди
            StockBill.FManagerID = ManagerID;
            StockBill.FSManagerID = ManagerID;
            StockBill.FBillerID = UserID;
            StockBill.FFManagerID = ManagerID;

            StockBill.FHookInterID = 0;//Неизвестно что за хук
            StockBill.FVchInterID = null;//При перемещении есть записи с указанным ID например 229
            StockBill.FPosted = 1;
            StockBill.FCheckSelect = 0;
            StockBill.FROB = 1;
            StockBill.FStatus = 1;
            StockBill.FUpStockWhenSave = false;
            StockBill.FCancellation = false;
            StockBill.FOrgBillInterID = 0;
            StockBill.FBillTypeID = 0;
            StockBill.FPOStyle = null;
            StockBill.FBackFlushed = false;
            StockBill.FPurposeID = 12000;
            StockBill.FUUID = Guid.NewGuid();
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
            StockBill.FMarketingStyle = 12530;
            StockBill.FRefType = 0;
            StockBill.FCheckDate = DateTime.Now;
            StockBill.FExplanation = "KingDeeWeb";
            StockBill.FSelTranType = 85;// также может быть 85, 0, 1012510
            StockBill.FChildren = 0;
            StockBill.FHookStatus = 0;
            StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;
            StockBill.FsourceType = 37521;
            StockBill.FPayCondition = 0;
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
            StockBill.FPOMode = 0;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";
            StockBill.FHeadSelfA0143 = "KingDeeWeb";
            StockBill.FAcctID = 0;
            StockBill.FVchInterID = null;
            StockBill.FHeadSelfB0435 = Work.FNote;//Тянем производимый объект из ворка
           

            if (LiniyaId!=0)
            {
                StockBill.FHeadSelfB0436 = LiniyaId;
            }
            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum.FMaxNum.Value;

                db.Entry(MaxNum).State = EntityState.Modified;
                db.SaveChanges();


                MaxStockID.FCurNo++;
                MaxStockID.FDesc = "CHG+" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();
                go = true;
            }
            catch (Exception e)
            {

            }



            var QR = new QRTable();
            int QRID = 0;
            bool PrintQR = false; 
            if (go)//если добавлена шапка то добавляем строки
            {

                if (Dvig.QTYFact == QTY)
                {
                    SaveDvigenie(Dvig.ZakazPostavshiku,SOUT, QTY, Dvig.ItemID, Dvig.POOrderId, StockFromID, DepartmentID, Dvig.QRID.Value, Dvig.Lev, Dvig.Parent, Work.FBillNo,Dvig.Mnimoe);
                    QRID = Dvig.QRID.Value;
                }
                else
                {
                    int lvl =SelectMaxLev(Dvig.POOrderId, Dvig.ItemID, Dvig.ZakazPostavshiku);
                    lvl++;
                    SaveDvigenie(Dvig.ZakazPostavshiku,SOUT, QTY, Dvig.ItemID, Dvig.POOrderId, StockFromID, DepartmentID, Dvig.QRID.Value, lvl, Dvig.Id, Work.FBillNo, Dvig.Mnimoe);
                   
                    QRID =SaveQR(Dvig.Item, Dvig.ZakazPostavshiku, Dvig.POOrderId,lvl); //Сохраняем QR
                    PrintQR = true;
                }
                decimal QTYFact = Dvig.QTYFact - QTY;
                EditDvigenie(Dvig, QTYFact);//Редактируем предыдущее движение, обновляем фактическое кол-во

                //Сохраняем QR код
                // string STQ = Item.FNumber + ";" + Item.FName + ";" + QTY + ";" + StockBill.FCheckDate.Value.ToString("dd.MM.yyyy") + ";" + SOUT + ";" + FindRussianName(Item) + ";" + DepartmentID + ";";
            /*    vw_ic_cbcostobj CostObject = new vw_ic_cbcostobj();
               string 
                try
                {
                    CostObject = db.vw_ic_cbcostobj.Where(x => x.FItemID == Work.FCostObjID).First();
                }
                catch
                {

                }
            */
                go = false;
                try
                {
                    Entry.FBrNo = "0";

                    Entry.FItemID = Item.FItemID;
                    Entry.FQtyMust = QTY;
                    Entry.FAuxQtyMust = QTY;
                    Entry.FQty = QTY;
                    Entry.FPrice = Price; 
                    Entry.FBatchNo = "";
                    decimal Q = Convert.ToDecimal(QTY);
                    decimal C = Convert.ToDecimal(Entry.FPrice);
                    Entry.FAmount = Q * C;
                    Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                    Entry.FNote = "KingDeeWeb";
                    Entry.FUnitID = 259;//Это единица измерения
                    Entry.FAuxPrice = Entry.FPrice;
                    Entry.FPurchasePrice = Entry.FPurchasePrice; // Закупочная цена с налогом из заказа поставщику
                    Entry.FPurchaseAmount = Q * Entry.FPurchasePrice;
                    Entry.FAuxQty = QTY;
                    Entry.FPriceRef = Entry.FPrice;
                    Entry.FAuxPriceRef = Entry.FAuxPrice;
                    Entry.FAmtRef = Q * C;
                    Entry.FSourceBillNo = Work.FBillNo;
                    Entry.FICMOBillNo = Work.FBillNo;
                    Entry.FICMOInterID = Work.FInterID;
                    Entry.FPPBomEntryID = 1;// Work.PPBOM.PPBOMEntry.Where(x => x.FItemID == ItemID).First().FEntryID; //TODO ПЕРЕДЕЛАТЬ
                    Entry.FSourceTranType = 85;
                    Entry.FSCStockID = StockFromID;//откуда
                    Entry.FDCStockID = 0;//куда
                    Entry.FSourceInterId = Work.FInterID;

                    Entry.FOrderBillNo = "";
                    Entry.FOrderInterID = 0;
                    Entry.FOrderEntryID = 0;
                    Entry.FMapNumber = QR.Id.ToString();//Сюда сохраняем QR Id
                    Entry.FReProduceType = 1059;
                    Entry.FPlanMode = 14036;
                    Entry.FCostOBJID = Work.FCostObjID;// Тянем ID производимого объекта
                 
                 

                    Entry.FContractBillNo = "";
                    Entry.FICMOBillNo = "";
                    Entry.FMTONo = "";
                    Entry.FItemSize = "";
                    Entry.FItemSuite = "";
                    Entry.FPositionNo = "";
                    Entry.FSEOutBillNo = "";
                    Entry.FConfirmMemEntry = "";
                    Entry.FItemStatementBillNO = "";
                    Entry.FReturnNoticeBillNO = "";
                    Entry.FSplitState = "";
                   


                    BOMEntry.FQty += QTY;
                    BOMEntry.FAuxQty += QTY;
                    
                    BOMEntry.FWIPAuxQTY += QTY;
                    BOMEntry.FWIPQTY += QTY;

                }
                catch
                {
                    return Json("Ошибка при создании строки. Данное задание на производство не содержит в БОМ номенклатуры " + Item.FNumber);
                }

                try
                {
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();

                    db.Entry(BOMEntry).State = EntityState.Modified;
                    db.SaveChanges();



                    go = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                }
            }

            if (go)
            {
                go = PeremeshenieNaSklad(MaxNum.FMaxNum.Value, StockFromID, Item.FItemID, QTY, false);//Минусуем на склад
                                                                                // if (go)
                                                                                // {
                                                                                //      go = PeremeshenieNaSklad(StockToID, Item.FItemID, QTY, true);//Плюсуем на склад
                                                                                //  }
                /* go = false;
                 //Добавляем в остаток на складе
                 ICInventory Sklad = new ICInventory();
                 int EstLiStrokaNaSklade = 0;
                 try
                 {
                     EstLiStrokaNaSklade = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == Item.FItemID).Count();
                 }
                 catch 
                 {

                 }
                 if (EstLiStrokaNaSklade > 0)
                 {

                     try
                     {
                         Sklad = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == Item.FItemID).First();
                         Sklad.FQty += FCommitQty;
                     }
                     catch (Exception SE)
                     {
                         Console.WriteLine("Не смогли найти строку на складе " + SE.Message);
                     }

                     try
                     {

                         db.Entry(Sklad).State = EntityState.Modified;
                         db.SaveChanges();
                         go = true;
                     }

                     catch (Exception exx)
                     {
                         Console.WriteLine("Ошибка добавления на склад " + exx.Message);
                     }
                 }
                 else
                 {
                     //Если нет такой строки то добавляем новую
                     Sklad.FQty = FCommitQty;
                     Sklad.FStockID = StockID;
                     Sklad.FItemID = Item.FItemID;
                     Sklad.FBrNo = "0";
                     Sklad.FBatchNo = "";
                     Sklad.FKFDate = "";
                     Sklad.FMTONo = "";
                     try
                     {
                         db.ICInventory.Add(Sklad);
                         db.SaveChanges();
                         go = true;
                     }
                     catch (Exception exxx)
                     {
                         Console.WriteLine("Не смогли добавить новую строку поступления на склад ICInventory " + exxx.Message);
                     }
                 }
                */


            }

            if (go)
            {
                Message = "Ok";
            }
            else
            {
                Message = "Error";
            }
            //     "(FBrNo, FInterID, FEntryID, FItemID, FQtyMust,FAuxQtyMust, FQty, FPrice, FBatchNo, " +
            //                        "FAmount, FNote, FUnitID, FAuxPrice, FAuxQty, FProcessCost, FMaterialCost, FTaxAmount," +
            //                         " FSourceBillNo, FDCStockID, FSourceInterId, FOrderBillNo, FOrderInterID, FOrderEntryID)" +
            //                         "VALUES('O', " + InterId + "," + NPP + ", " + NL[0].FItemId + ", " + KolichestvoVZakaze + ", " + KolichestvoVZakaze + ", " + QTY + ", " + CENA + ", '', " +
            //                         "" + Amount + ", 'Enterprise', 259, " + CENA + ", " + QTY + ", 0, 0, 0," +
            //                         " '" + PURCH + "', " + SkladKitai + ", " + PURCHINTERID + ", '" + PURCH + "', " + PURCHINTERID + "," + StrokaPURCH + ")", true);




            //Меняем остатки в заказе поставщику
            try
            {

                //   db.Entry(Item).State = EntityState.Modified;
                //    db.SaveChanges();
                ViewBag.Message = "Ok";
            }
            catch (Exception E)
            {
                ViewBag.Message = "Ошибка = " + E.Message;
            }


            return Json(Message + ";" + QRID + ";" +PrintQR, JsonRequestBehavior.AllowGet);
        }


        public decimal FindMaxVipuskByWorkAndItem(int ItemId , int WorkId )
        {
            decimal MaxPeremestit = 0;
            try
            {
             var BOM =   db.PPBOMEntry.Where(x => x.FICMOInterID == WorkId && x.FItemID == ItemId).First();
                MaxPeremestit = BOM.FQtyMust - BOM.FWIPQTY.Value;
            }
            catch
            {

            }
            return MaxPeremestit;
        }

        public JsonResult PeremeshenieNaProizvodstvoJson(string StockFrom, string ToWork, string Manager, decimal QTY, int ItemID)
        {
            string Message = "";

            int StockFromID = 0;
            ICMO Work = new ICMO();
            int ManagerID = 0;
            int UserID = 0;
            int DepartmentID = 0;
            t_Item Item = new t_Item();
            PPBOMEntry BOMEntry = new PPBOMEntry();
            decimal QTYnaSklade = 0;
            string User = FindCurrentUser();
            int StockID = 0;
            try
            {
              StockID=  Convert.ToInt32(StockFrom);

            }
            catch
            {

            }
            if (User == "")
            {
                return Json(Resources.Resource.ViberitePolzovatelya);
            }
            try
            {
                StockFromID = db.t_Stock.Where(x => x.FName.Equals(StockFrom)||x.FItemID==StockID).Select(a => a.FItemID).First();
                Work = db.ICMO.Where(x => x.FBillNo.Equals(ToWork)).Include(x=>x.t_Department).Include(x=>x.PPBOM).First();
                int BOM = Work.PPBOM.First().FInterID;
                BOMEntry = db.PPBOMEntry.Where(x => x.FItemID == ItemID && x.FInterID == BOM).First();
                DepartmentID = Work.t_Department.FItemID;
                ManagerID = FindManagerID(Manager);
                UserID = db.t_Item.Where(x => x.FItemClassID == 3 && x.FName.Equals(User)).Select(a => a.FItemID).First();
                Item = db.t_Item.Where(x => x.FItemID == ItemID).Include(x => x.NomenklaturaEnterprise).First();
                QTYnaSklade = QTYNaSklade(StockFromID, Item.FItemID);

            }
            catch (Exception e)
            {
                return Json(Resources.Resource.ZapolniteYellow);
            }



            if (QTYnaSklade < QTY)
            {
                return Json(Resources.Resource.VveliBolsheChemVZakaze);
            }

            if (QTY == 0)
            {
                return Json(Resources.Resource.NomenklaturiNedostatochno);
            }


         

            var MaxNum = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            //Плюсуем макс номер
            MaxNum.FMaxNum++;

            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 24).First();

            string SOUT = "SOUT" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);




            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum.FMaxNum.Value;
            StockBill.FDate = DateTime.Now.Date;
            StockBill.FTranType = 24;
            StockBill.FBillNo = SOUT;
            StockBill.FDeptID = DepartmentID; //Возможно можно перемещать на подразделение!!! 270 есть в таблице
            StockBill.FEmpID = null;
            StockBill.FSupplyID = null;
            StockBill.FCheckerID = UserID; // TODO найти пользака текущего. Сделать модуль регистрации пользователей и сопоставить их с кинди
            StockBill.FManagerID = ManagerID;
            StockBill.FSManagerID = ManagerID;
            StockBill.FBillerID = UserID;
            StockBill.FFManagerID = ManagerID;
           
            StockBill.FHookInterID = 0;//Неизвестно что за хук
            StockBill.FVchInterID = null;//При перемещении есть записи с указанным ID например 229
            StockBill.FPosted = 1;
            StockBill.FCheckSelect = 0;
            StockBill.FROB = 1;
            StockBill.FStatus = 1;
            StockBill.FUpStockWhenSave = false;
            StockBill.FCancellation = false;
            StockBill.FOrgBillInterID = 0;
            StockBill.FBillTypeID = 0;
            StockBill.FPOStyle = null;
            StockBill.FBackFlushed = false;
            StockBill.FPurposeID = 12000;
            StockBill.FUUID = Guid.NewGuid();
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
            StockBill.FMarketingStyle = 12530;
            StockBill.FRefType = 0;
            StockBill.FCheckDate = DateTime.Now;
            StockBill.FExplanation = "KingDeeWeb";
            StockBill.FSelTranType = 85;// также может быть 85, 0, 1012510
            StockBill.FChildren = 0;
            StockBill.FHookStatus = 0;
            StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;
            StockBill.FsourceType = 37521;
            StockBill.FPayCondition = 0;
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
            StockBill.FPOMode = 0;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";
            StockBill.FHeadSelfA0143 = "KingDeeWeb";
            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum.FMaxNum.Value;

                db.Entry(MaxNum).State = EntityState.Modified;
                db.SaveChanges();


                MaxStockID.FCurNo++;
                MaxStockID.FDesc = "CHG+" + DopolnitNumber(MaxStockID.FCurNo.Value, 6);
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();
                go = true;
            }
            catch (Exception e)
            {

            }



            var QR = new QRTable();
            if (go)//если добавлена шапка то добавляем строки
            {


                //Сохраняем QR код
                string STQ = Item.FNumber + ";" + Item.FName + ";" + QTY + ";" + StockBill.FCheckDate.Value.ToString("dd.MM.yyyy") + ";" + SOUT + ";" + FindRussianName(Item) + ";" + DepartmentID + ";";

                try
                {


                    QR.QR = CreateQrCode(STQ);
                    QR.QRstring = STQ;
                    QR.Date = DateTime.Now;
                    db.QRTable.Add(QR);
                    db.SaveChanges();

                }
                catch (Exception c)
                {
                    Console.WriteLine("Не смогли сгенерировать QR код " + c.Message);
                }


                go = false;
                try
                {
                    Entry.FBrNo = "0";

                    Entry.FItemID = Item.FItemID;
                    Entry.FQtyMust = QTY;
                    Entry.FAuxQtyMust = QTY;
                    Entry.FQty = QTY;
                    Entry.FPrice = 0; //Цену нужно откуда-то брать при перемещении
                    Entry.FBatchNo = "";
                    decimal Q = Convert.ToDecimal(QTY);
                    decimal C = Convert.ToDecimal(Entry.FPrice);
                    Entry.FAmount = Q * C;
                    Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                    Entry.FNote = "KingDeeWeb";
                    Entry.FUnitID = 259;//Это единица измерения
                    Entry.FAuxPrice = Entry.FPrice;
                    Entry.FPurchasePrice = Entry.FPurchasePrice; // Закупочная цена с налогом из заказа поставщику
                    Entry.FPurchaseAmount = Q * Entry.FPurchasePrice;
                    Entry.FAuxQty = QTY;
                    Entry.FPriceRef = Entry.FPrice;
                    Entry.FAuxPriceRef = Entry.FAuxPrice;
                    Entry.FAmtRef = Q * C;
                    Entry.FSourceBillNo = Work.FBillNo;
                    Entry.FICMOBillNo = Work.FBillNo;
                    Entry.FICMOInterID = Work.FInterID;
                    Entry.FPPBomEntryID = 1;// Work.PPBOM.PPBOMEntry.Where(x => x.FItemID == ItemID).First().FEntryID; //TODO ПЕРЕДЕЛАТЬ
                    Entry.FSourceTranType = 85;
                    Entry.FSCStockID = StockFromID;//откуда
                    Entry.FDCStockID = 0;//куда
                    Entry.FSourceInterId = Work.FInterID;

                    Entry.FOrderBillNo = "";
                    Entry.FOrderInterID = 0;
                    Entry.FOrderEntryID = 0;
                    Entry.FMapNumber = QR.Id.ToString();//Сюда сохраняем QR Id
                    Entry.FReProduceType = 1059;
                    Entry.FPlanMode = 14036;


                    Entry.FContractBillNo = "";
                    Entry.FICMOBillNo = "";
                    Entry.FMTONo = "";
                    Entry.FItemSize = "";
                    Entry.FItemSuite = "";
                    Entry.FPositionNo = "";
                    Entry.FSEOutBillNo = "";
                    Entry.FConfirmMemEntry = "";
                    Entry.FItemStatementBillNO = "";
                    Entry.FReturnNoticeBillNO = "";
                    Entry.FSplitState = "";


                    BOMEntry.FQty += QTY;
                    BOMEntry.FAuxQty += QTY;

                }
                catch
                {
                    return Json("Ошибка при создании строки. Данное задание на производство не содержит в БОМ номенклатуры "+ Item.FNumber);
                }

                try
                {
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();

                    db.Entry(BOMEntry).State = EntityState.Modified;
                    db.SaveChanges();



                    go = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                }
            }

            if (go)
            {
                go = PeremeshenieNaSklad(MaxNum.FMaxNum.Value,StockFromID, Item.FItemID, QTY, false);//Минусуем на склад
               // if (go)
               // {
              //      go = PeremeshenieNaSklad(StockToID, Item.FItemID, QTY, true);//Плюсуем на склад
              //  }
                /* go = false;
                 //Добавляем в остаток на складе
                 ICInventory Sklad = new ICInventory();
                 int EstLiStrokaNaSklade = 0;
                 try
                 {
                     EstLiStrokaNaSklade = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == Item.FItemID).Count();
                 }
                 catch 
                 {

                 }
                 if (EstLiStrokaNaSklade > 0)
                 {

                     try
                     {
                         Sklad = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == Item.FItemID).First();
                         Sklad.FQty += FCommitQty;
                     }
                     catch (Exception SE)
                     {
                         Console.WriteLine("Не смогли найти строку на складе " + SE.Message);
                     }

                     try
                     {

                         db.Entry(Sklad).State = EntityState.Modified;
                         db.SaveChanges();
                         go = true;
                     }

                     catch (Exception exx)
                     {
                         Console.WriteLine("Ошибка добавления на склад " + exx.Message);
                     }
                 }
                 else
                 {
                     //Если нет такой строки то добавляем новую
                     Sklad.FQty = FCommitQty;
                     Sklad.FStockID = StockID;
                     Sklad.FItemID = Item.FItemID;
                     Sklad.FBrNo = "0";
                     Sklad.FBatchNo = "";
                     Sklad.FKFDate = "";
                     Sklad.FMTONo = "";
                     try
                     {
                         db.ICInventory.Add(Sklad);
                         db.SaveChanges();
                         go = true;
                     }
                     catch (Exception exxx)
                     {
                         Console.WriteLine("Не смогли добавить новую строку поступления на склад ICInventory " + exxx.Message);
                     }
                 }
                */


            }

            if (go)
            {
                Message = "Ok";
            }
            //     "(FBrNo, FInterID, FEntryID, FItemID, FQtyMust,FAuxQtyMust, FQty, FPrice, FBatchNo, " +
            //                        "FAmount, FNote, FUnitID, FAuxPrice, FAuxQty, FProcessCost, FMaterialCost, FTaxAmount," +
            //                         " FSourceBillNo, FDCStockID, FSourceInterId, FOrderBillNo, FOrderInterID, FOrderEntryID)" +
            //                         "VALUES('O', " + InterId + "," + NPP + ", " + NL[0].FItemId + ", " + KolichestvoVZakaze + ", " + KolichestvoVZakaze + ", " + QTY + ", " + CENA + ", '', " +
            //                         "" + Amount + ", 'Enterprise', 259, " + CENA + ", " + QTY + ", 0, 0, 0," +
            //                         " '" + PURCH + "', " + SkladKitai + ", " + PURCHINTERID + ", '" + PURCH + "', " + PURCHINTERID + "," + StrokaPURCH + ")", true);




            //Меняем остатки в заказе поставщику
            try
            {

             //   db.Entry(Item).State = EntityState.Modified;
            //    db.SaveChanges();
                ViewBag.Message = "Ok";
            }
            catch (Exception E)
            {
                ViewBag.Message = "Ошибка = " + E.Message;
            }

          
            return Json(Message + ";" + QR.Id+";" + Item.FNumber+";"+ Item.FName+";"+ QTY+";"+ StockBill.FCheckDate.Value.ToString("dd.MM.yyyy")+";"+SOUT, JsonRequestBehavior.AllowGet);
        }

        public decimal QTYNaSklade(int StockID, int ItemID, string ZakazKlienta ="", bool InClearOnly = false)
        {
            //Ищем общую сумму в строках если указан заказ клиента то ищем строку с заказом, если InClear то ищем в чистой строке
            decimal result = 0;
            try
            {
                if (ZakazKlienta.Equals(""))
                {
                    result = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == ItemID).Sum(x => x.FQty);
                }
                if (!ZakazKlienta.Equals(""))
                {
                    result = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == ItemID&& x.FMTONo.Equals(ZakazKlienta)).Sum(x => x.FQty);
                }
                if (InClearOnly&&ZakazKlienta.Equals(""))
                {
                    result = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == ItemID && x.FMTONo.Equals("")).Sum(x => x.FQty);
                }
            
              //  result = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == ItemID).Select(x => x.FQty).First();
            }
            catch
            {

            }


            return result;
        }

        public List<PlanoviWorks> FindPlanoviWorks(DateTime D)
        {
            List<PlanoviWorks> P = new List<PlanoviWorks>();
            try
            {
               P = db.PlanoviWorks.Where(x => x.Date == D.Date).Include(x=>x.ICMO).Where(x=>x.ICMO!=null).Include(x => x.ICMO.t_Department).Include(x=>x.ICMO.t_Item).OrderBy(x=>x.Poryadok).ToList();
            }
            catch
            {

            }

            return P;




        }

        public List<StarMehWorks> FindStarMehWorks()
        {
            DateTime D = DateTime.Now.Date;
            List<int> DepartmentId = new List<int>();
            try
            {
                DepartmentId = FindCurrentDepartmentIdArray();
            //  DepartmentId =  FindCurrentDepartmentId();
            }
            catch
            {

            }
            List<StarMehWorks> SMW = new List<StarMehWorks>();
            List<StarMehWorks> Result = new List<StarMehWorks>();
            try
            {
                
                SMW = db.StarMehWorks.Where(x => x.DateStart == D).Include(x => x.ICMO).Include(x=>x.ICMO.t_Department).OrderBy(x=>x.Poryadok).ToList();//.Include(x=>x.ICMO.NZP).Include(x=>x.ICMO.PPBOMEntry).Include(x=>x.ICMO.t_Item)
            }
            catch (Exception e)
            {

            }

            if (DepartmentId.Count>0)
            {
                foreach (int dep in DepartmentId)
                {
                    try
                    {
                        Result.AddRange(SMW.Where(x => x.ICMO.FWorkShop == dep).ToList());
                    }
                    catch
                    {

                    }
                }
            }
            return Result;
        }

        public ActionResult SpisokKomplektovki()
        {
            List<ICMO> W = new List<ICMO>();
            List<PlanoviWorks> PW = new List<PlanoviWorks>();
            List<StarMehWorks> SMW = new List<StarMehWorks>();
            DateTime D = DateTime.Now.Date;
            PW = FindPlanoviWorks(D);




            if (FindCurrentRoles().Contains("Комплектовщик"))
            {
                SMW = FindStarMehWorks();
                foreach (StarMehWorks s in SMW)
                {
                    // PlanoviWorks pw = new PlanoviWorks();
                    // pw.ICMO = s.ICMO;
                    try
                    {
                        s.QTYFact = 0;//FindMaxVipusk(s.WorkId); //временно поменял чтобы грузил список быстро
                        //PW.Where(x => x.WorkId == s.WorkId).Select(x => x.QTY).First();//
                    }
                    catch
                    {

                    }
                    
                }

            }

            if (FindCurrentRoles().Contains("Кладовщик")|| FindCurrentRoles().Contains("Администратор"))
            {
                List<DateTime> Dates = new List<DateTime>();
                try
                {
                    //&& (x.ICMO.FWorkShop.Value == 283 || x.ICMO.FWorkShop.Value == 15922)
                    Dates = db.PlanoviWorks.Include(x=>x.ICMO).Where(x => x.Date > D&&x.ICMO!=null).OrderBy(x => x.Date).Select(x => x.Date.Value).Distinct().Take(1).ToList();
                    foreach (DateTime d in Dates)
                    {
                        PW.AddRange(FindPlanoviWorks(d.Date));
                    }

                }
                catch
                {

                }

                //PW = PW.Where(x => x.ICMO.FWorkShop.Value == 283 || x.ICMO.FWorkShop.Value == 15922).ToList();
                foreach (PlanoviWorks p in PW)
                {
                    StarMehWorks sw = new StarMehWorks();
                    sw.Id = 0;
                    sw.PlanshetId = 0;
                    sw.ICMO = p.ICMO;
                    sw.Poryadok = p.Poryadok;
                    sw.QTY = p.QTY;
                    sw.t_Item = p.ICMO.t_Item;
                    sw.QTYFact = 0;//FindMaxVipusk(p.WorkId);
                    sw.WorkId = p.WorkId;
                    sw.DateStart = p.Date;
                    sw.DateEnd = p.Date;
                    sw.Complete = false;

                    SMW.Add(sw);

                }

            }

          


            return View(SMW);
        }


    

        public decimal FindQTYFromCIN(int WorkId,int ItemId,DateTime D)
        {
            decimal Result = 0;
            List<int> SB = new List<int>();
            try
            {
                SB = db.ICStockBill.Where(x => x.FBillNo.Contains("CIN") && x.FDate == D).Select(x=>x.FInterID).ToList();
            }
            catch
            {

            }
            try
            {
                Result = db.ICStockBillEntry.Where(x => x.FItemID == ItemId && x.FICMOInterID == WorkId && SB.Contains(x.FInterID)).Sum(x => x.FCommitQty);
            }
            catch
            {

            }
            return Result;
        }

        public List<Control> FindLastStatusesOTK(int Count, int UserId = 0)
        {
            List<Control> Dvigs = new List<Control>();
            List<Control> Result = new List<Control>();
            try
            {
                if (UserId == 0)
                {
                    Dvigs = db.Control.Include(x => x.Dvigenie).Where(x => x.Dvigenie.QRID != null).OrderByDescending(x => x.Id).Take(100).Include(x => x.StatusOTK).Include(x => x.Dvigenie.Item).ToList();//
                }
                else
                {
                    Dvigs = db.Control.Include(x => x.Dvigenie).Where(x => x.Dvigenie.QRID != null&&x.Dvigenie.UserId==UserId).OrderByDescending(x => x.Id).Take(100).Include(x => x.StatusOTK).Include(x => x.Dvigenie.Item).ToList();//

                }
                List<int> D = Dvigs.Select(x => x.Dvigenie.QRID.Value).Distinct().ToList();
                int C = 0;
                foreach (var d in D)
                {
                    try
                    {
                        Result.Add(Dvigs.Where(x => x.Dvigenie.QRID == d).First());


                        C++;
                        if (C == Count)
                        {
                            break;
                        }
                    }
                    catch
                    {

                    }
                }


            }
            catch (Exception e)
            {

            }
            if (UserId > 0 && Result.Count > 0)
            {
                try
                {
                    Result = Result.Where(x => x.Dvigenie.UserId == UserId).ToList();
                }
                catch
                {
                    Result = new List<Control>();
                }
            }
            return (Result);
        }


        public List<DvigenieNEW> FindLastDvigeniesNEW(int Count, int UserId = 0)
        {
            List<DvigenieNEW> Dvigs = new List<DvigenieNEW>();
            List<DvigenieNEW> Result = new List<DvigenieNEW>();
            try
            {
                if (UserId == 0)
                {
                    Dvigs = db.DvigenieNEW.OrderByDescending(x => x.Id).Take(100).Include(x => x.t_Item).ToList();//
                }
                else
                {
                    Dvigs = db.DvigenieNEW.Where(x=>x.UserId== UserId).OrderByDescending(x => x.Id).Take(100).Include(x => x.t_Item).ToList();//
                   // db.Control.Include(x => x.Dvigenie).Where(x => x.Dvigenie.QRID != null && x.Dvigenie.UserId == UserId).OrderByDescending(x => x.Id).Take(100).Include(x => x.StatusOTK).Include(x => x.Dvigenie.Item).ToList();//

                }
          /*      List<int> D = Dvigs.Select(x => x.Dvigenie.QRID.Value).Distinct().ToList();
                int C = 0;
                foreach (var d in D)
                {
                    try
                    {
                        Result.Add(Dvigs.Where(x => x.Dvigenie.QRID == d).First());


                        C++;
                        if (C == Count)
                        {
                            break;
                        }
                    }
                    catch
                    {

                    }
                }
          */

            }
            catch (Exception e)
            {

            }
          /*  if (UserId > 0 && Result.Count > 0)
            {
                try
                {
                    Result = Result.Where(x => x.Dvigenie.UserId == UserId).ToList();
                }
                catch
                {
                    Result = new List<Control>();
                }
            }
          */
            return (Dvigs);
        }


        public ActionResult MyStatuses()
        {
            UsersKDW U = FindCurrentKDWUser();
            ViewBag.U = U;
            List<Control> Dvigs = FindLastStatusesOTK(100,U.Id);
            ViewBag.Dvigs = Dvigs;
            return View();

        }

        public ActionResult MyDvigenies()
        {
            UsersKDW U = FindCurrentKDWUser(true);
            ViewBag.U = U;
            List<DvigenieNEW> Dvigs = FindLastDvigeniesNEW(100, U.Id);
            ViewBag.Dvigs = Dvigs;
            return View();

        }

        public void EditDvigenieNEW(in DvigenieNEW Dvig, decimal QTYFact)
        {
            SaveToDocLog(Dvig.Id, Dvig.ItemID, "Начали редактировать движение=" + Dvig.CurrentFBillNo, QTYFact, Dvig.StockId, 0, Dvig.CurrentFBillNo);

            try
            {
                int DID = Dvig.Id;
                  using (var db2 = new KingDeeDB())
                 {
                DvigenieNEW D = db2.DvigenieNEW.Where(x => x.Id == DID).First();
                D.QTYFact = QTYFact;
                db2.Entry(D).State = EntityState.Modified;
                db2.SaveChanges();
                 }
                SaveToDocLog(Dvig.Id, Dvig.ItemID, "Сохранили изменения=" + Dvig.CurrentFBillNo, QTYFact, Dvig.StockId, 0, Dvig.CurrentFBillNo);
              //  Dvig = db.DvigenieNEW.Where(x => x.Id = DID).First();
                Session["Dvigenie"] = null;
            }
            catch (Exception e)
            {
                SaveToDocLog(Dvig.Id, Dvig.ItemID, "Ошибка при изменении движения=" + e.Message, QTYFact, Dvig.StockId, 0, Dvig.CurrentFBillNo);
            }

            /*       UsersKDW U = FindCurrentKDWUser();
                   DvigenieNEW D = new DvigenieNEW();
                   D.FBillNo = Dvig.CurrentFBillNo;
                   D.Id = Dvig.Id;
                   D.ItemID = Dvig.ItemID;
                   D.Lev = Dvig.Lev;
                   D.Parent = Dvig.Parent;
                   D.POOrderId = Dvig.POOrderId;
                   D.QRID = Dvig.QRID;
                   D.QTY = Dvig.QTY;
                   D.StockId = Dvig.StockId;
                   D.Date = DateTime.Now;
                   D.QTYFact = QTYFact;
                   D.ZakazPostavshiku = Dvig.ZakazPostavshiku;
                   D.UserId = U.Id;// Dvig.UserId;
                   D.Work = Dvig.Work;
                   D.Otmena = Dvig.Otmena;
                   D.Mnimoe = Dvig.Mnimoe;
                   //D.co = Dvig.Control;
                   //Создаем движение
                   try
                   {
                       //  using (var db2 = new KingDeeDB())
                       // {
                       db.Entry(D).State = EntityState.Modified;
                       db.SaveChanges();
                       // }
                       SaveToDocLog(Dvig.Id, Dvig.ItemID, "Сохранили изменения=" + Dvig.FBillNo, QTYFact, Dvig.StockId, 0, Dvig.FBillNo);
                       Session["Dvigenie"] = null;
                   }
                   catch (Exception e)
                   {
                       SaveToDocLog(Dvig.Id, Dvig.ItemID, "Ошибка при изменении движения=" + e.Message, QTYFact, Dvig.StockId, 0, Dvig.FBillNo);
                   }
            */

        }



        public void EditDvigenie(Dvigenie Dvig, decimal QTYFact, string NEWDvigenieString =null)
        {
            SaveToDocLog(Dvig.Id, Dvig.ItemID, "Начали редактировать движение=" + Dvig.FBillNo, QTYFact, Dvig.StockId, 0, Dvig.FBillNo);
            UsersKDW U = FindCurrentKDWUser();
            Dvigenie D = new Dvigenie();
            D.FBillNo = Dvig.FBillNo;
            D.Id = Dvig.Id;
            D.ItemID = Dvig.ItemID;
            D.Lev = Dvig.Lev;
            D.Parent = Dvig.Parent;
            D.POOrderId = Dvig.POOrderId;
            D.QRID = Dvig.QRID;
            D.QTY = Dvig.QTY;
            D.StockId = Dvig.StockId;
            D.Date = DateTime.Now;
            D.QTYFact = QTYFact;
            D.ZakazPostavshiku = Dvig.ZakazPostavshiku;
            D.UserId = U.Id;// Dvig.UserId;
            D.Work = Dvig.Work;
            D.Otmena = Dvig.Otmena;
            D.Mnimoe = Dvig.Mnimoe;
            D.NewDvigenieString = NEWDvigenieString;
            //D.co = Dvig.Control;
            //Создаем движение
            try
            {
              //  using (var db2 = new KingDeeDB())
               // {
                    db.Entry(D).State = EntityState.Modified;
                    db.SaveChanges();
               // }
                SaveToDocLog(Dvig.Id, Dvig.ItemID, "Сохранили изменения=" + Dvig.FBillNo, QTYFact, Dvig.StockId, 0, Dvig.FBillNo);
                Session["Dvigenie"] = null;
            }
            catch (Exception e)
            {
                SaveToDocLog(Dvig.Id, Dvig.ItemID, "Ошибка при изменении движения=" + e.Message, QTYFact, Dvig.StockId, 0, Dvig.FBillNo);
            }


        }


        public ActionResult UserNow()
        {
            try
            {
                UsersKDW U = FindCurrentKDWUser();
                ViewBag.Name = U.Name;
                ViewBag.Id = U.Id;
            }
            catch
            {
                ViewBag.Name = "No Login!!!";
                ViewBag.Id = "0";
            }
            return View();
        }

        public void EditNZP(NZP nzp, decimal QTYFact)
        {
            NZP n = new NZP();
            n.DatePostupleniya = nzp.DatePostupleniya;
            n.DepartmentId = nzp.DepartmentId;
            n.DvigenieId = nzp.DvigenieId;
            n.Id = nzp.Id;
            n.ItemId = nzp.ItemId;
            n.POOrderId = nzp.POOrderId;
            n.QTY = QTYFact;
            n.SOUTId = nzp.SOUTId;
            n.StarWorkId = nzp.StarWorkId;
            n.StockId = nzp.StockId;
            n.WorkId = nzp.WorkId;
            n.Active = nzp.Active;

            //Создаем NZP
            try
            {
   

                if (n.QTY > 0)
                {
               

                }

                if (n.QTY == 0)
                {
                    nzp.Active = false;
              

                }
                using (var db2 = new KingDeeDB())
                {
                    db2.Entry(n).State = EntityState.Modified;
                    db2.SaveChanges();
                    SaveToDocLog(n.DvigenieId, nzp.ItemId, "Сохранили изменения в НЗП ZNPID=" + nzp.Id, QTYFact, 0, nzp.WorkId, "");

                }

            }
            catch (Exception e)
            {

            }


        }

    

               public int SaveDvigenie(ZakazPostavshiku Z, string FBillNoDvigeniya, decimal QTY,  int StockFromId, int StockId, int QRID, int Parent = 0, string Work = "", bool Mnimoe = false)
        {
            int DvigenieID = 0;

            //  int MaxLVL = SelectMaxLev(Z);
            // MaxLVL++;

            UsersKDW U = FindCurrentKDWUser();
            Dvigenie Dvig = new Dvigenie();
            Dvig.FBillNo = FBillNoDvigeniya;
            Dvig.QTY = Math.Round(QTY,3);
            Dvig.QTYFact = Math.Round(QTY,3);
            Dvig.Parent = Parent;
            Dvig.POOrderId = Z.ZakazId;
            Dvig.ZakazPostavshiku = Z.FBillNo;
            Dvig.ItemID = Z.SelectedEntry.ItemId;
            Dvig.StockFromId = StockFromId;//откуда
            Dvig.StockId = StockId;//куда
            Dvig.QRID = QRID;
            Dvig.Lev = Z.MaxLev;
            Dvig.Date = DateTime.Now;
            Dvig.Work = Work;
            Dvig.Mnimoe = Mnimoe;
            Dvig.Otmena = false;
            Dvig.UserId = U.Id;
           
            //  if (FBillNo.Contains("CIN"))
            //   {
            //    Dvig.QTYFact = 0;
            //  }

            //Создаем движение
            try
            {
                using (var db2 = new KingDeeDB())
                {
                    db.Dvigenie.Add(Dvig);
                    db.SaveChanges();
                    Session["Dvigenie"] = null;
                    DvigenieID = Dvig.Id;
                }
            }
            catch (Exception e)
            {

            }
            return DvigenieID;

        }

        public int SaveDvigenie (string ZakazPostavshiku, string FBillNo, decimal QTY, int ItemID, int POOrderID, int StockFromId, int StockId, int QRID, int MaxLvl, int Parent =0,string Work="", bool Mnimoe = false)
        {
            int DvigenieID = 0;
            //Получаем дату
            string Tip = "POORD";
            try
            {
                if (ZakazPostavshiku.Contains("POORD"))
                {
                    Tip = "POORD";
                }

                if (ZakazPostavshiku.Contains("WW"))
                {
                    Tip = "WW";
                }
            }
            catch
            {

            }
            ZakazPostavshiku Z = new ZakazPostavshiku();
            Z.FindEntries(POOrderID, Tip);
            try
            {
                
            }
            catch
            {

            }


            /*  //Ищем заказ поставщику
              POOrder P = new POOrder();
              try
              {
                  P = db.POOrder.Where(x => x.FInterID == POOrderID).Include(x=>x.t_Supplier).First();
              }
              catch
              {

              }
              //Ищем итем
              t_Item I = new t_Item();
              try
              {
                  I = db.t_Item.Where(x => x.FItemID == ItemID).First();
              }
              catch
              {

              }
            */
            UsersKDW U = FindCurrentKDWUser();

            Dvigenie Dvig = new Dvigenie();
          //  Dvig.Date = D;
            Dvig.FBillNo = FBillNo;
            Dvig.QTY = QTY;
            Dvig.QTYFact = QTY;
            Dvig.Parent = Parent;
         //   Dvig.POOrder = P.FBillNo;
            Dvig.POOrderId = POOrderID;
            //     Dvig.Postavshik = P.t_Supplier.FName;
            //     Dvig.ItemName = I.FName;
            Dvig.ZakazPostavshiku = Z.FBillNo;
            Dvig.ItemID = ItemID;
            Dvig.StockId = StockId;
            Dvig.QRID = QRID;
            Dvig.Lev = MaxLvl;
            Dvig.Date = DateTime.Now;
            Dvig.Work = Work;
            Dvig.Mnimoe = Mnimoe;
            Dvig.Otmena = false;
            Dvig.StockFromId = StockFromId;
            Dvig.UserId = U.Id;
          //  if (FBillNo.Contains("CIN"))
         //   {
            //    Dvig.QTYFact = 0;
          //  }

            //Создаем движение
            try
            {
                db.Dvigenie.Add(Dvig);
                db.SaveChanges();
                Session["Dvigenie"] = null;
                DvigenieID = Dvig.Id;
            }
            catch (Exception e)
            {

            }
            return DvigenieID;

        }
      
        public JsonResult ShowInventarJson(int StellagId)
        {
            List<string> Result = new List<string>();
            Result = FindInventar(StellagId);

            return Json(Result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult ShowInventar(int StellagId)
        {
             

            List<NomenklaturaPlace> Inventar = new List<NomenklaturaPlace>();
            try
            {
                Inventar = db.NomenklaturaPlace.Where(x => x.StellagId == StellagId).Include(x => x.Stellag).Include(x => x.Yacheika).Include(x => x.Street).Include(x => x.Dvigenie).Include(x => x.Item).OrderBy(x => x.PolkaId).Where(x=>x.Dvigenie.QTYFact>0).ToList();
            

            }
            catch
            {

            }
            int SearchId = LoadPlanogrammaSearch();
            ViewBag.SearchId = SearchId;
            return View(Inventar);
        }

        public List<string> FindInventar(int StellagId)
        {
            List<string> Inventar = new List<string>();
            try
            {
               List<NomenklaturaPlace> NP = db.NomenklaturaPlace.Where(x => x.StellagId == StellagId).Include(x => x.Stellag).Include(x => x.Yacheika).Include(x => x.Street).Include(x=>x.Dvigenie).Include(x => x.Item).OrderBy(x=>x.PolkaId).ToList();
            foreach(NomenklaturaPlace np in NP)
                {
                    if (np.Dvigenie.QTYFact>0)
                    {
                        //Полка; Партномер; Наименование; Ячейка; Количество
                        Inventar.Add(np.PolkaId + ";" + np.Item.FNumber+";"+np.Item.FName+";"+np.Yacheika+";"+ np.Dvigenie.QTYFact);
                    }
                }
            
            }
            catch
            {

            }
            return Inventar;
        }

        public int SelectMaxLev (int POOrderID, int ItemId, string ZakazPostavshiku)
        {
            int MaxLev = 0;
            try
            {
                MaxLev = db.Dvigenie.Where(x => x.POOrderId == POOrderID && x.ItemID == ItemId&&x.ZakazPostavshiku.Equals(ZakazPostavshiku)).Max(x => x.Lev);
            }
            catch
            {

            }

            return MaxLev;
        }


        public int SelectMaxLev(ZakazPostavshiku Z)
        {
            int MaxLev = 0;
            try
            {
                MaxLev = db.Dvigenie.Where(x => x.POOrderId == Z.ZakazId && x.ItemID == Z.SelectedEntry.ItemId && x.ZakazPostavshiku.Equals(Z.FBillNo)).Max(x => x.Lev);
            }
            catch
            {

            }

            return MaxLev;
        }
        public int SaveQR (t_Item Item, string ZakazPostavshiku, int POOrderId, int lev)
        {
            int Id = 0;
            DateTime D = DateTime.Now;

           //Номенклатура;Количество;ЗаказПоставщику;уровень(id кода в рамках заказа поставщику)

            string STQ = Item.FNumber + ";" + ZakazPostavshiku + ";" + POOrderId+";"+lev;

            try
            {

                QRTable QR = new QRTable();
                QR.QR = CreateQrCode(STQ);
                QR.QRstring = STQ;
                QR.Date = DateTime.Now;
                db.QRTable.Add(QR);
                db.SaveChanges();
                Id = QR.Id;
            }
            catch (Exception c)
            {
                Console.WriteLine("Не смогли сгенерировать QR код " + c.Message);
           
            }
            return Id;
        }
        public int SaveQR(ZakazPostavshiku Z)
        {
            int Id = 0;

            //Номенклатура;Количество;ЗаказПоставщику;уровень(id кода в рамках заказа поставщику)

            //int MaxLVL = SelectMaxLev(Z);
            //MaxLVL++;

            string STQ = Z.SelectedEntry.Item.FNumber + ";" + Z.FBillNo + ";" + Z.ZakazId + ";" +Z.MaxLev;

            try
            {
                using (var db2 = new KingDeeDB())
                {

                    QRTable QR = new QRTable();
                    QR.QR = CreateQrCode(STQ);
                    QR.QRstring = STQ;
                    QR.Date = DateTime.Now;
                    db2.QRTable.Add(QR);
                    db2.SaveChanges();
                    Id = QR.Id;
                }
            }
            catch (Exception c)
            {
                Console.WriteLine("Не смогли сгенерировать QR код " + c.Message);

            }
            return Id;
        }


        public Dvigenie FindParent(Dvigenie Dvig)
        {
            Dvigenie Parent = new Dvigenie();

            if (Dvig.Parent == 0)
            {
                List<Dvigenie> Dvigs = db.Dvigenie.Where(x => x.POOrderId == Dvig.POOrderId && x.Lev == Dvig.Lev && x.ItemID == Dvig.ItemID).OrderBy(x => x.Id).ToList();
                if (Dvigs.Count > 1)
                {
                    Parent = Dvigs[Dvigs.Count - 2];
                }
            }
            else
            {
                try
                {
                    Parent = db.Dvigenie.Where(x => x.Id == Dvig.Parent).First();
                }
                catch (Exception e)
                {

                }
            }
            return Parent;
        }

        public JsonResult OtmenaProvedeniya(int DvigenieId)
        {
            try
            {
                Dvigenie Dvig = FindDvigenie(DvigenieId); // Это основнео движение
                                                          //     ItemView IW = new ItemView(); // Это все движения
                SaveToDocLog(Dvig.Id, Dvig.ItemID, "Начали отмену проведения движения", Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);

                ICStockBill S = db.ICStockBill.Where(x => x.FBillNo.Equals(Dvig.FBillNo)).Include(x => x.ICStockBillEntry).First();
               

                List<ICStockBillEntry> SE = S.ICStockBillEntry.Where(x => x.FItemID == Dvig.ItemID).ToList();

                decimal QTY = Dvig.QTYFact;

                int Stock2Id = 0; //Это предыдущее место хранения

                //    IW.POOrder = P;
                //    IW.Item = Dvig.Item;

                //     IW.FindDvigenies();

                //   if (Dvig != IW.LastDvigChild)
                //   {
                //        Dvig = IW.LastDvigChild; //Тут хранится самое последнее движение с учетом детей
                //    }

                //Находим предыдущее место хранения
                /*     if (IW.LastDvigChildParent != null)
                     {
                         Stock2Id = IW.LastDvigChildParent.StockId;
                     }
                     else
                     {
                         if (IW.Parent != null)
                         {
                             Stock2Id = IW.Parent.StockId;
                         }
                         else
                         {
                             Stock2Id = 0;
                         }
                     }
         */

                if (Dvig.FBillNo.Contains("WIN"))
                {
                    SaveToDocLog(Dvig.Id, Dvig.ItemID, "Начинаем отменять документ WIN", Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);
                    POOrder P = db.POOrder.Where(x => x.FInterID == Dvig.POOrderId).First();
                    POOrderEntry PE = db.POOrderEntry.Where(x => x.FItemID == Dvig.ItemID  && x.FInterID == Dvig.POOrderId).First();//&& x.FCommitQty > 0
                    PE.FAuxCommitQty -= Dvig.QTYFact;
                    PE.FAuxStockQty -= Dvig.QTYFact;
                    PE.FCommitQty -= Dvig.QTYFact;
                    PE.FStockQty -= Dvig.QTYFact;

                    bool go = PeremeshenieNaSklad(0,  Dvig.StockId, Dvig.ItemID, Dvig.QTYFact, false);
                    SaveToDocLog(Dvig.Id, Dvig.ItemID, "Отняли со склада " + go.ToString(), Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);
                    if (!go)
                    {
                        return Json(Resources.Resource.NomenklaturiNedostatochno);
                    }
                    else
                    {

                        //  S.FStatus = 0;
                        //  S.FCheckerID = null;
                        //S.FCancellation = true;


                        try
                        {
                            //       db.Entry(S).State = EntityState.Modified;
                            //  db.ICStockBill.Remove(S);
                            //  db.SaveChanges();
                            //   SaveToDocLog(Dvig.Id, Dvig.ItemID, "Отняли из заказа поставщику " + P.FBillNo + " Id "+P.FInterID, Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);

                            db.Entry(P).State = EntityState.Modified;
                            db.SaveChanges();
                            SaveToDocLog(Dvig.Id, Dvig.ItemID, "Сделали заказ поставщику не завершенным " + P.FBillNo, Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);

                            db.Entry(PE).State = EntityState.Modified;
                            db.SaveChanges();
                            SaveToDocLog(Dvig.Id, Dvig.ItemID, "Отняли из строки заказа поставщику " + P.FBillNo + " Id " + P.FInterID + " строка N" + PE.FEntryID, Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);

                            // foreach (var POE in PE)
                            //  {
                            //     db.POOrderEntry.Remove(POE);
                            //   db.SaveChanges();
                            //   }

                            //  db.POOrder.Remove(P);
                            //  db.SaveChanges();




                        }
                        catch (Exception e)
                        {
                            SaveToDocLog(Dvig.Id, Dvig.ItemID, "Ошибка не смогли изменить заказ поставщику " + P.FBillNo + " Id " + P.FInterID + " строка N" + PE.FEntryID + e.Message, Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);
                            return Json(Resources.Resource.Error + e.Message);
                        }
                    }
                }

                if (Dvig.FBillNo.Contains("JIN"))
                {

                    ICSubContract P = db.ICSubContract.Where(x => x.FInterID == Dvig.POOrderId).First();
                    ICSubContractEntry PE = db.ICSubContractEntry.Where(x => x.FItemID == Dvig.ItemID && x.FCommitQty > 0 && x.FInterID == Dvig.POOrderId).First();
                    PE.FAuxCommitQty -= Dvig.QTYFact;
                    //  PE.FAuxStockQty -= Dvig.QTYFact;
                    PE.FCommitQty -= Dvig.QTYFact;
                    P.FClosed = 0;
                    //  PE.FStockQty -= Dvig.QTYFact;

                    bool go = PeremeshenieNaSklad(0,Dvig.StockId, Dvig.ItemID, Dvig.QTYFact, false);
                    SaveToDocLog(Dvig.Id, Dvig.ItemID, "Отняли со склада " + go.ToString(), Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);
                    if (!go)
                    {
                        return Json(Resources.Resource.NomenklaturiNedostatochno);
                    }
                    else
                    {

                        S.FStatus = 0;
                        S.FCheckerID = null;
                        //S.FCancellation = true;


                        try
                        {
                            // db.Entry(S).State = EntityState.Modified;
                            //  db.ICStockBill.Remove(S);
                            // db.SaveChanges();
                            // SaveToDocLog(Dvig.Id, Dvig.ItemID, "Отняли из заказа поставщику " + P.FBillNo + " Id " + P.FInterID, Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);
                            db.Entry(P).State = EntityState.Modified;
                            db.SaveChanges();
                            SaveToDocLog(Dvig.Id, Dvig.ItemID, "Сделали заказ поставщику не завершенным " + P.FBillNo, Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);


                            db.Entry(PE).State = EntityState.Modified;
                            db.SaveChanges();
                            SaveToDocLog(Dvig.Id, Dvig.ItemID, "Вернули в строку заказа поставщику " + P.FBillNo + " Id " + P.FInterID + " строка N" + PE.FEntryID + " колво стало " + PE.FAuxCommitQty, Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);

                            // foreach (var POE in PE)
                            //  {
                            //     db.POOrderEntry.Remove(POE);
                            //   db.SaveChanges();
                            //   }

                            //  db.POOrder.Remove(P);
                            //  db.SaveChanges();




                        }
                        catch (Exception e)
                        {
                            SaveToDocLog(Dvig.Id, Dvig.ItemID, "Ошибка не смогли изменить заказ поставщику " + P.FBillNo + " Id " + P.FInterID + " строка N" + PE.FEntryID + e.Message, Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);
                            return Json(Resources.Resource.Error + e.Message);
                        }
                    }
                }

                if (Dvig.FBillNo.Contains("CHG"))
                {
                    bool go = PeremeshenieNaSklad(0,Dvig.StockId, Dvig.ItemID, Dvig.QTYFact, false);
                    if (!go)
                    {
                        return Json(Resources.Resource.Error);
                    }
                    if (Stock2Id == 0)
                    {
                        Stock2Id = Dvig.StockFromId;// Stock2Id = SE[0].FSCStockID;
                    }
                    go = PeremeshenieNaSklad(0,Stock2Id, Dvig.ItemID, Dvig.QTYFact, true);
                    if (!go)
                    {
                        return Json(Resources.Resource.Error);
                    }
                    try
                    {
                        // foreach (var se in SE)
                        // {

                        //  db.Entry(se).State = EntityState.Modified;
                        //  db.ICStockBillEntry.Remove(se);
                        db.SaveChanges();

                        //}
                        S.FStatus = 0;
                        S.FCheckerID = null;
                        //  S.FCancellation = true;
                        db.Entry(S).State = EntityState.Modified;
                        //  db.ICStockBill.Remove(S);
                        db.SaveChanges();
                    }
                    catch (Exception e)
                    {
                        return Json(Resources.Resource.Error);
                    }
                }


                if (Dvig.FBillNo.Contains("SOUT"))
                {
                    // bool go = PeremeshenieNaSklad(Dvig.StockId, Dvig.ItemID, Dvig.QTYFact, false);
                    //   if (!go)
                    //   {
                    //       return Json(Resources.Resource.Error);
                    //  }


                    var IC = db.ICStockBill.Where(x => x.FBillNo.Equals(Dvig.FBillNo)).Include(x => x.ICStockBillEntry).First();
                    var ICE = IC.ICStockBillEntry.Where(x => x.FItemID == Dvig.ItemID).First();
                    int DepartmentID = Dvig.StockId;
                    var Work = db.ICMO.Where(x => x.FBillNo.Equals(ICE.FSourceBillNo)).Include(x => x.t_Department).Include(x => x.PPBOM).First();
                    int BOM = Work.PPBOM.First().FInterID;
                    if (Stock2Id == 0)
                    {
                        Stock2Id = SE[0].FSCStockID;
                    }

                    var BOMEntry = db.PPBOMEntry.Where(x => x.FItemID == Dvig.ItemID && x.FInterID == BOM).First();

                    BOMEntry.FQty -= QTY;
                    BOMEntry.FAuxQty -= QTY;
                    // Было отключено до 14.04.2023
                     BOMEntry.FStockQty -= QTY;
                     BOMEntry.FAuxStockQty -= QTY;
                     BOMEntry.FWIPAuxQTY -= QTY;
                     BOMEntry.FWIPQTY -= QTY;

                    bool go = PeremeshenieNaSklad(0,Stock2Id, Dvig.ItemID, Dvig.QTYFact, true);
                    if (!go)
                    {
                        SaveToDocLog(Dvig.Id, Dvig.ItemID, "Вернули на склад статус= " + go.ToString(), Dvig.QTYFact, Stock2Id, 0, Dvig.FBillNo);
                        return Json(Resources.Resource.Error);
                    }
                    try
                    {
                        //  foreach (var se in SE)
                        //    {
                        //        db.ICStockBillEntry.Remove(se);
                        //       db.SaveChanges();

                        //    }
                        S.FStatus = 0;
                        S.FCheckerID = null;
                        //  S.FCancellation = true;
                        db.Entry(S).State = EntityState.Modified;
                        //  db.ICStockBill.Remove(S);
                        db.SaveChanges();

                        db.Entry(BOMEntry).State = EntityState.Modified;
                        db.SaveChanges();

                        Session["Dvigenie"] = null;
                    }
                    catch (Exception e)
                    {
                        return Json(Resources.Resource.Error);
                    }
                }

                int POOrderIDDvig = Dvig.POOrderId;
                int ItemIdDvig = Dvig.ItemID;
                int LevDvig = Dvig.Lev;
                int DvigId = Dvig.Id;

                try
                {
                    // D.POOrder = Dvig.POOrder;
                    //  D.POOrderId = Dvig.POOrderId;
                    //  D.Item = Dvig.Item;
                    //  D.ItemID = Dvig.ItemID;

                    Dvigenie DD = new Dvigenie();

                    DD = db.Dvigenie.Where(x => x.Id == Dvig.Id).First();// db.Dvigenie.Where(x => x.POOrderId == POOrderIDDvig && x.ItemID == ItemIdDvig && x.Otmena == false).OrderByDescending(x => x.Id).First();

                    DD.Otmena = true;
                    DD.QTYFact = 0;

                    db.Entry(DD).State = EntityState.Modified;
                    // db.Dvigenie.Remove(Dvig);
                    db.SaveChanges();
                    SaveToDocLog(DD.Id, DD.ItemID, "Отменили движение " + DD.FBillNo, DD.QTYFact, DD.StockId, 0, DD.FBillNo);


                }
                catch (Exception ex)
                {
                    SaveToDocLog(Dvig.Id, Dvig.ItemID, "Ошибка не смогли отменить движение ", 0, 0, 0, Dvig.FBillNo);

                    return Json(ex.Message);
                }

                //Распроводим док
                ICStockBill Doc = new ICStockBill();
                try
                {
                    Doc = db.ICStockBill.Where(x => x.FBillNo == Dvig.FBillNo).First();
                    if (Doc.FInterID != 0)
                    {
                        SaveToDocLog(Dvig.Id, Dvig.ItemID, "Пробуем удалить строки в документе " + Dvig.FBillNo, 0, 0, 0, Doc.FBillNo);
                        List<ICStockBillEntry> DocEntry = db.ICStockBillEntry.Where(x => x.FInterID == Doc.FInterID).ToList();
                        foreach (var de in DocEntry)
                        {
                            /* de.FQty = 0;
                             de.FCommitQty = 0;
                             de.FAuxCommitQty = 0;
                             de.FAuxQty = 0;
                             */
                            try
                            {
                                db.Entry(de).State = EntityState.Deleted;
                                db.SaveChanges();
                                SaveToDocLog(Dvig.Id, Dvig.ItemID, "Удалили строку в документе " + Dvig.FBillNo, 0, 0, 0, Doc.FBillNo);
                            }
                            catch (Exception e)
                            {
                                SaveToDocLog(Dvig.Id, Dvig.ItemID, "Не смогли удалить строки документа " + e.Message, 0, 0, 0, Doc.FBillNo);
                            }

                        }

                    }
                }
                catch
                {
                    SaveToDocLog(Dvig.Id, Dvig.ItemID, "Не смогли найти документ ", 0, 0, 0, Dvig.FBillNo);
                }
                try
                {
                  
                    //Обходим триггер, подготавливаем шапку к удалению
                    SaveToDocLog(Dvig.Id, Dvig.ItemID, "Подготавливаем шапку к удалению", Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);
                    Doc.FCancellation = false;
                    Doc.FCheckerID = 0;
                    db.Entry(Doc).State = EntityState.Modified;
                    db.SaveChanges();
                    SaveToDocLog(Dvig.Id, Dvig.ItemID, "Шапка готова к удалению Checker 0 Cancellation 0", Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);

                    db.Entry(Doc).State = EntityState.Deleted;
                    db.SaveChanges();
                    SaveToDocLog(Dvig.Id, Dvig.ItemID, "Удалили шапку документа", Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);

                }
                catch (Exception e)
                {
                    SaveToDocLog(Dvig.Id, Dvig.ItemID, "Не смогли удалить шапку документа " + e.Message, 0, 0, 0, Doc.FBillNo);
                }
                try
                {
                    
                //  Doc.FCancellation = true;
                //  Doc.FStatus = 0;
                //  Doc.FPosted = 0;
                //  db.Entry(Doc).State = EntityState.Modified;
                //  db.Entry(Doc)
                //  db.SaveChanges();
                 //   SaveToDocLog(Dvig.Id, Dvig.ItemID, "Распровели документ " + Dvig.FBillNo, 0, 0, 0, Doc.FBillNo);

                }
                catch (Exception e)
                {
                  //  SaveToDocLog(Dvig.Id, Dvig.ItemID, "Не смогли распровести документ " + e.Message, 0, 0, 0, Doc.FBillNo);
                }
                //Удаляем строки дока
              

                try
                {
                    //Пробуем вернуть в предыдущее движение
                    Dvigenie D = new Dvigenie();
                    int PID = 0;
                    PID = FindParent(Dvig).Id;

                    SaveToDocLog(Dvig.Id, Dvig.ItemID, "Нашли родительский код " + PID, QTY, 0, 0, "");
                    D = db.Dvigenie.Where(x => x.Id == PID).First(); // db.Dvigenie.Where(x => x.POOrderId == POOrderIDDvig && x.ItemID == ItemIdDvig && x.Otmena == false && LevDvig == x.Lev).OrderByDescending(x => x.Id).First();
                    D.QTYFact += QTY;
                    db.Entry(D).State = EntityState.Modified;
                    db.SaveChanges();
                    SaveToDocLog(Dvig.Id, Dvig.ItemID, "Сохранили в родительский код ", QTY, 0, 0, "");
                }
                catch
                {
                    SaveToDocLog(Dvig.Id, Dvig.ItemID, "Предупреждение не смогли переместить в родительский код ", 0, 0, 0, "");
                }
            }
            catch
            {

            }
            return Json("Ok");
        }

        public JsonResult StornoPostupleniyaNEW(int DvigenieNEWId, decimal QTY, string ZakazNumber="")
        {
            UsersKDW U = FindCurrentKDWUser(true);
            int TranType = 1;

           

            DvigenieNEW Dvig = FindDvigenieNEW(DvigenieNEWId); // Это основнео движение
            if (QTY> Dvig.QTY)
            {
                return Json(Resources.Resource.ErrorNetVQR);
            }

            if (QTY < QTYNaSklade(Dvig.StockId, Dvig.ItemID))
            {
                return Json(Resources.Resource.NetNaSklade);
            }
            ZakazPostavshiku Z = new ZakazPostavshiku();
            try
            {
               


                SaveToDocLog(Dvig.Id, Dvig.ItemID, "Начали сторно поступления на склад", Dvig.QTYFact, Dvig.StockId, 0, Dvig.CurrentFBillNo);

                ICStockBill S = new ICStockBill();
               
               
                    S = db.ICStockBill.Where(x => x.FBillNo.Equals(Dvig.StartFBillNo)).Include(x => x.ICStockBillEntry).First();
                
                List<ICStockBillEntry> SE = S.ICStockBillEntry.Where(x => x.FItemID == Dvig.ItemID).ToList();

                decimal QTYVernut = QTY;

                if (Dvig.StartFBillNo.Contains("WIN"))
                {
                    foreach (var E in SE)
                    {
                        decimal MognoVernut = E.FQty;
                        decimal QTYVosvrat = 0;
                        if (MognoVernut< QTYVernut)
                        {
                            QTYVosvrat = MognoVernut;
                        }
                        else
                        {
                            QTYVosvrat = QTYVernut;
                        }
                        SaveToDocLog(Dvig.Id, Dvig.ItemID, "Начинаем сторнировать документ WIN", QTYVosvrat, Dvig.StockId, 0, Dvig.CurrentFBillNo);
                        if (ZakazNumber.Equals("") == false)
                        {
                            int IDZakaza = 0;
                            try
                            {
                                IDZakaza = db.POOrder.Where(x => x.FBillNo.Equals(ZakazNumber)).Select(x => x.FInterID).First();
                            }
                            catch
                            {

                            }

                            Z.FindEntries(IDZakaza, ZakazNumber,0, E.FItemID.ToString());
                        }
                        else
                        {
                            Z.FindEntries(E.FSourceInterId, "POORD", E.FSourceEntryID, E.FItemID.ToString());
                        }
                        bool ez = Z.EditEntryZakaza(-E.FQty, U.Id);
                        SaveToDocLog(Dvig.Id, Dvig.ItemID, "Вернули в строку POORD статус = " + ez.ToString(), Dvig.QTYFact, Dvig.StockId, 0, Dvig.CurrentFBillNo);
                        bool go = PeremeshenieNaSklad(Dvig.CurrentFInterId,Dvig.StockId, Dvig.ItemID, Dvig.QTYFact, false);
                        SaveToDocLog(Dvig.Id, Dvig.ItemID, "Забрали со склада статус = " + go.ToString(), Dvig.QTYFact, Dvig.StockId, 0, Dvig.CurrentFBillNo);

                        QTYVernut -= QTYVosvrat;

                        if(QTYVernut<= QTYVosvrat)
                        {
                            goto Document;
                        }
                    }
                }

                if (Dvig.StartFBillNo.Contains("JIN"))
                {
                    foreach (var E in SE)
                    {
                        decimal MognoVernut = E.FQty;
                        decimal QTYVosvrat = 0;
                        if (MognoVernut < QTYVernut)
                        {
                            QTYVosvrat = MognoVernut;
                        }
                        else
                        {
                            QTYVosvrat = QTYVernut;
                        }
                        TranType = 5;
                        SaveToDocLog(Dvig.Id, Dvig.ItemID, "Начинаем сторнировать документ JIN", Dvig.QTYFact, Dvig.StockId, 0, Dvig.CurrentFBillNo);


                        if (ZakazNumber.Equals("") == false)
                        {
                            int IDZakaza = 0;

                            try
                            {
                                IDZakaza = db.ICSubContract.Where(x => x.FBillNo.Equals(ZakazNumber)).Select(x => x.FInterID).First();
                            }
                            catch
                            {

                            }

                            Z.FindEntries(IDZakaza, "WW", 0, E.FItemID.ToString());
                        }
                        else
                        {
                            Z.FindEntries(E.FSourceInterId, "WW", E.FSourceEntryID, E.FItemID.ToString());
                        }

                        
                        bool ez = Z.EditEntryZakaza(-E.FQty, U.Id);
                        SaveToDocLog(Dvig.Id, Dvig.ItemID, "Вернули в строку WW статус = " + ez.ToString(), Dvig.QTYFact, Dvig.StockId, 0, Dvig.CurrentFBillNo);
                        bool go = PeremeshenieNaSklad(Dvig.CurrentFInterId, Dvig.StockId, Dvig.ItemID, Dvig.QTYFact, false);
                        SaveToDocLog(Dvig.Id, Dvig.ItemID, "Забрали со склада статус = " + go.ToString(), Dvig.QTYFact, Dvig.StockId, 0, Dvig.CurrentFBillNo);
                        QTYVernut -= QTYVosvrat;

                        if (QTYVernut <= QTYVosvrat)
                        {
                            goto Document;
                        }
                    }
                }

                Document:
                ICStockBill StockBill = new ICStockBill();
                ICStockBillEntry StockBillEntry = new ICStockBillEntry();
                try
                {
                    StockBill = AddNewStockBill(TranType, Z, U.MOLId,-1);//Сторно шапка документа
                    StockBillEntry = AddStornoEntryNew(Dvig, QTY, StockBill.FBillNo,StockBill.FInterID,Z.ZakazId , Z.FBillNo);

                }
                catch
                {

                }

            }
            catch (Exception e)
            {

            }
            return Json("Ok");
        }


                public JsonResult OtmenaProvedeniyaNEW(int DvigenieNEWId)
        {
           UsersKDW U = FindCurrentKDWUser(true);
            try
            {
                DvigenieNEW Dvig = FindDvigenieNEW(DvigenieNEWId); // Это основнео движение
               
      
                SaveToDocLog(Dvig.Id, Dvig.ItemID, "Начали отмену проведения движения", Dvig.QTYFact, Dvig.StockId, 0, Dvig.CurrentFBillNo);

                ICStockBill S = db.ICStockBill.Where(x => x.FBillNo.Equals(Dvig.StartFBillNo)).First();
                List<ICStockBillEntry> SE = S.ICStockBillEntry.Where(x => x.FItemID == Dvig.ItemID).ToList();

                decimal QTY = Dvig.QTYFact;

                int Stock2Id = 0; //Это предыдущее место хранения

                

                if (Dvig.CurrentFBillNo.Contains("WIN"))
                {
                    foreach (var E in SE)
                    {
                        SaveToDocLog(Dvig.Id, Dvig.ItemID, "Начинаем отменять документ WIN", Dvig.QTYFact, Dvig.StockId, 0, Dvig.CurrentFBillNo);
                        ZakazPostavshiku Z = new ZakazPostavshiku();
                        Z.FindEntries(E.FSourceInterId, "POORD", E.FSourceEntryID, E.FItemID.ToString());
                        bool ez = Z.EditEntryZakaza(-E.FQty, U.Id);
                        SaveToDocLog(Dvig.Id, Dvig.ItemID, "Вернули в строку POORD статус = "+ ez.ToString(), Dvig.QTYFact, Dvig.StockId, 0, Dvig.CurrentFBillNo);
                        bool go = PeremeshenieNaSklad(Dvig.CurrentFInterId, Dvig.StockId, Dvig.ItemID, Dvig.QTYFact, false);
                        SaveToDocLog(Dvig.Id, Dvig.ItemID, "Вернули на склад статус = "+go.ToString(), Dvig.QTYFact, Dvig.StockId, 0, Dvig.CurrentFBillNo);

                     /*   POOrder P = db.POOrder.Where(x => x.FInterID == E.FInterID).First();
                        POOrderEntry PE = db.POOrderEntry.Where(x => x.FItemID == Dvig.ItemID && x.FInterID == Dvig.POOrderId).First();//&& x.FCommitQty > 0
                        PE.FAuxCommitQty -= Dvig.QTYFact;
                        PE.FAuxStockQty -= Dvig.QTYFact;
                        PE.FCommitQty -= Dvig.QTYFact;
                        PE.FStockQty -= Dvig.QTYFact;

                        bool go = PeremeshenieNaSklad(Dvig.StockId, Dvig.ItemID, Dvig.QTYFact, false);
                        SaveToDocLog(Dvig.Id, Dvig.ItemID, "Отняли со склада " + go.ToString(), Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);
                        if (!go)
                        {
                            return Json(Resources.Resource.NomenklaturiNedostatochno);
                        }
                        else
                        {

                            //  S.FStatus = 0;
                            //  S.FCheckerID = null;
                            //S.FCancellation = true;


                            try
                            {
                                //       db.Entry(S).State = EntityState.Modified;
                                //  db.ICStockBill.Remove(S);
                                //  db.SaveChanges();
                                //   SaveToDocLog(Dvig.Id, Dvig.ItemID, "Отняли из заказа поставщику " + P.FBillNo + " Id "+P.FInterID, Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);

                                db.Entry(P).State = EntityState.Modified;
                                db.SaveChanges();
                                SaveToDocLog(Dvig.Id, Dvig.ItemID, "Сделали заказ поставщику не завершенным " + P.FBillNo, Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);

                                db.Entry(PE).State = EntityState.Modified;
                                db.SaveChanges();
                                SaveToDocLog(Dvig.Id, Dvig.ItemID, "Отняли из строки заказа поставщику " + P.FBillNo + " Id " + P.FInterID + " строка N" + PE.FEntryID, Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);

                                // foreach (var POE in PE)
                                //  {
                                //     db.POOrderEntry.Remove(POE);
                                //   db.SaveChanges();
                                //   }

                                //  db.POOrder.Remove(P);
                                //  db.SaveChanges();

                        


                            }
                            catch (Exception e)
                            {
                                SaveToDocLog(Dvig.Id, Dvig.ItemID, "Ошибка не смогли изменить заказ поставщику " + P.FBillNo + " Id " + P.FInterID + " строка N" + PE.FEntryID + e.Message, Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);
                                return Json(Resources.Resource.Error + e.Message);
                            }

                        }
                     */
                    }
                }

                if (Dvig.CurrentFBillNo.Contains("JIN"))
                {
                    foreach (var E in SE)
                    {
                        SaveToDocLog(Dvig.Id, Dvig.ItemID, "Начинаем отменять документ JIN", Dvig.QTYFact, Dvig.StockId, 0, Dvig.CurrentFBillNo);
                        ZakazPostavshiku Z = new ZakazPostavshiku();
                        Z.FindEntries(E.FInterID, "WW", E.FEntryID, E.FItemID.ToString());
                        bool ez = Z.EditEntryZakaza(-E.FQty, U.Id);
                        SaveToDocLog(Dvig.Id, Dvig.ItemID, "Вернули в строку WW статус = " + ez.ToString(), Dvig.QTYFact, Dvig.StockId, 0, Dvig.CurrentFBillNo);
                        bool go = PeremeshenieNaSklad(Dvig.CurrentFInterId, Dvig.StockId, Dvig.ItemID, Dvig.QTYFact, false);
                        SaveToDocLog(Dvig.Id, Dvig.ItemID, "Вернули на склад статус = " + go.ToString(), Dvig.QTYFact, Dvig.StockId, 0, Dvig.CurrentFBillNo);


                        /*  ICSubContract P = db.ICSubContract.Where(x => x.FInterID == Dvig.POOrderId).First();
                          ICSubContractEntry PE = db.ICSubContractEntry.Where(x => x.FItemID == Dvig.ItemID && x.FCommitQty > 0 && x.FInterID == Dvig.POOrderId).First();
                          PE.FAuxCommitQty -= Dvig.QTYFact;
                          //  PE.FAuxStockQty -= Dvig.QTYFact;
                          PE.FCommitQty -= Dvig.QTYFact;
                          P.FClosed = 0;
                          //  PE.FStockQty -= Dvig.QTYFact;

                          bool go = PeremeshenieNaSklad(Dvig.StockId, Dvig.ItemID, Dvig.QTYFact, false);
                          SaveToDocLog(Dvig.Id, Dvig.ItemID, "Отняли со склада " + go.ToString(), Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);
                          if (!go)
                          {
                              return Json(Resources.Resource.NomenklaturiNedostatochno);
                          }
                          else
                          {

                              S.FStatus = 0;
                              S.FCheckerID = null;
                              //S.FCancellation = true;


                              try
                              {
                                  // db.Entry(S).State = EntityState.Modified;
                                  //  db.ICStockBill.Remove(S);
                                  // db.SaveChanges();
                                  // SaveToDocLog(Dvig.Id, Dvig.ItemID, "Отняли из заказа поставщику " + P.FBillNo + " Id " + P.FInterID, Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);
                                  db.Entry(P).State = EntityState.Modified;
                                  db.SaveChanges();
                                  SaveToDocLog(Dvig.Id, Dvig.ItemID, "Сделали заказ поставщику не завершенным " + P.FBillNo, Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);


                                  db.Entry(PE).State = EntityState.Modified;
                                  db.SaveChanges();
                                  SaveToDocLog(Dvig.Id, Dvig.ItemID, "Вернули в строку заказа поставщику " + P.FBillNo + " Id " + P.FInterID + " строка N" + PE.FEntryID + " колво стало " + PE.FAuxCommitQty, Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);

                                  // foreach (var POE in PE)
                                  //  {
                                  //     db.POOrderEntry.Remove(POE);
                                  //   db.SaveChanges();
                                  //   }

                                  //  db.POOrder.Remove(P);
                                  //  db.SaveChanges();




                              }
                              catch (Exception e)
                              {
                                  SaveToDocLog(Dvig.Id, Dvig.ItemID, "Ошибка не смогли изменить заказ поставщику " + P.FBillNo + " Id " + P.FInterID + " строка N" + PE.FEntryID + e.Message, Dvig.QTYFact, Dvig.StockId, 0, Dvig.FBillNo);
                                  return Json(Resources.Resource.Error + e.Message);
                              }
                          }
                        */
                    }
                }

                if (Dvig.CurrentFBillNo.Contains("CHG"))
                {
                    decimal QTYInStock = SearchQTYInStock(Dvig.StockId.ToString(), Dvig.ItemID.ToString());
                    if (QTYInStock<Dvig.QTYFact)
                    {
                        return Json(Resources.Resource.NetNaSklade);
                    }
                    if (Stock2Id == 0)
                    {
                        Stock2Id = Dvig.StockFromId;// Stock2Id = SE[0].FSCStockID;
                    }
                    if (Stock2Id!=null&&Stock2Id!=0)
                    {
                        bool go = PeremeshenieNaSklad(Dvig.CurrentFInterId, Dvig.StockId, Dvig.ItemID, Dvig.QTYFact, false);
                        go = PeremeshenieNaSklad(Dvig.CurrentFInterId, Dvig.StockFromId, Dvig.ItemID, Dvig.QTYFact, true);
                        if (!go)
                        {
                            return Json(Resources.Resource.Error);
                        }
                      
                    } 
                }


                if (Dvig.CurrentFBillNo.Contains("SOUT"))
                {
                    // bool go = PeremeshenieNaSklad(Dvig.StockId, Dvig.ItemID, Dvig.QTYFact, false);
                    //   if (!go)
                    //   {
                    //       return Json(Resources.Resource.Error);
                    //  }


                    var IC = db.ICStockBill.Where(x => x.FBillNo.Equals(Dvig.CurrentFBillNo)).Include(x => x.ICStockBillEntry).First();
                    var ICE = IC.ICStockBillEntry.Where(x => x.FItemID == Dvig.ItemID).First();
                    int DepartmentID = Dvig.StockId;
                    var Work = db.ICMO.Where(x => x.FBillNo.Equals(ICE.FSourceBillNo)).Include(x => x.t_Department).Include(x => x.PPBOM).First();
                    int BOM = Work.PPBOM.First().FInterID;
                    if (Stock2Id == 0)
                    {
                        Stock2Id = Dvig.StockFromId;
                    }

                    var BOMEntry = db.PPBOMEntry.Where(x => x.FItemID == Dvig.ItemID && x.FInterID == BOM).First();

                    BOMEntry.FQty -= QTY;
                    BOMEntry.FAuxQty -= QTY;
                    // Было отключено до 14.04.2023
                    BOMEntry.FStockQty -= QTY;
                    BOMEntry.FAuxStockQty -= QTY;
                    BOMEntry.FWIPAuxQTY -= QTY;
                    BOMEntry.FWIPQTY -= QTY;

                    try
                    {
                        List<NZPNEW> nzp = db.NZPNEW.Where(x => x.FromDvigenieNEWId == Dvig.Id).ToList();
                        decimal Ostalos = QTY; 
                        foreach (NZPNEW n in nzp)
                        {
                            if (Ostalos > n.QTYFact)
                            {
                                Ostalos -= n.QTYFact;
                                n.QTYFact = 0;

                            }
                            else
                            {
                                n.QTYFact -= QTY;
                                Ostalos = 0;
                            }
                            if (n.QTYFact <= 0)
                            {
                                n.Active = false;
                            }
                            try
                            {
                                db.Entry(nzp).State = EntityState.Modified;
                                db.SaveChanges();
                            }
                            catch
                            {

                            }
                            if (Ostalos==0)
                            {
                                break;
                            }
                        }
                    }
                    catch
                    {

                    }

                    bool go = PeremeshenieNaSklad(Dvig.CurrentFInterId, Stock2Id, Dvig.ItemID, QTY, true);
                    if (!go)
                    {
                        SaveToDocLog(Dvig.Id, Dvig.ItemID, "Вернули на склад статус= " + go.ToString(), Dvig.QTYFact, Stock2Id, 0, Dvig.CurrentFBillNo);
                        return Json(Resources.Resource.Error);
                    }
                    try
                    {
                        //  foreach (var se in SE)
                        //    {
                        //        db.ICStockBillEntry.Remove(se);
                        //       db.SaveChanges();

                        //    }
                        S.FStatus = 0;
                        S.FCheckerID = null;
                        //  S.FCancellation = true;
                        db.Entry(S).State = EntityState.Modified;
                        //  db.ICStockBill.Remove(S);
                        db.SaveChanges();

                        db.Entry(BOMEntry).State = EntityState.Modified;
                        db.SaveChanges();

                        Session["Dvigenie"] = null;
                    }
                    catch (Exception e)
                    {
                        return Json(Resources.Resource.Error);
                    }
                }

              
                int ItemIdDvig = Dvig.ItemID;
                int LevDvig = Dvig.Lev;
                int DvigId = Dvig.Id;
                int DvigItem = Dvig.ItemID;
                int DvigStock = Dvig.StockId;
                decimal DvigQTY = Dvig.QTYFact;
                string DvigNumber = Dvig.CurrentFBillNo;
                Dvig = null;
                DvigenieNEW DD = new DvigenieNEW();
                try
                {
                    // D.POOrder = Dvig.POOrder;
                    //  D.POOrderId = Dvig.POOrderId;
                    //  D.Item = Dvig.Item;
                    //  D.ItemID = Dvig.ItemID;
                    
                   

                    DD = db.DvigenieNEW.Where(x => x.Id == DvigId).First();// db.Dvigenie.Where(x => x.POOrderId == POOrderIDDvig && x.ItemID == ItemIdDvig && x.Otmena == false).OrderByDescending(x => x.Id).First();

                    DD.Otmena = true;
                    DD.QTYFact = 0;

                    db.Entry(DD).State = EntityState.Modified;
                    // db.Dvigenie.Remove(Dvig);
                    db.SaveChanges();
                    SaveToDocLog(DD.Id, DD.ItemID, "Отменили движение " + DvigNumber, DD.QTYFact, DvigStock, 0, DvigNumber);


                }
                catch (Exception ex)
                {
                    SaveToDocLog(Dvig.Id, Dvig.ItemID, "Ошибка не смогли отменить движение ", 0, 0, 0, DvigNumber);

                    return Json(ex.Message);
                }

                //Распроводим док
                ICStockBill Doc = new ICStockBill();
                try
                {
                    Doc = db.ICStockBill.Where(x => x.FBillNo == DvigNumber).First();
                    if (Doc.FInterID != 0)
                    {
                        SaveToDocLog(DvigId, DvigItem, "Пробуем удалить строки в документе " + DvigNumber, 0, 0, 0, Doc.FBillNo);
                        List<ICStockBillEntry> DocEntry = db.ICStockBillEntry.Where(x => x.FInterID == Doc.FInterID).ToList();
                        foreach (var de in DocEntry)
                        {
                            /* de.FQty = 0;
                             de.FCommitQty = 0;
                             de.FAuxCommitQty = 0;
                             de.FAuxQty = 0;
                             */
                            try
                            {
                                db.Entry(de).State = EntityState.Deleted;
                                db.SaveChanges();
                                SaveToDocLog(DvigId, DvigItem, "Удалили строку в документе " + DvigNumber, 0, 0, 0, Doc.FBillNo);
                            }
                            catch (Exception e)
                            {
                                SaveToDocLog(DvigId, DvigItem, "Не смогли удалить строки документа " + e.Message, 0, 0, 0, Doc.FBillNo);
                            }

                        }

                    }
                }
                catch
                {
                    SaveToDocLog(DvigId, DvigItem, "Не смогли найти документ ", 0, 0, 0, DvigNumber);
                }
                try
                {

                    //Обходим триггер, подготавливаем шапку к удалению
                    SaveToDocLog(DvigId, DvigItem, "Подготавливаем шапку к удалению", DvigQTY, DvigStock, 0, DvigNumber);
                    Doc.FCancellation = false;
                    Doc.FCheckerID = null;
                    Doc.FPosterID = null;
                    Doc.FBillerID = null;
                    Doc.FHookInterID = null;
                    Doc.FVchInterID = null;

                    db.Entry(Doc).State = EntityState.Modified;
                    db.SaveChanges();
                    SaveToDocLog(DvigId, DvigItem, "Шапка готова к удалению Checker 0 Cancellation 0", DvigQTY, DvigStock, 0, DvigNumber);

                    db.Entry(Doc).State = EntityState.Deleted;
                    db.SaveChanges();
                    SaveToDocLog(DvigId, DvigItem, "Удалили шапку документа", DvigQTY, DvigStock, 0, DvigNumber);

                }
                catch (Exception e)
                {
                    SaveToDocLog(DvigId, DvigItem, "Не смогли удалить шапку документа " + e.Message, 0, 0, 0, DvigNumber);
                }
            
                    if (DD.FromDvigenie != null && DD.FromDvigenie > 0)
                    {
                        DvigenieNEW DvigFrom = FindDvigenieNEW(DD.FromDvigenie); // Ищем родительское движение
                        EditDvigenieNEW(DvigFrom, QTY);
                    }
                  

                 /*   try
                    {
                        //Пробуем вернуть в предыдущее движение
                        DvigenieNEW D = new DvigenieNEW();

                        D = db.DvigenieNEW.Where(x => x.Id == DD.FromDvigenie).First(); // db.Dvigenie.Where(x => x.POOrderId == POOrderIDDvig && x.ItemID == ItemIdDvig && x.Otmena == false && LevDvig == x.Lev).OrderByDescending(x => x.Id).First();
                        SaveToDocLog(DvigId, DvigItem, "Нашли предыдущее движение " + DD.FromDvigenie, QTY, 0, 0, "");

                        D.QTYFact += QTY;
                        db.Entry(D).State = EntityState.Modified;
                        db.SaveChanges();
                        SaveToDocLog(Dvig.Id, Dvig.ItemID, "Сохранили в родительский код ", QTY, 0, 0, "");
                    }
                    catch
                    {
                        SaveToDocLog(Dvig.Id, Dvig.ItemID, "Предупреждение не смогли вернуть в родительский код ", 0, 0, 0, "");
                    }
                */

            }
            catch
            {

            }
            return Json("Ok");
        }

        //Сторно поступления на склад СТАРАЯ ВЕРСИЯ
        public JsonResult StornoPostJsonOld( string Manager, int DvigenieId, decimal QTY)
        {
            string Message = "";
            int QRID = 0;
            int POOrderId = 0;
            int ItemId = 0;
            DateTime Date = DateTime.Now.AddMonths(-6);

            UsersKDW U = new UsersKDW();
            U = FindCurrentKDWUser();
            ItemView I = new ItemView();
            if (DvigenieId != 0)
            {
                try
                {
                    I.LastDvig = FindDvigenie(DvigenieId);
                    I.Item = I.LastDvig.Item;
                    I.POOrder = I.LastDvig.POOrder;
                    I.QTY = I.LastDvig.QTYFact;
                    I.Lev = I.LastDvig.Lev;
                    I.StockOrDep = I.LastDvig.Stock;
                    I.FindDvigenies();
                }
                catch
                {

                }
            }

         //   I.Item = PerevestiItem(I.Item);



            int StockID = 0;
            int ManagerID = 0;
            try
            {
                POOrderId = I.LastDvig.POOrderId;
                ItemId = I.LastDvig.ItemID;
                StockID = I.LastDvig.StockId;//db.t_Stock.Where(x => x.FName.Equals(Stock)).Select(a => a.FItemID).First();
                ManagerID = FindManagerID(Manager);
            }
            catch
            {
                return Json(Resources.Resource.ZapolniteYellow);
            }

            /*  var Item = db.POOrderEntry.Where(x => x.FInterID == InterID && x.FEntryID == EntryID).First();
              Item.FCommitQty = FCommitQty;

              try
              {
                  db.Entry(Item).State = EntityState.Modified;
                  db.SaveChanges();
                  ViewBag.Message = "Данные успешно сохранены!";
                  Message = "Данные успешно сохранены!";
              }
              catch (Exception E)
              {
                  ViewBag.Message = "Ошибка = " + E.Message;
                  Message = "Ошибка = " + E.Message;
              }

              //Изменяем заказ поставщику для теста
              */

            // db.POOrderEntry.Add(pOOrderEntry);
            //   db.SaveChanges();
            //    return RedirectToAction("Index");



            var Item = db.POOrderEntry.Where(x => x.FInterID == POOrderId && x.FItemID == ItemId ).Include(x => x.t_Item).First();//Строка в заказе поставщику

            if (QTY > Item.FCommitQty || QTY > I.LastDvig.QTYFact )
            {
                return Json(Resources.Resource.VveliBolsheChemVZakaze);
            }

            if (QTY == 0)
            {
                return Json(Resources.Resource.NomenklaturiNedostatochno);
            }

         decimal QTYInS =   SearchQTYInStock(StockID.ToString(), I.Item.FNumber);
           
            if (QTYInS < QTY)
            {
                return Json(Resources.Resource.NomenklaturiNedostatochno + Resources.Resource.Stock);
            }
            var MaxNum = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            //Плюсуем макс номер
            MaxNum.FMaxNum++;

            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 1).First();

            string WIN = "WIN0" + MaxStockID.FCurNo;


            var POOrder = I.LastDvig.POOrder;// db.POOrder.Where(x => x.FInterID == InterID).Include(x => x.t_Department).First();//Берем данные из заказа поставщику

            int userId = FindUserID(FindCurrentUser());// TODO найти пользака текущего. Сделать модуль регистрации пользователей и сопоставить их с кинди


            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum.FMaxNum.Value;
            StockBill.FDate = DateTime.Now.Date;
            StockBill.FTranType = 1;
            StockBill.FBillNo = WIN;
            StockBill.FDeptID = POOrder.FDeptID;
            StockBill.FEmpID = POOrder.FEmpID;
            StockBill.FSupplyID = POOrder.FSupplyID;
            StockBill.FCheckerID = U.UserID; 
            StockBill.FManagerID = U.MOLId;
            StockBill.FSManagerID = U.MOLId;
            StockBill.FBillerID = U.UserID;
            StockBill.FFManagerID = ManagerID;
            StockBill.FHookInterID = 37861;//Неизвестно что за хук
            StockBill.FPosted = 1;
            StockBill.FCheckSelect = 0;
            StockBill.FROB = -1;
            StockBill.FStatus = 1;
            StockBill.FUpStockWhenSave = false;
            StockBill.FCancellation = false;
            StockBill.FOrgBillInterID = 0;
            StockBill.FBillTypeID = 0;
            StockBill.FPOStyle = 252;
            StockBill.FBackFlushed = false;
            StockBill.FUUID = Guid.NewGuid();
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
            StockBill.FMarketingStyle = 12530;
            StockBill.FCheckDate = DateTime.Now;
            StockBill.FExplanation = "WEB "+ U.Name ;
            StockBill.FSelTranType = 71;
            StockBill.FChildren = 0;
            StockBill.FBrID = 0;
            StockBill.FSettleDate = DateTime.Now.Date;
            StockBill.FPrintCount = 1;
            StockBill.FHookStatus = 2;
            StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;
            StockBill.FsourceType = 37521;
            StockBill.FPayCondition = 1000;
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
            StockBill.FPOMode = 36680;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";
            StockBill.FHeadSelfA0143 = "KingDeeWeb";
            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum.FMaxNum.Value;

                db.Entry(MaxNum).State = EntityState.Modified;
                db.SaveChanges();


                MaxStockID.FCurNo++;
                MaxStockID.FDesc = "WIN+" + MaxStockID.FCurNo;
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();
                go = true;
            }
            catch (Exception e)
            {

            }



            var QR = new QRTable();
            int QID = 0;
            bool PrintQR = false;
            if (go)//если добавлена шапка то добавляем строки
            {

                if (QTY==I.LastDvig.QTYFact)//если сторнируем всю партию
                {
                    SaveDvigenie(POOrder.FBillNo,StockBill.FBillNo, I.LastDvig.QTYFact - QTY, Item.FItemID, POOrder.FInterID, StockID,0, QRID, I.LastDvig.Lev,0, "STORNO",I.LastDvig.Mnimoe);
                    QID = I.LastDvig.QRID.Value;
                }
                else
                {
                       int MaxLVL = SelectMaxLev(POOrder.FInterID, ItemId,POOrder.FBillNo);
                        MaxLVL++;
                        QID = SaveQR(Item.t_Item, POOrder.FBillNo, POOrder.FInterID, MaxLVL);//поступление на склад генерит 0 уровень

                    //Добавляем движение
                    SaveDvigenie(POOrder.FBillNo,StockBill.FBillNo, I.LastDvig.QTYFact - QTY, Item.FItemID, POOrder.FInterID, StockID,0, QRID, MaxLVL,I.LastDvig.Id,"STORNO", I.LastDvig.Mnimoe);
                    PrintQR = true;
                }

                EditDvigenie(I.LastDvig, I.LastDvig.QTYFact -= QTY);
             

                //Сохраняем QR код
                //  string STQ = Item.t_Item.FNumber + ";" + Item.t_Item.FName + ";" + FCommitQty + ";" + StockBill.FCheckDate.Value.ToString("dd.MM.yyyy")+";"+POOrder.FBillNo+";"+FindRussianName(Item.t_Item) +";"+ StockID +";";

                //   int MaxLVL = SelectMaxLev(POOrder.FInterID, Item.t_Item.FItemID);
                //    MaxLVL++;
                //    QRID = SaveQR(Item.t_Item, QTY, POOrder.FInterID, MaxLVL);//поступление на склад генерит 0 уровень
                //     try
                //    {


                //        QR.QR = CreateQrCode(STQ);
                //        QR.QRstring = STQ;
                //        QR.Date = DateTime.Now;
                //        db.QRTable.Add(QR);
                //        db.SaveChanges();

                //    }
                //     catch (Exception c)
                //    {
                //       Console.WriteLine("Не смогли сгенерировать QR код " + c.Message);
                //    }




                go = false;

                Entry.FBrNo = "0";

               // При сторнировании должны быть минуса FQtyMust FQty FAmount FAuxQty , FAuxQtyMust, FPlanAmount, FPurchaseAmount 30/03/2023

                Entry.FItemID = Item.FItemID;
                Entry.FQtyMust = -Item.FQty;
                Entry.FAuxQtyMust = -Item.FQty;
                Entry.FQty = -QTY;
                Entry.FPrice = FindPrice(I.LastDvig);
                Entry.FBatchNo = "";
                decimal Q = Convert.ToDecimal(-QTY);
                decimal C = Convert.ToDecimal(Entry.FPrice);
                Entry.FAmount =  Q * C;
                Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                Entry.FNote = "KingDeeWeb";
                Entry.FUnitID = 259;//Единицы измерения TODO прицепить
                Entry.FAuxPrice = C;
                Entry.FPurchasePrice = Entry.FPurchasePrice; // Закупочная цена с налогом из заказа поставщику
                Entry.FPurchaseAmount = Q * Entry.FPurchasePrice;
                Entry.FAuxQty = -QTY;
                Entry.FSourceBillNo = POOrder.FBillNo;
                Entry.FDCStockID = StockID;
                Entry.FSourceInterId = POOrder.FInterID;
                Entry.FOrderBillNo = POOrder.FBillNo;//Заказа поставщику
                Entry.FOrderInterID = POOrder.FInterID;//Номер заказа поставщику
                Entry.FOrderEntryID = Item.FEntryID;
                Entry.FMapNumber = QR.Id.ToString();//Сюда сохраняем QR Id
                Entry.FPlanAmount = -QTY;
                Entry.FPlanPrice = FindPlanPrice(Item.FItemID);
                Entry.FAuxPlanPrice = Entry.FPlanPrice;
                Entry.FSourceEntryID = Item.FEntryID;//Строка заказа поставщику
                    Entry.FSourceTranType = 71;//Заказ поставщику
                Entry.FPlanMode = 14036;
                Entry.FEntrySelfA0161 = 13;
                Entry.FEntrySelfA0173 = Item.FEntrySelfP0268; // Заказ покупателя из строки заказа поставщику
                Entry.FQtyInvoice = -QTY;

              //  Entry.FMapNumber = "";
                Entry.FContractBillNo = "";
                Entry.FICMOBillNo = "";
                Entry.FMTONo = "";
                Entry.FItemSize = "";
                Entry.FItemSuite = "";
                Entry.FPositionNo = "";
                Entry.FSEOutBillNo = "";
                Entry.FConfirmMemEntry = "";
                Entry.FItemStatementBillNO = "";
                Entry.FReturnNoticeBillNO = "";
                Entry.FSplitState = "";





                try
                {
                    //Сохраняем строку
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();

          


                    go = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                }

                //Модифицируем заказ поставщику
                POOrder = db.POOrder.Where(x => x.FInterID == POOrderId).Include(x => x.POOrderEntry).First();//Берем данные из заказа поставщику
                if (POOrder.FStatus==3)
                {
                    POOrder.FStatus = 2;
                }
                if (POOrder.FClosed == 1)
                {
                    POOrder.FClosed = 0;
                }

                POOrderEntry E = new POOrderEntry();
                E = POOrder.POOrderEntry.Where(x => x.FItemID == I.LastDvig.ItemID).First();
                E.FStockQty -= QTY;
                E.FAuxStockQty -= QTY;
                E.FCommitQty -= QTY;
                E.FAuxCommitQty -= QTY;

                try
                {
                    db.Entry(POOrder).State = EntityState.Modified;
                    db.SaveChanges();

                    db.Entry(E).State = EntityState.Modified;
                    db.SaveChanges();
                    ViewBag.Message = "Ok";
                }
                catch (Exception ex)
                {
                    ViewBag.Message = "Ошибка = " + ex.Message;
                }


               
          
            }

            if (go)
            {
                go = PeremeshenieNaSklad(MaxNum.FMaxNum.Value, StockID, Item.FItemID, QTY, false);//Плюсуем на склад
                Message = "Ok";
                /* go = false;
                 //Добавляем в остаток на складе
                 ICInventory Sklad = new ICInventory();
                 int EstLiStrokaNaSklade = 0;
                 try
                 {
                     EstLiStrokaNaSklade = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == Item.FItemID).Count();
                 }
                 catch 
                 {

                 }
                 if (EstLiStrokaNaSklade > 0)
                 {

                     try
                     {
                         Sklad = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == Item.FItemID).First();
                         Sklad.FQty += FCommitQty;
                     }
                     catch (Exception SE)
                     {
                         Console.WriteLine("Не смогли найти строку на складе " + SE.Message);
                     }

                     try
                     {

                         db.Entry(Sklad).State = EntityState.Modified;
                         db.SaveChanges();
                         go = true;
                     }

                     catch (Exception exx)
                     {
                         Console.WriteLine("Ошибка добавления на склад " + exx.Message);
                     }
                 }
                 else
                 {
                     //Если нет такой строки то добавляем новую
                     Sklad.FQty = FCommitQty;
                     Sklad.FStockID = StockID;
                     Sklad.FItemID = Item.FItemID;
                     Sklad.FBrNo = "0";
                     Sklad.FBatchNo = "";
                     Sklad.FKFDate = "";
                     Sklad.FMTONo = "";
                     try
                     {
                         db.ICInventory.Add(Sklad);
                         db.SaveChanges();
                         go = true;
                     }
                     catch (Exception exxx)
                     {
                         Console.WriteLine("Не смогли добавить новую строку поступления на склад ICInventory " + exxx.Message);
                     }
                 }
                */


            }

            if (go)
            {
                Message = "Ok";
            }
            //     "(FBrNo, FInterID, FEntryID, FItemID, FQtyMust,FAuxQtyMust, FQty, FPrice, FBatchNo, " +
            //                        "FAmount, FNote, FUnitID, FAuxPrice, FAuxQty, FProcessCost, FMaterialCost, FTaxAmount," +
            //                         " FSourceBillNo, FDCStockID, FSourceInterId, FOrderBillNo, FOrderInterID, FOrderEntryID)" +
            //                         "VALUES('O', " + InterId + "," + NPP + ", " + NL[0].FItemId + ", " + KolichestvoVZakaze + ", " + KolichestvoVZakaze + ", " + QTY + ", " + CENA + ", '', " +
            //                         "" + Amount + ", 'Enterprise', 259, " + CENA + ", " + QTY + ", 0, 0, 0," +
            //                         " '" + PURCH + "', " + SkladKitai + ", " + PURCHINTERID + ", '" + PURCH + "', " + PURCHINTERID + "," + StrokaPURCH + ")", true);




            //Меняем остатки в заказе поставщику
        /*    try
            {
           //     Item.FCommitQty += QTY;
             //   db.Entry(Item).State = EntityState.Modified;
            //    db.SaveChanges();
             //   ViewBag.Message = "Ok";
            }
            catch (Exception E)
            {
                ViewBag.Message = "Ошибка = " + E.Message;
            }
        */


            return Json(Message + ";" + QID+";"+PrintQR.ToString());
        }

        public string ZapolnitNulls(int Number, int Count)
        {
            string Result = "";
            int NumberMax = Number.ToString().Length;
            for (int i=NumberMax;i<Count;i++)
            {
                Result += "0";
            }
            Result = Result + Number;
            return Result;
        }


        public ICStockBill AddNewStockBill(int TranType, ZakazPostavshiku Z, int ManagerID, int Storno = 1 )
        {
            int Result = 0;
            short TranTypeS = Convert.ToInt16(TranType);
            var ICBillNO = db.ICBillNo.Where(x => x.FBillID == TranType).First();
         
            var MaxNum = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            //Плюсуем макс номер
            MaxNum.FMaxNum++;

            int NumberCount = 0;
            NumberCount = ICBillNO.FFormat.Length;
            int MaxDocNumber = ICBillNO.FCurNo.Value;

            //Добавляем номер документа по стандарту WIN + 000999
            string WIN = ICBillNO.FPreLetter+ZapolnitNulls(MaxDocNumber,NumberCount);//"WIN0" + MaxStockID.FCurNo;
            SaveToDocLog(0, 0, "Начали создание документа Сторно=" + WIN, 0, 0, 0, "");
            /*  int FSelTranType = 0;
              int FPOMode = 0;
              int FPOStyle = 0;
              if (Z.Tip.Equals("WW"))
              {
                  FSelTranType = 1007105;
                  FPOMode = 0;
                  FPOStyle = 0;
              }

              if (Z.Tip.Equals("POORD"))
              {
                  FSelTranType = 71;
                  FPOMode = 36680;
                  FPOStyle = 252;

              }
            */
            //1007105


            //var POOrder = db.POOrder.Where(x => x.FInterID == InterID).Include(x => x.t_Department).First();//Берем данные из заказа поставщику


            UsersKDW U = FindCurrentKDWUser();
            int userId = U.UserID;
            int NewDvigId = 0;
            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            ICStockBill StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum.FMaxNum.Value;
            StockBill.FDate = DateTime.Now.Date;
            StockBill.FTranType = TranTypeS;
            StockBill.FBillNo = WIN;
            StockBill.FDeptID = Z.DepartmentId;
            StockBill.FEmpID = Z.EmployeeId;
            StockBill.FSupplyID = Z.SupplierId;
            StockBill.FCheckerID = userId;
            StockBill.FPosterID = userId;
            StockBill.FManagerID = U.MOLId;
            StockBill.FSManagerID = U.MOLId; // От кого
            StockBill.FBillerID = userId;
            StockBill.FFManagerID = ManagerID;//Кому
          //  StockBill.FHookInterID = 37861;//Неизвестно что за хук
            StockBill.FPosted = 1;
            StockBill.FCheckSelect = 0;
            StockBill.FROB = Convert.ToInt16( 1*Storno);
            StockBill.FStatus = 1;
            StockBill.FUpStockWhenSave = false;
            StockBill.FCancellation = false;
            StockBill.FOrgBillInterID = 0;
            StockBill.FBillTypeID = 0;
            StockBill.FPurposeID = Z.PurposeId;//WIn=0 JIN=14190 от 03.03.2023
            StockBill.FHookInterID = 0;//Должен быть нулевым в JIN, создается при создании документа ФАПЬЯО от 03.03.2023

            StockBill.FBackFlushed = false;
            StockBill.FUUID = Guid.NewGuid();
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
            StockBill.FMarketingStyle = 12530;
            StockBill.FCheckDate = DateTime.Now.Date;
            StockBill.FExplanation = "WEB User="+U.Name;
            StockBill.FSelTranType = Z.FSelTranType;
            StockBill.FChildren = 1;
            StockBill.FHookStatus = 0; //Нужно ставить 0 так как бухгалтер ручками проставляет При 2ке ставится галка При 1ке ставится P
            StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059; //У всех так
            StockBill.FsourceType = 37521;//У всех так
            StockBill.FPayCondition = 1000;//Так или 0 непонятно
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
            StockBill.FPOMode = 36680;//Z.FPOMode;
            StockBill.FPOStyle = 252;//Z.FPOStyle;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";
            StockBill.FHeadSelfA0143 = "KingDeeWeb";
           // ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                SaveToDocLog(0, 0, "Создан документ", 0, 0, 0, WIN);
                //   Entry.FInterID = MaxNum.FMaxNum.Value;
                //  Result = MaxNum.FMaxNum.Value;

                db.Entry(MaxNum).State = EntityState.Modified;
                db.SaveChanges();


                ICBillNO.FCurNo++;
                ICBillNO.FDesc = ICBillNO.FPreLetter + "+"  +ZapolnitNulls(ICBillNO.FCurNo.Value, NumberCount);
                db.Entry(ICBillNO).State = EntityState.Modified;
                db.SaveChanges();

                bool BC = BillCodeDvig(TranType, ICBillNO.FCurNo.Value);
                SaveToDocLog(0, 0, "Сдвинут счетчик "+ WIN + " статус=" + BC.ToString(), 0, 0, 0, WIN);
                go = true;
            }
            catch (Exception e)
            {

            }
            return StockBill;
        }

        public string FindModelByItem (int ItemId)
        {
            string Model = "KingDeeWeb";
            try
            {

                t_ICItem It = db.t_ICItem.Where(x => x.FItemID == ItemId).First();
                Model = It.FModel;
            }
            catch (Exception e)
            {

            }
            return Model;
        }

        public ICStockBillEntry AddStornoEntry(ItemView I, decimal QTY, int WINFinterId, string WINFBillNo, int StockFrom = 0)
        {
           
            var QR = new QRTable();
            int QID = 0;
            int NewDvigID = 0;
            bool PrintQR = false;

            QTY = Math.Round(QTY, 3);
            SaveToDocLog(NewDvigID, I.LastDvig.ItemID, "Начали создание строк документа Сторно"+ WINFBillNo, QTY, StockFrom, 0, WINFBillNo);
            try
            {
                if (QTY == I.LastDvig.QTYFact)//если сторнируем всю партию
                {

                    QID = I.LastDvig.QRID.Value;
                    NewDvigID = SaveDvigenie(I.Z, WINFBillNo, 0, I.LastDvig.StockId, 0, QID, I.LastDvig.Parent, "STORNO");
                    SaveToDocLog(NewDvigID, I.LastDvig.ItemID, "Сохранили движение Сторно=" + WINFBillNo, QTY, I.LastDvig.StockId, 0, WINFBillNo);
                    //   SaveDvigenie(I.ZakazPostavshiku, WINFBillNo, I.LastDvig.QTYFact - QTY, I.Item.FItemID, POOrder.FInterID, StockID, 0, QRID, I.LastDvig.Lev, 0, "STORNO", I.LastDvig.Mnimoe);

                }
                else
                {
                    //   int MaxLVL = SelectMaxLev(POOrder.FInterID, ItemId, POOrder.FBillNo);
                    //   MaxLVL++;
                    //     QID = SaveQR(Item.t_Item, POOrder.FBillNo, POOrder.FInterID, MaxLVL);//поступление на склад генерит 0 уровень

                    QID = SaveQR(I.Item, I.ZakazPostavshiku, I.Z.ZakazId, I.Z.MaxLev++);
                    NewDvigID = SaveDvigenie(I.ZakazPostavshiku, WINFBillNo, QTY, I.LastDvig.ItemID, I.Z.ZakazId, I.LastDvig.StockId, 0, QID, I.Z.MaxLev++, I.LastDvig.Id, "STORNO");
                 //   SaveDvigenie(I.Z, WINFBillNo, QTY, I.LastDvig.StockId, 0, QID, I.LastDvig.Id, "STORNO");
                    SaveToDocLog(NewDvigID, I.LastDvig.ItemID, "Сохранили новое движение Сторно=" + WINFBillNo, QTY, I.LastDvig.StockId, 0, WINFBillNo);
                    //Добавляем движение
                    //  SaveDvigenie(POOrder.FBillNo, StockBill.FBillNo, I.LastDvig.QTYFact - QTY, Item.FItemID, POOrder.FInterID, StockID, 0, QRID, MaxLVL, I.LastDvig.Id, "STORNO", I.LastDvig.Mnimoe);
                    PrintQR = true;
                }
            }
            catch
            {
                SaveToDocLog(NewDvigID, I.LastDvig.ItemID, "Ошибка в записи движения сторно=" + WINFBillNo, QTY, I.LastDvig.StockId, 0, WINFBillNo);
            }
           
            EditDvigenie(I.LastDvig, I.LastDvig.QTYFact - QTY);



            int SkladBRaka = 3587;
            if (I.LastDvig.FBillNo.Contains("WIN")|| I.LastDvig.FBillNo.Contains("CIN"))
            {
                SkladBRaka = 3587; //Склад брака поставщика по умолчанию
            }

          

            ICStockBillEntry Entry = new ICStockBillEntry();

                Entry.FBrNo = "O";
                Entry.FInterID = WINFinterId;
                Entry.FItemID = I.Item.FItemID;
                Entry.FQtyMust = -I.Z.SelectedEntry.FQtyMust;
                Entry.FAuxQtyMust = -I.Z.SelectedEntry.FQtyMust;
                Entry.FQty = -QTY;
                Entry.FPrice = I.Z.SelectedEntry.Price;
                Entry.FBatchNo = "";
                decimal Q = Math.Round(Convert.ToDecimal(-QTY),3);
                decimal C = Math.Round(Convert.ToDecimal(I.Z.SelectedEntry.Price),3);
                decimal Amount = -Math.Round(Q * C,3);
                Entry.FAmount = Amount;
                Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                Entry.FNote = FindModelByItem(I.LastDvig.ItemID);
                Entry.FUnitID = I.Z.SelectedEntry.UnitId;
                Entry.FAuxPrice = I.Z.SelectedEntry.Price;
                Entry.FPurchasePrice = I.Z.SelectedEntry.PurchasePrice;
                Entry.FPurchaseAmount = Q * Entry.FPurchasePrice; ;
                Entry.FAuxQty = -QTY;
                Entry.FSourceBillNo = I.Z.FBillNo;
            Entry.FDCStockID = StockFrom;
            Entry.FSCStockID = SkladBRaka;
            //Entry.FDCStockID = SkladBRaka; 
            // Entry.FSCStockID = StockFrom;
            Entry.FSourceInterId = I.Z.ZakazId;
                Entry.FOrderBillNo = I.Z.FBillNo;
                Entry.FOrderInterID = I.Z.ZakazId;
                Entry.FOrderEntryID = I.Z.SelectedEntry.FEntryId;
                Entry.FMapNumber = QR.Id.ToString();//Сюда сохраняем QR Id
                Entry.FPlanAmount = Amount;
            Entry.FPlanPrice = FindPlanPrice(I.Item.FItemID);
            Entry.FAuxPlanPrice = Entry.FPlanPrice;
            Entry.FSourceEntryID = I.Z.SelectedEntry.FEntryId;//Строка заказа поставщику
            Entry.FSourceTranType = 71;//Заказ поставщику
            Entry.FPlanMode = 14036;
            Entry.FEntrySelfA0161 = 13;
          //  Entry.FEntrySelfA0173 = I.Z.SelectedEntry.; // Заказ покупателя из строки заказа поставщику


            //  Entry.FMapNumber = "";
            Entry.FContractBillNo = "";
                Entry.FICMOBillNo = "";
                Entry.FMTONo = "";
                Entry.FItemSize = "";
                Entry.FItemSuite = "";
                Entry.FPositionNo = "";
                Entry.FSEOutBillNo = "";
                Entry.FConfirmMemEntry = "";
                Entry.FItemStatementBillNO = "";
                Entry.FReturnNoticeBillNO = "";
                Entry.FSplitState = "";





                try
                {
                    //Сохраняем строку
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();
                SaveToDocLog(NewDvigID, I.LastDvig.ItemID, "Сохранили строку в документ=" + WINFBillNo, Entry.FQty, I.LastDvig.StockId, 0, WINFBillNo);




            }
                catch (Exception ex)
                {
                SaveToDocLog(NewDvigID, I.LastDvig.ItemID, "Ошибка записи в строку документа=" + WINFBillNo, QTY, I.LastDvig.StockId, 0, WINFBillNo);
                Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                }

            //Модифицируем заказ поставщику
            I.Z.EditEntryZakaza(-QTY, FindUserID(FindCurrentUser()));//Минучуем количество в выбранной строке
            SaveToDocLog(NewDvigID, I.LastDvig.ItemID, "Вернули в заказ поставщику ", QTY, I.LastDvig.StockId, 0, WINFBillNo);
            bool sklad = PeremeshenieNaSklad(WINFinterId, I.LastDvig.StockId, I.Item.FItemID, QTY, false);//Минусуем со склада
            SaveToDocLog(NewDvigID, I.LastDvig.ItemID, "Забрали со склада=" + sklad.ToString(), QTY, I.LastDvig.StockId, 0, WINFBillNo);
            /*      if (POOrder.FStatus == 3)
                    {
                          POOrder.FStatus = 2;
                      }
                      if (POOrder.FClosed == 1)
                      {
                          POOrder.FClosed = 0;
                      }

                      POOrderEntry E = new POOrderEntry();
                      E = POOrder.POOrderEntry.Where(x => x.FItemID == I.LastDvig.ItemID).First();
                      E.FStockQty -= QTY;
                      E.FAuxStockQty -= QTY;
                      E.FCommitQty -= QTY;
                      E.FAuxCommitQty -= QTY;

                      try
                      {
                          db.Entry(POOrder).State = EntityState.Modified;
                          db.SaveChanges();

                          db.Entry(E).State = EntityState.Modified;
                          db.SaveChanges();
                          ViewBag.Message = "Ok";
                      }
                      catch (Exception ex)
                      {
                          ViewBag.Message = "Ошибка = " + ex.Message;
                      }

      */
            string Message = "Ok";



            return Entry; //Json(Message + ";" + QID + ";" + PrintQR.ToString());
        }


        public ICStockBillEntry AddStornoEntryNew(DvigenieNEW D, decimal QTY, string NEWFBillNo, int NewFInterId , int ZakazPostavshikaId, string ZakazNumber)
        {

            
            int QID = 0;
            int NewDvigID = 0;
            bool PrintQR = false;
            ZakazPostavshiku Z = new ZakazPostavshiku();
            Z.FindEntries(ZakazPostavshikaId, ZakazNumber, 0, D.ItemNumber);
            try
            {
                
            }
            catch
            { 
            }


            QTY = Math.Round(QTY, 3);
            SaveToDocLog(D.Id, D.ItemID, "Начали создание строк документа Сторно" + D.CurrentFBillNo, QTY, D.StockId, 0,D.CurrentFBillNo);
            try
            {
                if (QTY == D.QTYFact)//если сторнируем всю партию
                {
                  
                    EditDvigenieNEW(D, 0);
                    SaveToDocLog(D.Id, D.ItemID, "Сторнируем весь код" + D.CurrentFBillNo, QTY, D.StockId, 0, D.CurrentFBillNo);
              
                }
                else
                {
                    EditDvigenieNEW(D, D.QTYFact- QTY);
                    DvigenieNEW QR = CreateNewQRCode(D.StartFBillNo, D.ItemID, 0, QTY, NEWFBillNo, D.PurchasePrice, D.PostavshikId, D.Postavshik,D.StockId,D.Id,D.Id,D.Mnimoe,D.Otmena);//Генерируем новый QR
                    SaveToDocLog(D.Id, D.ItemID, "Сторнируем часть кода" + D.CurrentFBillNo, QTY, D.StockId, 0, D.CurrentFBillNo);
                    //Добавляем движение
                        PrintQR = true;
                }
            }
            catch
            {
                SaveToDocLog(D.Id, D.ItemID, "Ошибка сохранения изменений в движении" + D.CurrentFBillNo, QTY, D.StockId, 0, D.CurrentFBillNo);

            }

           

            ICStockBillEntry Entry = new ICStockBillEntry();

            Entry.FBrNo = "O";
            Entry.FInterID = NewFInterId;
            Entry.FItemID = D.ItemID;
            Entry.FQtyMust = -QTY;
            Entry.FAuxQtyMust = -QTY;
            Entry.FQty = -QTY;
            Entry.FPrice =D.PurchasePrice;
            Entry.FBatchNo = "";
            decimal Q = Math.Round(Convert.ToDecimal(-QTY), 3);
            decimal C = Math.Round(Convert.ToDecimal(D.PurchasePrice), 3);
            decimal Amount = -Math.Round(Q * C, 3);
            Entry.FAmount = Amount;
            Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
            Entry.FNote = FindModelByItem(D.ItemID);
            Entry.FUnitID = Z.SelectedEntry.UnitId;
            Entry.FAuxPrice = D.PurchasePrice;
            Entry.FPurchasePrice = D.PurchasePrice;
            Entry.FPurchaseAmount = Q * D.PurchasePrice; ;
            Entry.FAuxQty = -QTY;
            Entry.FSourceBillNo = Z.FBillNo;
            Entry.FDCStockID = D.StockId;
            Entry.FSCStockID = 0;

            Entry.FSourceInterId = Z.ZakazId;
            Entry.FOrderBillNo = Z.FBillNo;
            Entry.FOrderInterID = Z.ZakazId;
            Entry.FOrderEntryID = Z.SelectedEntry.FEntryId;
            Entry.FMapNumber = D.QRString;//Сюда сохраняем QR Id
            Entry.FPlanAmount = Amount;
            Entry.FPlanPrice = D.PlanPrice;
            Entry.FAuxPlanPrice = D.PlanPrice;
            Entry.FSourceEntryID = Z.SelectedEntry.FEntryId;//Строка заказа поставщику
            Entry.FSourceTranType = 71;//Заказ поставщику
            Entry.FPlanMode = 14036;
            Entry.FEntrySelfA0161 = 13;
            //  Entry.FEntrySelfA0173 = I.Z.SelectedEntry.; // Заказ покупателя из строки заказа поставщику


            //  Entry.FMapNumber = "";
            Entry.FContractBillNo = "";
            Entry.FICMOBillNo = "";
            Entry.FMTONo = "";
            Entry.FItemSize = "";
            Entry.FItemSuite = "";
            Entry.FPositionNo = "";
            Entry.FSEOutBillNo = "";
            Entry.FConfirmMemEntry = "";
            Entry.FItemStatementBillNO = "";
            Entry.FReturnNoticeBillNO = "";
            Entry.FSplitState = "";





            try
            {
                //Сохраняем строку
                db.ICStockBillEntry.Add(Entry);
                db.SaveChanges();
                SaveToDocLog(D.Id, D.ItemID, "Созранена сторно строка" + D.CurrentFBillNo, QTY, D.StockId, 0, D.CurrentFBillNo);




            }
            catch (Exception ex)
            {
                SaveToDocLog(D.Id, D.ItemID, "Ошибка сохранения сторно строки" + D.CurrentFBillNo, QTY, D.StockId, 0, D.CurrentFBillNo);
                Console.WriteLine(" Не смогли добавить строку " + ex.Message);
            }

            //Модифицируем заказ поставщику
          


            return Entry; //Json(Message + ";" + QID + ";" + PrintQR.ToString());
        }


        public int FindDefaultStatusOTK(int ItemId)
        {
            int stat = 1;
            t_ICItem I = new t_ICItem();
            try
            {
               I = db.t_ICItem.Where(x => x.FItemID == ItemId).First();
                if (I.FDefaultLoc==454)
                {
                    stat = 2;
                }
            }
            catch
            {

            }
            return stat;
        }

      

        public ICStockBillEntry AddNewStockBillEntry(ZakazPostavshiku Z, decimal QTY, int WINFinterId, string WINFBillNo, int StockTo =0,int StockFrom=0,string Mesto="", bool WIN = false, int DvigenieId=0, bool ObshiiKotel = false)
        {
            int Result = 0;
            int QRID = 0;

  


            QRID = SaveQR(Z);//поступление на склад генерит 0 уровень

            int StatusOTK = 1;
            StatusOTK = FindDefaultStatusOTK(Z.SelectedEntry.ItemId);

            QTY = Math.Round(QTY, 3) ;//3000
            decimal PlanPrice = 0; 
            try
            {
              PlanPrice =  db.t_ICItem.Where(x => x.FItemID == Z.SelectedEntry.ItemId).Select(x=>x.FPlanPrice.Value).First();
            }
            catch
            { }

            int EID = 1;

            try
            {
              EID = db.ICStockBillEntry.Where(x => x.FInterID == WINFinterId).Count() + 1;
            }
            catch
            {

            }

         
            DvigenieNEW D = new DvigenieNEW();
            ICStockBillEntry Entry = new ICStockBillEntry();
            Entry.FInterID = WINFinterId;
            Entry.FEntryID = EID;
            Entry.FBrNo = "0";
            Entry.FItemID = Z.SelectedEntry.Item.FItemID;
            Entry.FQtyMust = Z.SelectedEntry.FQtyMust;
            Entry.FAuxQtyMust = Z.SelectedEntry.FQtyMust;
            Entry.FQty = QTY;//3000
            Entry.FAuxQty = QTY;
            Entry.FQtyInvoice = 0; //06.03 Нельзя прописывать количество, не проставляется фапьяо
            Entry.FAuxCommitQty = QTY;
            Entry.FCommitQty = QTY;
            Entry.FAllHookQTY = 0; // Предположительно не нужно ставить 06.03
            Entry.FStdAllHookAmount = 0; // Предположительно не нужно ставить 06.03
            Entry.FPrice = Z.SelectedEntry.Price;
            Entry.FBatchNo = "";
            decimal Q = Convert.ToDecimal(QTY);
            decimal C = Convert.ToDecimal(Entry.FPrice);
            decimal Amount = Math.Round(Q * C, 3);
            Entry.FAmount = Amount;
            Entry.FNote = Z.SelectedEntry.FMTONo; // FindModelByItem(Z.SelectedEntry.Item.FItemID);
            Entry.FUnitID = Z.SelectedEntry.UnitId;//Единица измерения
            Entry.FAuxPrice = Entry.FPrice;
            Entry.FPlanPrice = PlanPrice;//Entry.FPrice;
            Entry.FPurchasePrice = Z.SelectedEntry.PurchasePrice; // Закупочная цена с налогом из заказа поставщику
            Entry.FPurchaseAmount = Q * Entry.FPurchasePrice;
            Entry.FCheckAmount = Amount;
            Entry.FPlanAmount = Entry.FPlanPrice * Q;//PlanPrice * Q;
            Entry.FTaxRate = Z.SelectedEntry.TaxRate;
            Entry.FTaxAmount = Amount * Entry.FTaxRate; //Вычисляем сумму налога
            Entry.FEntrySelfA0161 = Z.SelectedEntry.TaxRate;
            Entry.FSourceBillNo = Z.FBillNo;
            Entry.FSourceTranType = Z.FSelTranType;
            Entry.FSourceEntryID = Z.SelectedEntry.FEntryId;//Z.SelectedEntry.DetailId;
            Entry.FDCStockID = StockTo; // Куда
            Entry.FSCStockID = StockFrom; //Откуда
            Entry.FSourceInterId = Z.ZakazId;
            Entry.FAuxPlanPrice = Entry.FPlanPrice;//PlanPrice;
            Entry.FOrderBillNo = Z.FBillNo;
            Entry.FOrderInterID = Z.ZakazId;
            Entry.FOrderEntryID = Z.SelectedEntry.FEntryId;// Z.SelectedEntry.FInterId;
            Entry.FMapNumber = QRID.ToString();//Сюда сохраняем QR Id
            Entry.FPlanMode = 14036;//Неясно что это
            Entry.FProcessPrice = Entry.FPrice;//PlanPrice;
            Entry.FMaterialCostPrice = Z.SelectedEntry.Price - PlanPrice;
            Entry.FMaterialCost = (Z.SelectedEntry.Price - PlanPrice) * Q;
            Entry.FProcessTaxCost = Entry.FPurchasePrice * Q * Entry.FTaxRate;
            Entry.FProcessTaxPrice = Z.SelectedEntry.PurchasePrice;
            Entry.FTaxAmount = Z.SelectedEntry.Price * Q * (Z.SelectedEntry.TaxRate / 100);
            Entry.FProcessCost = Entry.FPrice * Q;
            Entry.FCheckStatus = 1;
            Entry.FContractBillNo = "";
            Entry.FICMOBillNo = "";
            Entry.FMTONo = "";
            Entry.FItemSize = "";
            Entry.FItemSuite = "";
            Entry.FPositionNo = "";
            Entry.FSEOutBillNo = "";
            Entry.FConfirmMemEntry = "";
            Entry.FItemStatementBillNO = "";
            Entry.FReturnNoticeBillNO = "";
            Entry.FSplitState = "";
       
            

            int NewDvigId = 0;
            if (DvigenieId > 0)
            {
                NewDvigId = DvigenieId;
            }
            try
            {
                //Сохраняем строку
                db.ICStockBillEntry.Add(Entry);
                db.SaveChanges();

                SaveToDocLog(0, Z.SelectedEntry.Item.FItemID, "Создана строка в документе WINEntry", QTY, StockTo, 0, WINFBillNo);
                NewDvigId = 0;
                //810
                //Добавляем движение
                if (!WIN)
                {

                    NewDvigId = SaveDvigenie(Z, WINFBillNo, QTY, 0, StockTo, QRID);
                    SaveToDocLog(NewDvigId, Z.SelectedEntry.Item.FItemID, "Создано движение на основании строки WINEntry", QTY, StockTo, 0, WINFBillNo);
                }
                //810
               bool StatEdit = Z.EditEntryZakaza(QTY,FindUserID(FindCurrentUser()));//Плюсуем количество в выбранной строке
                SaveToDocLog(NewDvigId, Z.SelectedEntry.Item.FItemID, "Отредактирована строка заказа поставщику N"+ Z.SelectedEntry.FInterId+ " E"+Z.SelectedEntry.FEntryId+" Status="+StatEdit.ToString(), QTY, StockTo, 0, WINFBillNo);
    
                
                bool NaSkladDobavleno =  PeremeshenieNaSklad(WINFinterId, StockTo, Z.SelectedEntry.ItemId, QTY, true,"",ObshiiKotel);//Плюсуем на склад
                SaveToDocLog(NewDvigId, Z.SelectedEntry.Item.FItemID, "Добавлено на склад " + NaSkladDobavleno.ToString(), QTY, StockTo, 0, WINFBillNo);
                bool MestoPrikrucheno = MestoPrikrutit(Mesto, NewDvigId, Z.SelectedEntry.ItemId);//Прикручиваем место
                SaveToDocLog(NewDvigId, Z.SelectedEntry.Item.FItemID, "Место добавлено " + MestoPrikrucheno.ToString()+ " "+ Mesto, QTY, StockTo, 0, WINFBillNo);

                if (DvigenieId>0)
                {
                  D =  db.DvigenieNEW.Where(x => x.Id == DvigenieId).First();
                    if (NaSkladDobavleno)
                    {
                        D.QTYInStock = QTY;
                     }
                 
                      D.EditZakazPostavshiku = StatEdit;
                    try
                    {
                        db.Entry(D).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                    catch
                    {

                    }
                }

                if (!WIN)
                {
                    if (WINFBillNo.Contains("WIN") || WINFBillNo.Contains("JIN"))
                    {
                        AddStatusOTK(NewDvigId, StatusOTK);
                        SaveToDocLog(NewDvigId, Z.SelectedEntry.Item.FItemID, "Добавлен статус " + StatusOTK.ToString(), QTY, StockTo, 0, WINFBillNo);
                    }
                }


            }
            catch (Exception ex)
            {
                Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                SaveToDocLog(NewDvigId, Z.SelectedEntry.Item.FItemID, "Ошибка сохранения строки! " + ex.Message +ex.InnerException.Message, QTY, StockTo, 0, WINFBillNo);

            }

            /*   POOrder = db.POOrder.Where(x => x.FInterID == InterID).Include(x => x.POOrderEntry).First();//Берем данные из заказа поставщику
               POOrder.FChildren++;
               if (POOrder.POOrderEntry != null && POOrder.POOrderEntry.Count > 0)
               {
                   bool Close = true;
                   foreach (var entry in POOrder.POOrderEntry)
                   {
                       if (entry.FQty != entry.FCommitQty)
                       {
                           Close = false;
                           break;
                       }
                   }
                   if (Close)
                   {
                       POOrder.FClosed = 1;
                       POOrder.FCloseUser = userId;
                       POOrder.FCloseDate = DateTime.Now;
                       POOrder.FCloseCauses = "KingDeeWeb";
                   }
               }
               try
               {
                   db.Entry(POOrder).State = EntityState.Modified;
                   db.SaveChanges();
               }
               catch
               {

               }
            */
            return Entry;
        }



        public JsonResult StornoPostJson(string Manager, int DvigenieId, decimal QTY, string QRData)
        {
            string Message = "";
            int QRID = 0;
            int POOrderId = 0;
            int ItemId = 0;

         

            UsersKDW U = new UsersKDW();
            U = FindCurrentKDWUser();
            ItemView I = new ItemView();
            SaveToDocLog(DvigenieId, U.Id, "Начали сторнирование " + QRData, QTY, 0, 0, "");
            //  I = FindQRScan(QRData);
            /*  if (DvigenieId != 0)
              {
                  try
                  {
                      I.LastDvig = FindDvigenie(DvigenieId);
                      I.Item = I.LastDvig.Item;
                      I.ZakazPostavshiku = I.LastDvig.ZakazPostavshiku;
                      I.QTY = I.LastDvig.QTYFact;
                      I.Lev = I.LastDvig.Lev;
                      I.StockOrDep = I.LastDvig.Stock;
                      if (CultureRU())
                      {
                          try
                          {
                              I.LastDvig.Stock.FName = I.LastDvig.Stock.StocksRusKit.First().FRusName;
                          }
                          catch
                          {

                          }
                      }
                  }
                  catch
                  {

                  }
              }
            */

            I = FindQRScan(QRData);

            // SavePlanogrammaStock(I.Stock.FItemID);
            /*   if (DvigenieId != 0)
               {
                   try
                   {
                       I.LastDvig = FindDvigenie(DvigenieId);
                       I.Item = I.LastDvig.Item;
                       I.POOrder = I.LastDvig.POOrder;
                       I.QTY = I.LastDvig.QTYFact;
                       I.Lev = I.LastDvig.Lev;
                       I.StockOrDep = I.LastDvig.Stock;
                       I.FindDvigenies();
                   }
                   catch
                   {

                   }
               }
            */




            int StockID = 0;
            int ManagerID = 0;
            try
            {
             
                ManagerID = FindManagerID(Manager);//
            }
            catch
            {
                return Json(Resources.Resource.ZapolniteYellow);
            }

       
            
         

          

           // ZakazPostavshiku Z = new ZakazPostavshiku();
           // Z.FindEntries(InterID, Tip, EntryID);

            if (I.Z.SelectedEntry.FInterId == 0)
            {
                SaveToDocLog(DvigenieId, U.Id, "Не найдена строка в заказе поставщику E=" + I.Z.SelectedEntry.FInterId, QTY, 0, 0, "");
                return Json("Не найдена строка в заказе поставщику");
            }
            int TranType = 1;
            if (I.Z.Tip.Equals("WW"))
            {
                TranType = 5;
            }



            //  var Item = db.POOrderEntry.Where(x => x.FInterID == InterID && x.FEntryID == EntryID).Include(x=>x.t_Item).Include(x=>x.t_Item.NomenklaturaEnterprise).First();//Строка в заказе поставщику

            if (QTY > I.LastDvig.QTYFact)
            {
                SaveToDocLog(DvigenieId, U.Id, "Возврат номенклатуры недостаточно в движении="+ I.LastDvig.QTYFact, QTY, 0, 0, "");
                return Json(Resources.Resource.VveliBolsheChemVZakaze);
            }



            if (QTY == 0)
            {
                SaveToDocLog(DvigenieId, U.Id, "Сторнируемое кол-во ноль", QTY, 0, 0, "");
                return Json(Resources.Resource.NomenklaturiNedostatochno);
            }

            decimal Ostatok = 0;

            if (QTY!= I.LastDvig.QTYFact)
            {
                Ostatok = I.LastDvig.QTY - QTY;
               
            }



            ICStockBill StockBill = new ICStockBill();
            ICStockBillEntry StockBillEntry = new ICStockBillEntry();
            try
            {
                StockBill = AddNewStockBill(TranType, I.Z, ManagerID,-1);

                StockBillEntry = AddStornoEntry(I, QTY, StockBill.FInterID, StockBill.FBillNo,  StockID);
            }
            catch (Exception e)
            {
                return Json("Error;" + e.Message);
            }
            if (StockBillEntry.FMapNumber != null)
            {
                return Json("Ok;" + StockBillEntry.FMapNumber+";False");
            }

            return Json("Ошибка;");
        }


        public JsonResult SaveQINJson(string Stock, string Manager, string Nomenklatura,  decimal FCommitQty, string Mesto)
        {
            string Message = "";
            int QRID = 0;

            DateTime Date = DateTime.Now.AddMonths(-6);


            int StockID = 0;
            int ManagerID = 0;
            int ItemId = 0;
            t_Item I = new t_Item();
            try
            {
                StockID = FindStockID(Stock);//  db.t_Stock.Where(x => x.FName.Equals(Stock)).Select(a => a.FItemID).First();
                ManagerID = FindManagerID(Manager);//
            }
            catch
            {
                return Json(Resources.Resource.ZapolniteYellow);
            }

            try
            {
                I = db.t_Item.Where(x => x.FItemClassID == 4 && x.FNumber.Equals(Nomenklatura)).First();
                ItemId = I.FItemID;
            }
            catch
            {
                return Json("Ошибка;Не найден итем");
            }

         

            if (FCommitQty == 0)
            {
                return Json(Resources.Resource.NomenklaturiNedostatochno);
           }
         
            ICStockBillEntry StockBillEntry = new ICStockBillEntry();
       
             var MaxNum =  db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First(); //FindMaxNumStockBill();//Максимальный номер ICStockBill в таблице номеров
             //Плюсуем макс номер
             MaxNum.FMaxNum++;

             var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 10).First();
           
             string WIN = "QIN"+DopolnitNumber(MaxStockID.FCurNo.Value, 6 );


          //   var POOrder = db.POOrder.Where(x => x.FInterID == InterID).Include(x => x.t_Department).First();//Берем данные из заказа поставщику

             int userId = FindUserID(FindCurrentUser());// TODO найти пользака текущего. Сделать модуль регистрации пользователей и сопоставить их с кинди


             int NewDvigId = 0;
             short TranType = 10;
            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));




            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            ICStockBill StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum.FMaxNum.Value;
             StockBill.FDate = DateTime.Now;
             StockBill.FTranType = TranType;
             StockBill.FBillNo = WIN;
             StockBill.FDeptID = 266;
             StockBill.FEmpID = ManagerID;
             StockBill.FSupplyID = 467;
             StockBill.FCheckerID = userId; // TODO найти пользака текущего. Сделать модуль регистрации пользователей и сопоставить их с кинди
             StockBill.FManagerID = ManagerID;
             StockBill.FSManagerID = ManagerID;
             StockBill.FBillerID = userId;
             StockBill.FFManagerID = ManagerID;
             StockBill.FHookInterID = 37861;//Неизвестно что за хук
             StockBill.FPosted = 1;
             StockBill.FCheckSelect = 0;
             StockBill.FROB = 1;
             StockBill.FStatus = 1;
             StockBill.FUpStockWhenSave = false;
             StockBill.FCancellation = false;
             StockBill.FOrgBillInterID = 0;
             StockBill.FBillTypeID = 0;
             StockBill.FPOStyle = 252;
             StockBill.FBackFlushed = false;
             StockBill.FUUID = Guid.NewGuid();
             StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
             StockBill.FMarketingStyle = 12530;
             StockBill.FCheckDate = DateTime.Now;
             StockBill.FExplanation = FindModelByItem(ItemId);
             StockBill.FNote = FindModelByItem(ItemId);
             StockBill.FSelTranType = 71;
             StockBill.FChildren = 1;
             StockBill.FHookStatus = 2;
             StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
             StockBill.FISUpLoad = 1059;
             StockBill.FsourceType = 37521;
             StockBill.FPayCondition = 1000;
             StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
             StockBill.FPOMode = 36680;
             StockBill.FBrNo = "0";
             StockBill.FFetchAdd = "";
             StockBill.FPOSName = "";
             StockBill.FConfirmMem = "";
             StockBill.FInvoiceStatus = "";
             StockBill.FHeadSelfA0143 = "KingDeeWeb";
             ICStockBillEntry Entry = new ICStockBillEntry();
             bool go = false;
             try
             {
                 db.ICStockBill.Add(StockBill);
                 db.SaveChanges();

                 Entry.FInterID = MaxNum.FMaxNum.Value;

                 db.Entry(MaxNum).State = EntityState.Modified;
                 db.SaveChanges();


                 MaxStockID.FCurNo++;
                 MaxStockID.FDesc = "QIN+" + MaxStockID.FCurNo;
                 db.Entry(MaxStockID).State = EntityState.Modified;
                 db.SaveChanges();
                 go = true;
             }
             catch (Exception e)
             {

             }


              var QR = new QRTable();



            POOrder P = new POOrder();
            P.FInterID = 1151;
            P.FBillNo = "POORD000022";
                    //Сохраняем QR код
                    //  string STQ = Item.t_Item.FNumber + ";" + Item.t_Item.FName + ";" + FCommitQty + ";" + StockBill.FCheckDate.Value.ToString("dd.MM.yyyy")+";"+POOrder.FBillNo+";"+FindRussianName(Item.t_Item) +";"+ StockID +";";
            int MaxLVL = SelectMaxLev(P.FInterID, ItemId, P.FBillNo);
                    MaxLVL++;
                    QRID =   SaveQR(I, P.FBillNo, P.FInterID, MaxLVL);//поступление на склад генерит 0 уровень
               //     try
                //    {


                //        QR.QR = CreateQrCode(STQ);
                //        QR.QRstring = STQ;
                //        QR.Date = DateTime.Now;
                //        db.QRTable.Add(QR);
                //        db.SaveChanges();

                //    }
               //     catch (Exception c)
                //    {
                 //       Console.WriteLine("Не смогли сгенерировать QR код " + c.Message);
                //    }




                    go = false;

                    Entry.FBrNo = "0";

                    Entry.FItemID = I.FItemID;
                    Entry.FQtyMust = FCommitQty;
                    Entry.FAuxQtyMust = FCommitQty;
                    Entry.FQty = FCommitQty;
                    Entry.FPrice = 0;
                    Entry.FBatchNo = "";
                    decimal Q = Convert.ToDecimal(FCommitQty);
                    decimal C = Convert.ToDecimal(0);
                    Entry.FAmount = Q * C;
                    Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                    Entry.FNote = FindModelByItem(I.FItemID) ;
                    Entry.FUnitID = 259;//Непонятно что это
                    Entry.FAuxPrice = 0;
                    Entry.FPurchasePrice =0;
                    Entry.FPurchaseAmount = Q * Entry.FPurchasePrice;
                    Entry.FAuxQty = FCommitQty;
                    Entry.FSourceBillNo = P.FBillNo;
                    Entry.FDCStockID = StockID;
                    Entry.FSourceInterId = P.FInterID;
                    Entry.FOrderBillNo = P.FBillNo;
                    Entry.FOrderInterID = P.FInterID;
                    Entry.FOrderEntryID = 1;
                    Entry.FMapNumber = QRID.ToString();//Сюда сохраняем QR Id
                    Entry.FContractBillNo = "";
                    Entry.FICMOBillNo = "";
                    Entry.FMTONo = "";
                    Entry.FItemSize = "";
                    Entry.FItemSuite = "";
                    Entry.FPositionNo = "";
                    Entry.FSEOutBillNo = "";
                    Entry.FConfirmMemEntry = "";
                    Entry.FItemStatementBillNO = "";
                    Entry.FReturnNoticeBillNO = "";
                    Entry.FSplitState = "";
            




                    try
                    {
                        //Сохраняем строку
                        db.ICStockBillEntry.Add(Entry);
                        db.SaveChanges();

                        //Добавляем движение
                        NewDvigId =  SaveDvigenie(P.FBillNo, StockBill.FBillNo, FCommitQty, ItemId, P.FInterID,0, StockID, QRID , MaxLVL );
                        AddStatusOTK(NewDvigId, 2);
                         MestoPrikrutit(Mesto, NewDvigId, ItemId);//Прикручиваем место

                go = true;
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                    }




            if (go)
            {
                go = PeremeshenieNaSklad(MaxNum.FMaxNum.Value, StockID, ItemId, FCommitQty, true);//Плюсуем на склад

              
                MestoPrikrutit(Mesto, NewDvigId, ItemId);//Прикручиваем место
                if (go)
                {
                    return Json("Ok;" + QRID);
                }
            }
            return Json("Ошибка;");
        }

        public void PologitNaPolku(string Mesto, int DvigenieId,int ItemId)
        {
            MestoPrikrutit(Mesto, DvigenieId,ItemId);//Прикручиваем место
        }

        public void SaveToWORKLog(string DocumentNo, decimal QTY, int ItemId, string ItemNumber, string WorkName, decimal FQty, decimal FQtyMust, decimal FQtyPick, decimal FStockQty, decimal FWipQty, decimal FQtySupply)
        {
            try
            {
                InfoWorks W = new InfoWorks();
                var User = CurrentKDWUserModel();
                W.FBillNo = DocumentNo;
                W.StartDate = DateTime.Now;
                W.QTY = QTY;
                W.WebUserId = User.Id; 
                W.IPAdress = Request.UserHostAddress;
                W.ItemId = ItemId;
                W.ItemNumber = ItemNumber;
                W.WebUserName = User.Name;
                W.WorkName = WorkName;
                W.FQty = FQty;
                W.FQtyMust = FQtyMust;
                W.FQtyPick = FQtyPick;
                W.FStockQty = FStockQty;
                W.FWipQty = FWipQty;
                W.FQtySupply = FQtySupply;
 
                db.InfoWorks.Add(W);
                db.SaveChanges();

            }
            catch (Exception e)
            {
                
            }
        }

        public void  SaveToDocLog(int DvigenieId,int ItemId, string Opisanie, decimal QTY, int ToStock, int ToWork, string DocumentNumber)
        {
            try
            {
                DocumentLog L = new DocumentLog();
                L.DateStart = DateTime.Now;
                L.DvigenieId = DvigenieId;
                L.UserId = CurrentKDWUserModel().Id;
                L.ItemId = ItemId;
                L.Opisanie = Opisanie;
                L.QTY = QTY;
                L.ToStock = ToStock;
                L.ToWork = ToWork;
                if (DocumentNumber == null)
                {
                    DocumentNumber = "";
                }
                L.FBillNo = DocumentNumber;
                db.DocumentLog.Add(L);
                db.SaveChanges();

            }
            catch (Exception e)
            {
                try
                {
                    DocumentLog L = new DocumentLog();
                    L.DateStart = DateTime.Now;

                    L.DvigenieId = 0;
                    L.UserId = 0;
                    L.ItemId = 0;
                    L.Opisanie = "Ошибка сохранения лога" + e.Message;
                    L.QTY = 0;
                    L.ToStock = 0;
                    L.ToWork = 0;
                    L.FBillNo = "";
                    db.DocumentLog.Add(L);
                    db.SaveChanges();
                }
                catch
                {

                }
            }
        }


        //Получение текущего номера поступления на склад
        public string CurrentWIN()
        {
            string WIN = "";
         /*   HttpCookie WINCookie = HttpContext.Request.Cookies["CurrentWIN"];
            if (WINCookie != null)
            {
                WIN = WINCookie.Value;
                // cultureCookie.SameSite = SameSiteMode.Lax;
            }
            return WIN;
          */

            if (Session["CurrentWIN"] == null)
            {
                return "";
            }
            else
            {
                WIN = (string)Session["CurrentWIN"];
                return WIN;
            }
        

        }
        public int CurrentMOL()
        {
            if (Session["CurrentMOL"] == null)
            {
                return 0;
            }
            else
            {
                int WIN = (int)Session["CurrentMOL"];
                return WIN;
            }

        }

        public string CurrentMOLName()
        {
            if (Session["CurrentMOLName"] == null)
            {
                return "";
            }
            else
            {
                string WIN = (string)Session["CurrentMOLName"];
                return WIN;
            }

        }
        public int CurrentPostavshik()
        {
            if (Session["CurrentPostavshik"] == null)
            {
                return 0;
            }
            else
            {
                int WIN = (int)Session["CurrentPostavshik"];
                return WIN;
            }

        }

        public string CurrentPostavshikName()
        {
            if (Session["CurrentPostavshikName"] == null)
            {
                return "";
            }
            else
            {
                string WIN = (string)Session["CurrentPostavshikName"];
                return WIN;
            }

        }
        public int CurrentStock()
        {
            if (Session["CurrentStock"] == null)
            {
                return 0;
            }
            else
            {
                int WIN = (int)Session["CurrentStock"];
                return WIN;
            }

        }
        public string CurrentStockName()
        {
            if (Session["CurrentStockName"] == null)
            {
                return "";
            }
            else
            {
                string WIN = (string)Session["CurrentStockName"];
                return WIN;
            }

        }

        public JsonResult CreateNewQRCodeJson(string WIN, int ItemId)
        {
            QRTableNEW QRId = new QRTableNEW();
         //   QRId = CreateNewQRCode(WIN, ItemId);
                return Json(QRId.Id);
        }

        public int FindMaxLevelNEWQR(string StartFBIllNo, int ItemId,int level = 0)
        {
            int MaxLevelQR = 1;
            try
            {
                if (level == 0)//Генерируем новый если уровень не пришел, иначе оставляем старый
                {
                    MaxLevelQR = db.DvigenieNEW.Where(x => x.StartFBillNo.Equals(StartFBIllNo) && x.ItemID == ItemId).Max(x => x.Lev) + 1;
                }
                else
                {
                    MaxLevelQR = level;
                }
            }
            catch
            {

            }
            return MaxLevelQR;
        }

        public DvigenieNEW CreateNewQRCode(string StartFBIllNo="", int ItemId=0, int StockId=0, decimal QTY=0, string CurrentFBillNo="", decimal PurchasePrice=0, int PostavshikId=0,string PostavshikName="", int StockFromId =0,  int FromDvigenieId = 0, int Parent = 0,bool Mnimoe = false, bool Otmena = false, int WorkId =0, int level=0, string ZakazPokupatelya="")
        {
            int QRId = 0;
          
            DvigenieNEW D = new DvigenieNEW();
            DvigenieNEW Start = new DvigenieNEW();
            string QRString = "";
            int MaxLevelQR = 1;
            if (QTY<=0)
            {
                return D;
            }
            /*
            try
            {
                MaxLevelQR = db.QRTableNEW.Where(x => x.WIN.Equals(StartFBIllNo) && x.ItemId == ItemId).Count()+1;//Ищем максимальный уровень кода
                QRString = StartFBIllNo + ";" + ItemId + ";" + MaxLevelQR;
                Qr.ItemId = ItemId;
                Qr.WIN = StartFBIllNo;
                Qr.Lev = MaxLevelQR;
                Qr.QRString = QRString;
                db.QRTableNEW.Add(Qr);
                db.SaveChanges();
            }
            catch
            {
                return D;
            }
            */
            //Ищем максимальный уровень

            MaxLevelQR =FindMaxLevelNEWQR(StartFBIllNo, ItemId, level);
         

            try
            {
               
                D.ItemID = ItemId;
                D.ItemNumber = db.t_ICItem.Where(x => x.FItemID == ItemId).Select(x=>x.FNumber).First();
                D.FromDvigenie = FromDvigenieId;
                D.Lev = MaxLevelQR;
                D.Mnimoe = Mnimoe;
                D.Otmena = Otmena;
                D.DvigenieParent = Parent;
                D.QRString = StartFBIllNo + ";" + ItemId + ";" + MaxLevelQR+ ";"+ D.ItemNumber;
                D.QTY = Math.Round(QTY,3);
                D.QTYFact = Math.Round(QTY,3);
                D.QTYInStock = 0;
                D.QTYInWork = 0;
                D.StartFBillNo = StartFBIllNo;
                D.ZakazPokupatelya = ZakazPokupatelya;
                D.StartFInterId = 1;
                D.IPAdress = Request.UserHostAddress;
     

                try
                {
                    if (StartFBIllNo.Equals("WIN000001")==false)
                    {
                        D.StartFInterId = db.ICStockBill.Where(x => x.FBillNo.Equals(StartFBIllNo)).Select(x => x.FInterID).First();

                    }
                }
                catch
                {

                }
                     D.StockName = db.t_Item.Where(x => x.FItemID == StockId).Select(x => x.FName).First();
                D.StockId = StockId;
                D.StockFromId = StockFromId;
                D.StockFromName = "";
                D.EditZakazPostavshiku = false;
                D.CurrentFBillNo = CurrentFBillNo;
                D.CurrentFInterId = 1;
                try
                {
                    if (CurrentFBillNo.Equals("WIN000001") == false)
                    {
                        
                        D.CurrentFInterId = db.ICStockBill.Where(x => x.FBillNo.Equals(CurrentFBillNo)).Select(x => x.FInterID).First();

                        if (D.ZakazPokupatelya.Equals("") &&D.CurrentFInterId >0)
                        {
                            try
                            {
                                D.ZakazPokupatelya = db.ICStockBillEntry.Where(x => x.FInterID == D.CurrentFInterId && x.FItemID == D.ItemID).Select(x=>x.FNote).First();
                            }
                            catch
                            {

                            }
                        }

                    }
                }
                catch
                {

                }
                 D.Date = DateTime.Now;
                UsersKDW U = CurrentKDWUserModel();
                D.UserId = U.Id;
                D.KingDeeUserName = "t_Item (МОЛ)=" +U.t_Item.FName + "; t_BaseUser (ПОЛЬЗОВАТЕЛЬ)=" + U.t_Base_User.FName; //Записываем молов пользователя
                D.WebUserName = U.Name;               
                D.PlanPrice = Math.Round(FindPlanPrice(ItemId),3);
                D.PurchasePrice = Math.Round(PurchasePrice,3);
                D.WorkId = WorkId;
                D.PostavshikId = PostavshikId;
                D.Postavshik = PostavshikName;
           

             

                if (FromDvigenieId > 0&&(D.StartFBillNo.Equals("")||D.Postavshik==null||D.Postavshik.Equals("")))
                {
                    Start = db.DvigenieNEW.Where(x => x.CurrentFBillNo.Equals(D.StartFBillNo)).First();
                   
                }

                if (FromDvigenieId>0)
                {
                    try
                    {
                        DvigenieNEW From = db.DvigenieNEW.Where(x => x.Id == D.FromDvigenie).First();
                        if (From.ZakazPokupatelya != null && From.ZakazPokupatelya != "")
                        {
                            D.ZakazPokupatelya = From.ZakazPokupatelya;
                        }
                    }
                    catch
                    {

                    }
                }

                if (PostavshikId == 0)
                {
                    try
                    {
                        D.PostavshikId = Start.PostavshikId;
                        D.Postavshik = Start.Postavshik;
                    }
                    catch
                    {

                    }
                }
                if (PostavshikName!= null&& PostavshikName.Equals("")&& PostavshikId>0)
                {
                    try
                    {
                        D.Postavshik = db.t_Supplier.Where(x => x.FItemID == PostavshikId).Select(x => x.FName).First();
                            
                    }
                    catch
                    {

                    }
                }
                if (PostavshikName==null)
                {
                    D.Postavshik = "Не определен";
                    D.PostavshikId = 0;
                }
                if (FromDvigenieId>0&&PurchasePrice==0)
                {//Ищем закупочную цену
                    try
                    {
                        D.PurchasePrice = Math.Round(Start.PurchasePrice,3);

                    }
                    catch
                    {

                    }
                }


                if (StockFromId>0)
                {
                    try
                    {
                        D.StockFromName = db.t_Item.Where(x => x.FItemID == StockFromId).Select(x => x.FName).First();
                    }
                    catch
                    {

                    }
                }
                db.DvigenieNEW.Add(D);
                db.SaveChanges();

            }
            catch (Exception e)
            {

            }
            return D;

        }




        public JsonResult NewWINEntriesJson(int ItemId, int StockId)
        {

            string WIN = CurrentWIN();
            if (CurrentWIN().Equals(""))
            {
                return Json("False | 错误。截图并发送至支持聊天。 | Не найдена сессия текущего документа WIN");
            }
            ICStockBill StockBill = new ICStockBill();
            try
            {
                StockBill = db.ICStockBill.Where(x => x.FBillNo.Equals(WIN)).First();
            }
            catch (Exception e)
            {
                return Json("False | 错误。截图并发送至支持聊天。 | Не найден документ WIN");
            }
            string Return = "False";
            int TranType = 1;


            


            List<PostuplenieNaSklad> Post = CurrentPostuplenie();
            List<PostuplenieNaSklad> TekPost = new List<PostuplenieNaSklad>();
            decimal QTY = 0;
            decimal PurchasePrice = 0;
            int PostavshikId = 0;
           string PostavshikName = "";
            List<decimal> Price = new List<decimal>();
            if (Post.Where(x => x.ItemId == ItemId && x.Proveden == false).Count() <= 0)
            {
                return Json("False | 未找到当前库存收据。刷新页面。| Не найдено текущее поступление на склад. Возможно все строки уже проведены.");
            }

            
            try
            {
                TekPost = Post.Where(x => x.ItemId == ItemId&&x.Proveden==false).ToList();
                QTY = TekPost.Sum(x => x.Qty);
                PurchasePrice = Math.Round((TekPost.Sum(x => x.FactPrice) / TekPost.Count()),3);
                PostavshikName=TekPost[0].PostavshikName;
                PostavshikId = TekPost[0].PostavshikId;


            }
            catch (Exception e)
            {
                return Json("False | 未找到当前库存收据。刷新页面。| Не найдено текущее поступление на склад. Возможно все строки уже проведены." +e.Message);
            }

            if (FindCurrentKDWUser(true).Id ==0)
            {
                return Json("False | 当前用户未定义。请重新输入登录名和密码。| Пользователь не определен. Необходимо снова ввести логин и пароль на странице входа.");
            }

            DvigenieNEW QR =CreateNewQRCode(WIN, ItemId,StockId,QTY,WIN, PurchasePrice, PostavshikId, PostavshikName);//Генерируем новый QR
           
            
            foreach (PostuplenieNaSklad P in Post.Where(x => x.ItemId == ItemId && x.Proveden == false).ToList())
            {
                ZakazPostavshiku Z = new ZakazPostavshiku();
                Z.FindEntries(P.ZakazId, P.ZakazNumber, P.ZakazEntryId);
           if (Z.Tip.Equals("WW"))
            {
                TranType = 5;
            }
                ICStockBillEntry StockBillEntry = new ICStockBillEntry();
                try
                {
                    StockBillEntry = AddNewStockBillEntry(Z, P.Qty, StockBill.FInterID, StockBill.FBillNo, StockId, 0,"",true, QR.Id,true);
                    P.Proveden = true;
                    P.StockId = StockId;
                    P.UserId = FindCurrentKDWUser().Id;
                    P.PostuplenieNumber = StockBill.FBillNo;
                    P.PostuplenieId = StockBill.FInterID;
                    P.DateCreate = DateTime.Now;
                    P.DvigenieNEW = QR;
                    P.QRId = QR.Id;
                    P.QTYInStock = QTY;
                    Return = "True";
                  //  PurchasePrice += Math.Round(QTY * P.FactPrice,3);

                  //  db.PostuplenieNaSklad.Add(P);
                  //  db.SaveChanges();
                }
                catch (Exception e)
                {
                    return Json("False | 错误。无法保存文档。向技术支持发送截图。| Не смогли сохранить строку в документе."+e.Message);
                }

            }

            try
            {

            }
            catch
            {

            }

            SaveCurrentPostuplenie(Post);//Сохраняем в кэше

            return Json(Return);
        }


        public JsonResult EndWINJson()
        {

            string Return = "True";

            Session["CurrentWIN"] = null;
            Session["Postuplenie"] = null;
            Session["CurrentMOL"] = null;
            Session["CurrentStock"] = null;
            Session["CurrentPostavshik"] = null;
            Session["CurrentMOLName"] = null;
            Session["CurrentName"] = null;

            return Json(Return);
        }
        public JsonResult NewWINJson(string  Postavshik, string Manager, int StockId )
        {
            int PostavshikId = 0;

            try
            {
                PostavshikId =  db.t_Supplier.Where(x => x.FName.Equals(Postavshik)).Select(x=>x.FItemID).First();
            }
            catch
            {

            }
            if (PostavshikId==0)
            {
                return Json(Resources.Resource.Postavshik);
            }

            string WIN = "";
            string Result = "False";
            int TranType = 1;
            Session["CurrentWIN"] = null;
            Session["CurrentMOL"] = null;
            List<PostuplenieNaSklad> Post = CurrentPostuplenie();
            ZakazPostavshiku Z = new ZakazPostavshiku();
            Z.PurposeId = 0;
            Z.DepartmentId = 269; //В 90 % случаев поступление идет на это подразделение
            Z.EmployeeId = 434; //Поставлено на угад, в поступлении может быть много разных заказов
            Z.SupplierId = PostavshikId;
            int ManagerId = FindManagerID(Manager);
            if (Post.Count>0)
            {
                if (Post[0].ZakazNumber.Contains("WW"))
                {
                    TranType = 5;
                    Z.PurposeId = 14190;
                }
            }
            string StockName = "";
            try
            {
                StockName = db.t_Item.Where(x => x.FItemID == StockId).First().FName;
            }
            catch
            {

            }

            string PostavshikName = "";
            try
            {
                PostavshikName = db.t_Item.Where(x => x.FItemID == PostavshikId).First().FName;
            }
            catch
            {

            }

            ICStockBill StockBill = new ICStockBill();
           


            try
            {
                StockBill = AddNewStockBill(TranType, Z, ManagerId);
                Result = StockBill.FBillNo;
                Session["CurrentWIN"] = Result;
                Session["CurrentMOL"] = ManagerId;
                Session["CurrentMOLName"] = Manager;
                Session["CurrentStock"] = StockId;
                Session["CurrentStockName"] = StockName;
                Session["CurrentPostavshik"] = PostavshikId;
                Session["CurrentPostavshikName"] = PostavshikName;
            }
            catch
            {

            }

            return Json(Result);
        }

        //Поступление на склад
        public JsonResult SavePostJson(string Stock, string Manager, int InterID, int EntryID, string FCommitQty, string Tip, string Mesto)
        {
            string Message = "";
            int QRID = 0;
            decimal QTY = 0;
            try
            {
             QTY =  Convert.ToDecimal(FCommitQty.Replace(',', '.')); //810 или 3000
                SaveToDocLog(0, 0, "Начато поступление на склад количество пришло FCommitQTY="+FCommitQty+" определено как QTY="+ QTY, QTY, 0, 0, "Пока нет дока");
            }
            catch (Exception e)
            {
                return Json(e.Message);
            }
            DateTime Date = DateTime.Now.AddMonths(-6);


            int StockID = 0;
            int ManagerID = 0;
            try
            {
                StockID = FindStockID(Stock);//  db.t_Stock.Where(x => x.FName.Equals(Stock)).Select(a => a.FItemID).First();
              ManagerID= FindManagerID(Manager);//
            }
            catch
            {
                SaveToDocLog(0, 0, "Ошибка не найден склад или МОЛ", QTY, StockID, 0, "Пока нет дока");
                return Json(Resources.Resource.ZapolniteYellow);
            }
            SaveToDocLog(0, 0, "Начато поступление на склад", QTY, StockID,0,"Пока нет дока");
            /*  var Item = db.POOrderEntry.Where(x => x.FInterID == InterID && x.FEntryID == EntryID).First();
              Item.FCommitQty = FCommitQty;

              try
              {
                  db.Entry(Item).State = EntityState.Modified;
                  db.SaveChanges();
                  ViewBag.Message = "Данные успешно сохранены!";
                  Message = "Данные успешно сохранены!";
              }
              catch (Exception E)
              {
                  ViewBag.Message = "Ошибка = " + E.Message;
                  Message = "Ошибка = " + E.Message;
              }

              //Изменяем заказ поставщику для теста
              */

            // db.POOrderEntry.Add(pOOrderEntry);
            //   db.SaveChanges();
            //    return RedirectToAction("Index");
            if (Tip.Equals(""))
            {
                SaveToDocLog(0, 0, "Ошибка не указан тип заказа поставщику WW или POORD", QTY, StockID, 0, "Пока нет дока");
                return Json("Не указан тип заказа поставщику WW или POORD");
            }

            ZakazPostavshiku Z = new ZakazPostavshiku();
            Z.FindEntries(InterID, Tip, EntryID);

            if (Z.SelectedEntry.FInterId == 0)
            {
                SaveToDocLog(0, 0, "Ошибка не найдена строка в заказе поставщику", QTY, StockID, 0, "Пока нет дока");
                return Json("Не найдена строка в заказе поставщику");
            }
            int TranType = 1;
            if (Z.Tip.Equals("WW"))
            {
                TranType = 5;
            }

          

          //  var Item = db.POOrderEntry.Where(x => x.FInterID == InterID && x.FEntryID == EntryID).Include(x=>x.t_Item).Include(x=>x.t_Item.NomenklaturaEnterprise).First();//Строка в заказе поставщику
          // Если QTY Количество > Золичества в строке в заказе поставщика - Поступившее количество по заказу поставщику то ошибка
            if (QTY> Z.SelectedEntry.FQtyMust-Z.SelectedEntry.FCommitQty)
            {
                SaveToDocLog(0, 0, "Ошибка введено больше чем в заказе поставщику", QTY, StockID, 0, "Пока нет дока");
                return Json(Resources.Resource.VveliBolsheChemVZakaze);
            }
            //Если введено 0 то ошибка
            if (QTY == 0)
            {
                SaveToDocLog(0, 0, "Ошибка QTY=0", QTY, StockID, 0, "Пока нет дока");
                return Json(Resources.Resource.NomenklaturiNedostatochno);
            }
            ICStockBill StockBill = new ICStockBill();
            ICStockBillEntry StockBillEntry = new ICStockBillEntry();
            try
            {
                 StockBill = AddNewStockBill(TranType, Z, ManagerID);
                 StockBillEntry = AddNewStockBillEntry(Z, QTY, StockBill.FInterID, StockBill.FBillNo, StockID, 0, Mesto);
            }
            catch (Exception e)
            {

                return Json("Error;" + e.Message);
            }
            if (StockBillEntry.FMapNumber!=null)
            {
                return Json("Ok;" + StockBillEntry.FMapNumber);
            }

           /* var MaxNum = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            //Плюсуем макс номер
            MaxNum.FMaxNum++;

            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 1).First();

            string WIN = "WIN0" + MaxStockID.FCurNo;


            var POOrder = db.POOrder.Where(x => x.FInterID == InterID).Include(x => x.t_Department).First();//Берем данные из заказа поставщику

            int userId = FindUserID(FindCurrentUser());// TODO найти пользака текущего. Сделать модуль регистрации пользователей и сопоставить их с кинди


            int NewDvigId = 0;
            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));


           

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum.FMaxNum.Value;
            StockBill.FDate = DateTime.Now;
            StockBill.FTranType = 1;
            StockBill.FBillNo = WIN;
            StockBill.FDeptID = POOrder.FDeptID;
            StockBill.FEmpID = POOrder.FEmpID;
            StockBill.FSupplyID = POOrder.FSupplyID;
            StockBill.FCheckerID = userId; // TODO найти пользака текущего. Сделать модуль регистрации пользователей и сопоставить их с кинди
            StockBill.FManagerID = ManagerID;
            StockBill.FSManagerID = ManagerID;
            StockBill.FBillerID = userId;
            StockBill.FFManagerID = ManagerID;
            StockBill.FHookInterID = 37861;//Неизвестно что за хук
            StockBill.FPosted = 1;
            StockBill.FCheckSelect = 0;
            StockBill.FROB = 1;
            StockBill.FStatus = 1;
            StockBill.FUpStockWhenSave = false;
            StockBill.FCancellation = false;
            StockBill.FOrgBillInterID = 0;
            StockBill.FBillTypeID = 0;
            StockBill.FPOStyle = 252;
            StockBill.FBackFlushed = false;
            StockBill.FUUID = Guid.NewGuid();
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
            StockBill.FMarketingStyle = 12530;
            StockBill.FCheckDate = DateTime.Now;
            StockBill.FExplanation = "KingDeeWeb";
            StockBill.FSelTranType = 71;
            StockBill.FChildren = 1;
            StockBill.FHookStatus = 2;
            StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;
            StockBill.FsourceType = 37521;
            StockBill.FPayCondition = 1000;
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
            StockBill.FPOMode = 36680;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";
            StockBill.FHeadSelfA0143 = "KingDeeWeb";
            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum.FMaxNum.Value;
                
                db.Entry(MaxNum).State = EntityState.Modified;
                db.SaveChanges();


                MaxStockID.FCurNo++;
                MaxStockID.FDesc = "WIN+" + MaxStockID.FCurNo;
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();
                go = true;
            }
            catch (Exception e)
            {

            }

            */

        /*    var QR = new QRTable();
           



                //Сохраняем QR код
                //  string STQ = Item.t_Item.FNumber + ";" + Item.t_Item.FName + ";" + FCommitQty + ";" + StockBill.FCheckDate.Value.ToString("dd.MM.yyyy")+";"+POOrder.FBillNo+";"+FindRussianName(Item.t_Item) +";"+ StockID +";";
                int MaxLVL = SelectMaxLev(POOrder.FInterID, Item.t_Item.FItemID);
                MaxLVL++;
                QRID =   SaveQR(Item.t_Item, FCommitQty, POOrder.FInterID,MaxLVL);//поступление на склад генерит 0 уровень
           //     try
            //    {
                   
                  
            //        QR.QR = CreateQrCode(STQ);
            //        QR.QRstring = STQ;
            //        QR.Date = DateTime.Now;
            //        db.QRTable.Add(QR);
            //        db.SaveChanges();

            //    }
           //     catch (Exception c)
            //    {
             //       Console.WriteLine("Не смогли сгенерировать QR код " + c.Message);
            //    }


                

                go = false;

                Entry.FBrNo = "0";
              
                Entry.FItemID = Item.FItemID;
                Entry.FQtyMust = Item.FQty;
                Entry.FAuxQtyMust = Item.FQty;
                Entry.FQty = FCommitQty;
                Entry.FPrice = Item.FPrice;
                Entry.FBatchNo = "";
                decimal Q = Convert.ToDecimal(FCommitQty);
                decimal C = Convert.ToDecimal(Item.FPrice);
                Entry.FAmount = Q * C;
                Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                Entry.FNote = "KingDeeWeb";
                Entry.FUnitID = 259;//Непонятно что это
                Entry.FAuxPrice = Item.FPrice;
                Entry.FPurchasePrice = Item.FPrice;
                Entry.FPurchaseAmount = Q * C;
                Entry.FAuxQty = FCommitQty;
                Entry.FSourceBillNo = POOrder.FBillNo;
                Entry.FDCStockID = StockID;
                Entry.FSourceInterId = POOrder.FInterID;
                Entry.FOrderBillNo = POOrder.FBillNo;
                Entry.FOrderInterID = POOrder.FInterID;
                Entry.FOrderEntryID = Item.FEntryID;
                Entry.FMapNumber = QR.Id.ToString();//Сюда сохраняем QR Id
               

                Entry.FMapNumber = "";
                Entry.FContractBillNo = "";
                Entry.FICMOBillNo = "";
                Entry.FMTONo = "";
                Entry.FItemSize = "";
                Entry.FItemSuite = "";
                Entry.FPositionNo = "";
                Entry.FSEOutBillNo = "";
                Entry.FConfirmMemEntry = "";
                Entry.FItemStatementBillNO = "";
                Entry.FReturnNoticeBillNO = "";
                Entry.FSplitState = "";




                try
                {
                    //Сохраняем строку
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();

                    //Добавляем движение
                    NewDvigId =  SaveDvigenie(StockBill.FBillNo, FCommitQty, Item.FItemID, POOrder.FInterID,0, StockID, QRID , MaxLVL );


                    go = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                }

                POOrder = db.POOrder.Where(x => x.FInterID == InterID).Include(x =>x.POOrderEntry).First();//Берем данные из заказа поставщику
                POOrder.FChildren++;
                if (POOrder.POOrderEntry!=null && POOrder.POOrderEntry.Count>0)
                {
                    bool Close = true;
                    foreach (var entry in POOrder.POOrderEntry)
                    {
                        if (entry.FQty!=entry.FCommitQty)
                        {
                            Close = false;
                            break;
                        }
                    }
                    if (Close)
                    {
                        POOrder.FClosed = 1;
                        POOrder.FCloseUser = userId;
                        POOrder.FCloseDate = DateTime.Now;
                        POOrder.FCloseCauses = "KingDeeWeb";
                    }
                }
                try
                {
                    db.Entry(POOrder).State = EntityState.Modified;
                    db.SaveChanges();
                }
                catch
                {

                }
            

            if (go)
            {
                go = PeremeshenieNaSklad(StockID, Item.FItemID, FCommitQty, true);//Плюсуем на склад


                MestoPrikrutit(Mesto, NewDvigId, Item.FItemID);//Прикручиваем место
                /* go = false;
                 //Добавляем в остаток на складе
                 ICInventory Sklad = new ICInventory();
                 int EstLiStrokaNaSklade = 0;
                 try
                 {
                     EstLiStrokaNaSklade = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == Item.FItemID).Count();
                 }
                 catch 
                 {

                 }
                 if (EstLiStrokaNaSklade > 0)
                 {

                     try
                     {
                         Sklad = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == Item.FItemID).First();
                         Sklad.FQty += FCommitQty;
                     }
                     catch (Exception SE)
                     {
                         Console.WriteLine("Не смогли найти строку на складе " + SE.Message);
                     }

                     try
                     {

                         db.Entry(Sklad).State = EntityState.Modified;
                         db.SaveChanges();
                         go = true;
                     }

                     catch (Exception exx)
                     {
                         Console.WriteLine("Ошибка добавления на склад " + exx.Message);
                     }
                 }
                 else
                 {
                     //Если нет такой строки то добавляем новую
                     Sklad.FQty = FCommitQty;
                     Sklad.FStockID = StockID;
                     Sklad.FItemID = Item.FItemID;
                     Sklad.FBrNo = "0";
                     Sklad.FBatchNo = "";
                     Sklad.FKFDate = "";
                     Sklad.FMTONo = "";
                     try
                     {
                         db.ICInventory.Add(Sklad);
                         db.SaveChanges();
                         go = true;
                     }
                     catch (Exception exxx)
                     {
                         Console.WriteLine("Не смогли добавить новую строку поступления на склад ICInventory " + exxx.Message);
                     }
                 }
                */

/*
            }

            if (go)
            {
                Message = "Ok";
            }
            //     "(FBrNo, FInterID, FEntryID, FItemID, FQtyMust,FAuxQtyMust, FQty, FPrice, FBatchNo, " +
            //                        "FAmount, FNote, FUnitID, FAuxPrice, FAuxQty, FProcessCost, FMaterialCost, FTaxAmount," +
            //                         " FSourceBillNo, FDCStockID, FSourceInterId, FOrderBillNo, FOrderInterID, FOrderEntryID)" +
            //                         "VALUES('O', " + InterId + "," + NPP + ", " + NL[0].FItemId + ", " + KolichestvoVZakaze + ", " + KolichestvoVZakaze + ", " + QTY + ", " + CENA + ", '', " +
            //                         "" + Amount + ", 'Enterprise', 259, " + CENA + ", " + QTY + ", 0, 0, 0," +
            //                         " '" + PURCH + "', " + SkladKitai + ", " + PURCHINTERID + ", '" + PURCH + "', " + PURCHINTERID + "," + StrokaPURCH + ")", true);

        


            //Меняем остатки в заказе поставщику
                try
                {
                Item.FCommitQty += FCommitQty;
                db.Entry(Item).State = EntityState.Modified;
                    db.SaveChanges();
                    ViewBag.Message = "Ok";
                }
                catch (Exception E)
                {
                    ViewBag.Message = "Ошибка = " + E.Message;
                }

            */
            return Json("Ошибка;");
        }

   //     public decimal QTYNaSklade(int StockID, int ItemID)
   //     {
   //         decimal result = 0;
  //          try
  //         {
   //             result = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == ItemID).Select(x=>x.FQty).First();
  //          }
  //          catch
   //         {

   //         }
         

   //         return result;
    //    }

        public JsonResult QTYNaSkladeJson(int StockID, int ItemID)
        {
            decimal result = 0;
            try
            {
                result = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == ItemID).Select(x => x.FQty).First();
            }
            catch
            {

            }


            return Json(result);
        }

       
        public Dictionary<int, string> FindAllPrichiniVozvrata()
        {
            Dictionary<int, string> Result = new Dictionary<int, string>();
            try
            {
                Result = db.PrichiniSpisaniya.ToDictionary(x => x.Id, x => x.NameZh);
            }
            catch
            {

            }
            return Result;
        }

        public bool ShlopnutStrokiBase(int ItemId, int StockId)
        {
            bool Result = false;
            int M = DateTime.Now.Month;

            int Y = DateTime.Now.Year;
            List<ICInvBal> InvBal = new List<ICInvBal>();
            decimal Summa = 0;
            decimal Ballance = 0;
            try
            {
                InvBal = db.ICInvBal.Where(x => x.FYear == Y && x.FPeriod == M && x.FItemID == ItemId && x.FStockID == StockId).ToList();
                Summa = InvBal.Sum(x => x.FBegQty);
                Ballance = InvBal.Sum(x => x.FBegBal);
                ICInvBal FI = InvBal[0];
                InvBal.RemoveAt(0);
                FI.FBegBal = Ballance;
                FI.FBegQty = Summa;
                FI.FMTONo = "";
                db.Entry(FI).State = EntityState.Modified;

                foreach (var s in InvBal)
                {
                    db.Entry(s).State = EntityState.Deleted;
                }
                db.SaveChanges();
                Result = true;

            }
            catch (Exception e)
            {

            }
            return Result;
        }
        public bool ShlopnutStroki (int ItemId, int StockId)
        {
            bool Result = false;
            try
            {
                var Stroki = db.ICInventory.Where(x => x.FItemID == ItemId && x.FStockID == StockId).ToList();
                decimal QTY = Stroki.Sum(x => x.FQty);
 
                var MainStroka = Stroki[0];
                Stroki.RemoveAt(0);
                MainStroka.FMTONo = "";
                MainStroka.FQty = QTY;
                db.Entry(MainStroka).State = EntityState.Modified;
                db.SaveChanges();

                foreach (var s in Stroki)
                {
                    db.Entry(s).State = EntityState.Deleted;
                }

                db.SaveChanges();
                ShlopnutStrokiBase(ItemId, StockId);
                Result = true;
                

            }
            catch (Exception e)
            {

            }
            return Result;
        }

        public bool PeremeshenieNaSklad(int DocumentId, int StockID , int ItemID, decimal QTY, bool plus, string ZakazPokupatelya ="", bool ObshiiKotel = false )
        {
            bool go = false;
            bool Zakaz = false;
            bool UseZakaz = true;
            if (ZakazPokupatelya.Equals("")==false)
            {
                Zakaz = true;
            }
            decimal QTYBilo = SearchQTYInStock(StockID.ToString(), ItemID.ToString());

          

            ICInventory Sklad = new ICInventory();
            int EstLiStrokaNaSklade = 0;

           

            if (ObshiiKotel)
            {
                Zakaz = false;
                UseZakaz = false;
                ShlopnutStroki(ItemID, StockID);
               
            }
            if (Zakaz )
            {
                try
                {
                    EstLiStrokaNaSklade = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == ItemID && x.FMTONo.Equals(ZakazPokupatelya)).Count();
                }
                catch
                {

                }
                if (EstLiStrokaNaSklade==0 && plus==false)
                {
                    UseZakaz = false;
                    EstLiStrokaNaSklade = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == ItemID && x.FMTONo.Equals("")).Count();
                }
            }
            else
            {


                try
                {
                    EstLiStrokaNaSklade = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == ItemID && x.FMTONo.Equals("")).Count();
                }
                catch
                {

                }
            }



            if (EstLiStrokaNaSklade > 0) //Если есть строка на складе
            {

                try
                {


                    List<ICInventory> Entries = new List<ICInventory>();
                    decimal SummaNomenklaturs = 0;
                    try
                    {
                        
                        if (Zakaz)
                        {
                            if (UseZakaz)
                            {
                                Entries = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == ItemID && x.FMTONo.Equals(ZakazPokupatelya)).ToList();
                            }
                            else
                            {
                                Entries = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == ItemID && x.FMTONo.Equals("")).ToList();
                            }
                        }
                        else
                        {

                            Entries = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == ItemID).ToList();
                            
                          
                        }

                        try
                        {
                            SummaNomenklaturs = Entries.Sum(x => x.FQty);
                        }
                        catch
                        {

                        }

                    }
                    catch
                    {

                    }
                        
              
                    if (plus)
                    {


                       var Stroka = Entries.First();

                        Entries = null;
                        Stroka.FQty += QTY;
                            try
                            {

                                db.Entry(Stroka).State = EntityState.Modified;
                                db.SaveChanges();
                            
                                go = true;
                            }

                            catch (Exception exx)
                            {

                                Console.WriteLine("Ошибка добавления на склад " + exx.Message);
                            }
                      
                    }
                    else // если минус тогда списываем по очереди
                    {
                        if (SummaNomenklaturs < QTY)
                        {
                            ToSkladLog(DocumentId, 0, StockID, QTYBilo, QTY, 0, ItemID);
                            return false;
                        }
                        decimal Ostatok = QTY;
                        foreach (ICInventory I in Entries)
                        {
                            if (Ostatok > 0)
                            {
                                if (I.FQty >= Ostatok)
                                {
                                    I.FQty -= Ostatok;
                                    Ostatok = 0;
                                    try
                                    {

                                        db.Entry(I).State = EntityState.Modified;
                                        db.SaveChanges();
                                        go = true;
                                    }

                                    catch (Exception exx)
                                    {
                                        Console.WriteLine("Ошибка добавления на склад " + exx.Message);
                                    }
                                    break;
                                }
                                else
                                {
                                    Ostatok -= I.FQty;
                                    I.FQty = 0;
                                    try
                                    {
                                        db.Entry(I).State = EntityState.Modified;
                                        db.SaveChanges();
                                    }
                                    catch
                                    {

                                    }
                                }
                            }
                            
                        }
                    }
                  
                 

                }
                catch (Exception SE)
                {
                    Console.WriteLine("Ошибка " + SE.Message);
                }

             
            }
            else
            {
                if (plus)
                {
                    //Если нет такой строки то добавляем новую
                    Sklad.FQty = QTY;
                    Sklad.FStockID = StockID;
                    Sklad.FItemID = ItemID;
                    Sklad.FBrNo = "0";
                    Sklad.FBatchNo = "";
                    Sklad.FKFDate = "";
                    if (Zakaz)
                    {
                        Sklad.FMTONo = ZakazPokupatelya;
                    }
                    else
                    {
                        Sklad.FMTONo = "";
                    }
                    try
                    {
                        db.ICInventory.Add(Sklad);
                        db.SaveChanges();
                        go = true;
                    }
                    catch (Exception exxx)
                    {
                       
                        Console.WriteLine("Не смогли добавить новую строку поступления на склад ICInventory " + exxx.Message);
                    }
                }
                else
                {
                    ToSkladLog(DocumentId, 0, StockID, QTYBilo, QTY, 0, ItemID);
                    return false;
                }
            }

            decimal QTYStalo = SearchQTYInStock(StockID.ToString(), ItemID.ToString());

            ToSkladLog(DocumentId, 0, StockID, QTYBilo, QTY, QTYStalo, ItemID);


            return go;
        }

        public void ToSkladLog (int DocId, int FromStockId, int ToId,  decimal QTYBilo,  decimal QTYKPeremesheniu, decimal QTYStalo, int ItemId )
        {
            SkladLog SL = new SkladLog();
            SL.DocId = DocId;
            SL.FromStockId = FromStockId;
            SL.ToId = ToId;
            SL.QTYBilo = QTYBilo;
            SL.QTYKPeremesheniu = QTYKPeremesheniu;
            SL.QTYStalo = QTYStalo;
            SL.ToName = "Не заполняем пока";
            SL.ItemId = ItemId;
    
            try
            {
                SL.FBillNo = db.ICStockBill.Where(x => x.FInterID == DocId).Select(x=>x.FBillNo).First();
                
            }
            catch (Exception e)
            {
                SL.FBillNo = "Не удалось заполнить " + e.Message;
            }

            try
            {
                SL.ItemNumber = db.t_Item.Where(x => x.FItemID == ItemId).Select(x => x.FNumber).First();

            }
            catch (Exception e)
            {
                SL.FBillNo = "Не удалось заполнить " + e.Message;
            }

            try
            {
                SL.ToName = db.t_Stock.Where(x => x.FItemID == ToId).Select(x => x.FName).First();

            }
            catch (Exception e)
            {
                SL.ToName = "Не удалось заполнить "+e.Message;
            }

            try
            {
                db.SkladLog.Add(SL);
                db.SaveChanges();
            }
            catch (Exception e)
            {
                
            }


        }


        public ActionResult SkladInfo ()
        {
            List<SkladLog> SL = new List<SkladLog>();
            try
            {
                SL = db.SkladLog.OrderByDescending(x => x.Id).ToList();
            }
            catch
            {

            }
            return View(SL);
        }
        public JsonResult PeremeshenieNaSkladJSON(int StockID, int ItemID, decimal QTY, bool plus)
        {
            bool go = false;
            ICInventory Sklad = new ICInventory();
            int EstLiStrokaNaSklade = 0;
            try
            {
                EstLiStrokaNaSklade = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == ItemID).Count();
            }
            catch
            {

            }
            if (EstLiStrokaNaSklade > 0)
            {

                try
                {
                    Sklad = db.ICInventory.Where(x => x.FStockID == StockID && x.FItemID == ItemID).First();
                    if (plus)
                    {
                        Sklad.FQty += QTY;
                    }
                    else
                    {
                        if (Sklad.FQty >= QTY)
                        {
                            Sklad.FQty -= QTY;
                        }
                        else
                        {
                            return Json(Resources.Resource.NomenklaturiNedostatochno);
                        }
                    }

                }
                catch (Exception SE)
                {
                    Console.WriteLine("Ошибка " + SE.Message);
                    return Json(SE.Message);
                }

                try
                {

                    db.Entry(Sklad).State = EntityState.Modified;
                    db.SaveChanges();
                    go = true;
                }

                catch (Exception exx)
                {
                    Console.WriteLine("Ошибка добавления на склад " + exx.Message);
                }
            }
            else
            {
                if (plus)
                {
                    //Если нет такой строки то добавляем новую
                    Sklad.FQty = QTY;
                    Sklad.FStockID = StockID;
                    Sklad.FItemID = ItemID;
                    Sklad.FBrNo = "0";
                    Sklad.FBatchNo = "";
                    Sklad.FKFDate = "";
                    Sklad.FMTONo = "";
                    try
                    {
                        db.ICInventory.Add(Sklad);
                        db.SaveChanges();
                        go = true;
                    }
                    catch (Exception exxx)
                    {
                        Console.WriteLine("Не смогли добавить новую строку поступления на склад ICInventory " + exxx.Message);
                    }
                }
                else
                {
                    return Json(false);
                }
            }
            return Json(Resources.Resource.NomenklaturiNedostatochno);
        }


        [Culture]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult SavePostuplenie([Bind(Include = "FInterID,FCommitQty,FEntryID")] POOrderEntry Entry) 
        {

            
            
              
                   // db.POOrderEntry.Add(pOOrderEntry);
                 //   db.SaveChanges();
                //    return RedirectToAction("Index");
                
            
            DateTime Date = DateTime.Now.AddMonths(-6);
            var Item = db.POOrderEntry.Where(x => x.FInterID == Entry.FInterID&&x.FEntryID==Entry.FEntryID).First();//Строка в заказе поставщику
            Item.FCommitQty = Entry.FCommitQty;

            var MaxNum = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            MaxNum.FMaxNum++;

            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 1).First();

            string WIN = "WIN0" + MaxStockID;

            var POOrder = db.POOrder.Where(x => x.FInterID == Entry.FInterID).Include(x=>x.t_Department).First();//Берем данные из заказа поставщику
        


          //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum.FMaxNum.Value;
            StockBill.FDate = DateTime.Now;
            StockBill.FTranType = 1;
            StockBill.FBillNo = WIN;
            StockBill.FDeptID = POOrder.FDeptID;
            StockBill.FEmpID = POOrder.FEmpID;
            StockBill.FSupplyID = POOrder.FSupplyID;
            StockBill.FCheckerID = 16507; // TODO найти пользака текущего. Сделать модуль регистрации пользователей и сопоставить их с кинди
            StockBill.FManagerID = POOrder.t_Department.FManager.Value;
            StockBill.FSManagerID = POOrder.t_Department.FManager.Value;



            if (ModelState.IsValid)
            {
                try
                {
                    db.Entry(Item).State = EntityState.Modified;
                    db.SaveChanges();
                    ViewBag.Message = "Данные успешно сохранены!";
                }
                catch (Exception E)
                {
                    ViewBag.Message = "Ошибка = " + E.Message;
                }
            }

            
            return RedirectToAction("Index");
        }

        // GET: POOrderEntries/Details/5
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            POOrderEntry pOOrderEntry = db.POOrderEntry.Find(id);
            if (pOOrderEntry == null)
            {
                return HttpNotFound();
            }
            return View(pOOrderEntry);
        }

        // GET: POOrderEntries/Create
        public ActionResult Create()
        {
            ViewBag.FInterID = new SelectList(db.POOrder, "FInterID", "FBrNo");
            ViewBag.FItemID = new SelectList(db.t_Item, "FItemID", "FNumber");
            return View();
        }

        // POST: POOrderEntries/Create
        // Чтобы защититься от атак чрезмерной передачи данных, включите определенные свойства, для которых следует установить привязку. 
        // Дополнительные сведения см. в статье https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "FBrNo,FInterID,FEntryID,FItemID,FQty,FCommitQty,FDate,FPrice,FAmount,FTaxRate,FTax,FTaxAmount,FNote,FUnitID,FAuxCommitQty,FAuxPrice,FAuxQty,FSourceEntryID,FCess,FStockQty,FAuxStockQty,FMapNumber,FMapName,FAllAmount,FAuxPropID,FAuxPriceDiscount,FPriceDiscount,FQtyInvoice,FQtyInvoiceBase,FAuxTaxPrice,FTaxPrice,FReceiveAmountFor_Commit,FReceiveAmount_Commit,FSecCoefficient,FSecQty,FSecCommitQty,FSourceTranType,FSourceInterId,FSourceBillNo,FContractInterID,FContractEntryID,FContractBillNo,FMRPLockFlag,FAuxQtyInvoice,FMrpClosed,FDetailID,FMapID,FSProducingAreaID,FAmtDiscount,FCheckAmount,FMrpAutoClosed,FPayApplyAmountFor_Commit,FPayApplyAmount_Commit,FSecStockQty,FSecInvoiceQty,FPlanMode,FMTONo,FDescount,FSupConfirm,FSupConDate,FSupConQty,FSupConMem,FSupConFetchDate,FSupConfirmor,FQualityRptBillID,FLockByAlter,FDeliveryQty,FAuxDeliveryQty,FSecDeliveryQty,FRejectRefuseNote,FRefuseNote,FLockBySupplier,FEntryAccessoryCount,FPRInterID,FPREntryID,FAuxReceiptQty,FReceiptQty,FAuxReturnQty,FReturnQty,FCheckMethod,FIsCheck,FAmountExceptDisCount,FAllAmountExceptDisCount,FEntryDisCount,FCommitAmt,FCommitAmtTax,FCommitTax,FPayReqPayAmountFor,FEntrySelfP0266,FEntrySelfP0268,FEntrySelfP0269,FEntrySelfP0270,FCloseEntryUser,FCloseEntryDate,FCloseEntryCauses,FOutSourceInterID,FOutSourceEntryID,FOutSourceTranType,FBatchNo")] POOrderEntry pOOrderEntry)
        {
            if (ModelState.IsValid)
            {
                db.POOrderEntry.Add(pOOrderEntry);
                db.SaveChanges();
                return RedirectToAction("Index");
            }

            ViewBag.FInterID = new SelectList(db.POOrder, "FInterID", "FBrNo", pOOrderEntry.FInterID);
            ViewBag.FItemID = new SelectList(db.t_Item, "FItemID", "FNumber", pOOrderEntry.FItemID);
            return View(pOOrderEntry);
        }

        // GET: POOrderEntries/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            POOrderEntry pOOrderEntry = db.POOrderEntry.Find(id);
            if (pOOrderEntry == null)
            {
                return HttpNotFound();
            }
            ViewBag.FInterID = new SelectList(db.POOrder, "FInterID", "FBrNo", pOOrderEntry.FInterID);
            ViewBag.FItemID = new SelectList(db.t_Item, "FItemID", "FNumber", pOOrderEntry.FItemID);
            return View(pOOrderEntry);
        }

        // POST: POOrderEntries/Edit/5
        // Чтобы защититься от атак чрезмерной передачи данных, включите определенные свойства, для которых следует установить привязку. 
        // Дополнительные сведения см. в статье https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "FBrNo,FInterID,FEntryID,FItemID,FQty,FCommitQty,FDate,FPrice,FAmount,FTaxRate,FTax,FTaxAmount,FNote,FUnitID,FAuxCommitQty,FAuxPrice,FAuxQty,FSourceEntryID,FCess,FStockQty,FAuxStockQty,FMapNumber,FMapName,FAllAmount,FAuxPropID,FAuxPriceDiscount,FPriceDiscount,FQtyInvoice,FQtyInvoiceBase,FAuxTaxPrice,FTaxPrice,FReceiveAmountFor_Commit,FReceiveAmount_Commit,FSecCoefficient,FSecQty,FSecCommitQty,FSourceTranType,FSourceInterId,FSourceBillNo,FContractInterID,FContractEntryID,FContractBillNo,FMRPLockFlag,FAuxQtyInvoice,FMrpClosed,FDetailID,FMapID,FSProducingAreaID,FAmtDiscount,FCheckAmount,FMrpAutoClosed,FPayApplyAmountFor_Commit,FPayApplyAmount_Commit,FSecStockQty,FSecInvoiceQty,FPlanMode,FMTONo,FDescount,FSupConfirm,FSupConDate,FSupConQty,FSupConMem,FSupConFetchDate,FSupConfirmor,FQualityRptBillID,FLockByAlter,FDeliveryQty,FAuxDeliveryQty,FSecDeliveryQty,FRejectRefuseNote,FRefuseNote,FLockBySupplier,FEntryAccessoryCount,FPRInterID,FPREntryID,FAuxReceiptQty,FReceiptQty,FAuxReturnQty,FReturnQty,FCheckMethod,FIsCheck,FAmountExceptDisCount,FAllAmountExceptDisCount,FEntryDisCount,FCommitAmt,FCommitAmtTax,FCommitTax,FPayReqPayAmountFor,FEntrySelfP0266,FEntrySelfP0268,FEntrySelfP0269,FEntrySelfP0270,FCloseEntryUser,FCloseEntryDate,FCloseEntryCauses,FOutSourceInterID,FOutSourceEntryID,FOutSourceTranType,FBatchNo")] POOrderEntry pOOrderEntry)
        {
            if (ModelState.IsValid)
            {
                db.Entry(pOOrderEntry).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            ViewBag.FInterID = new SelectList(db.POOrder, "FInterID", "FBrNo", pOOrderEntry.FInterID);
            ViewBag.FItemID = new SelectList(db.t_Item, "FItemID", "FNumber", pOOrderEntry.FItemID);
            return View(pOOrderEntry);
        }

        // GET: POOrderEntries/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            POOrderEntry pOOrderEntry = db.POOrderEntry.Find(id);
            if (pOOrderEntry == null)
            {
                return HttpNotFound();
            }
            return View(pOOrderEntry);
        }

        // POST: POOrderEntries/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            POOrderEntry pOOrderEntry = db.POOrderEntry.Find(id);
            db.POOrderEntry.Remove(pOOrderEntry);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }

        public ActionResult ZalivkaFromProd()
        {
            return View();
        }

        public bool testPOOrder()
        {
            bool Go = false;
            int maxProd = ProdDB.ICMaxNum.Where(x => x.FTableName.Equals("POOrder")).First().FMaxNum.Value;
            int maxTest = db.ICMaxNum.Where(x => x.FTableName.Equals("POOrder")).First().FMaxNum.Value;
            if (maxProd!=maxTest)
            {
                Go = true;
            }
            return Go;
        }
        public ActionResult ZalivkaPOOrder()
        {
            List<string> Result = new List<string>();
            List<string> Errors = new List<string>();
            List<POOrderPROD> PRODPOOrder = new List<POOrderPROD>();
            List<POOrderEntryPROD> PRODPOOrderEntries = new List<POOrderEntryPROD>();
            List<ICSubContractPROD> SCP = new List<ICSubContractPROD>();
            List<ICSubContractEntryPROD> SCEP = new List<ICSubContractEntryPROD>();
            try
            {
                int maxPOOrdId = db.POOrder.Max(x => x.FInterID);
                int maxPOOrdEId = db.POOrderEntry.Max(x => x.FInterID);
                int maxProd = ProdDB.ICMaxNum.Where(x => x.FTableName.Equals("POOrder")).First().FMaxNum.Value;
                PRODPOOrder = ProdDB.POOrder.Where(x => x.FInterID > maxPOOrdId).ToList();
                PRODPOOrderEntries = ProdDB.POOrderEntry.Where(x => x.FInterID > maxPOOrdEId).ToList();

                int MaxSC = db.ICSubContract.Max(x => x.FInterID);
                int MaxSCE = db.ICSubContractEntry.Max(x => x.FInterID);
                SCP = ProdDB.ICSubContract.Where(x => x.FInterID > MaxSC).ToList();
                SCEP = ProdDB.ICSubContractEntry.Where(x => x.FInterID > MaxSCE).ToList();


                ICMaxNum I = db.ICMaxNum.Where(x => x.FTableName.Equals("POOrder")).First();
                if (maxProd != I.FMaxNum.Value)
                {
                    try
                    {
                        I.FMaxNum = maxProd;

                        db.Entry(I).State = EntityState.Modified;
                        db.SaveChanges();
                        Result.Add("Счетчик POORDER теперь = " + I.FMaxNum);
                    }
                    catch (Exception e)
                    {
                        Errors.Add("Не смогли сдвинуть счетчик ICMaxNum по причине " + e.Message);
                    }
                }
                else
                {
                    Result.Add("Счетчик POOrder не нуждается в обновлении = " + I.FMaxNum);
                }

            }
            catch (Exception e)
            {

            }

            if (PRODPOOrder.Count>0)
            {
                Result.Add("Найдено новых новых заказов поставщику POORDER = " + PRODPOOrder.Count);
                foreach (POOrderPROD PP in  PRODPOOrder)
                {
                    try
                    {
                        POOrder P = new POOrder();
                        P.FInterID = PP.FInterID;
                        P.FBrNo = PP.FBrNo;
                        P.FTranType = PP.FTranType;
                        P.FBillNo = PP.FBillNo;
                        P.FSupplyID = PP.FSupplyID;
                        P.FDate = PP.FDate;
                        P.FEmpID = PP.FEmpID;
                        P.FDeptID = PP.FDeptID;
                        P.FCurrencyID = PP.FCurrencyID;
                        P.FCheckerID = PP.FCheckerID;
                        P.FBillerID = PP.FBillerID;
                        P.FMangerID = PP.FMangerID;
                        P.FClosed = PP.FClosed;
                        P.FTranStatus = PP.FTranStatus;
                        P.FExchangeRate = PP.FExchangeRate;
                        P.FStatus = PP.FStatus;
                        P.FCancellation = PP.FCancellation;
                        P.FPOStyle = PP.FPOStyle;
                        P.FCheckDate = PP.FCheckDate;
                        P.FMultiCheckLevel1 = PP.FMultiCheckLevel1;
                        P.FMultiCheckLevel2 = PP.FMultiCheckLevel2;
                        P.FMultiCheckLevel3 = PP.FMultiCheckLevel3;
                        P.FMultiCheckDate1 = PP.FMultiCheckDate1;
                        P.FMultiCheckDate2 = PP.FMultiCheckDate2;
                        P.FMultiCheckDate3 = PP.FMultiCheckDate3;
                        P.FMultiCheckDate4 = PP.FMultiCheckDate4;
                        P.FMultiCheckDate5 = PP.FMultiCheckDate5;
                        P.FMultiCheckDate6 = PP.FMultiCheckDate6;

                        P.FOperDate = default;
                        P.FChangeDate = PP.FChangeDate;
                        P.FCloseDate = PP.FCloseDate;
                        P.FCloseUser = PP.FCloseUser;
                        P.FPOMode = PP.FPOMode;
                        P.FPlanCategory = PP.FPlanCategory;
                        P.FHeadSelfP0252 = PP.FHeadSelfP0252;
                        P.FHeadSelfP0253 = PP.FHeadSelfP0253;

                        P.FCashDiscount = PP.FCashDiscount;
                        P.FExplanation = PP.FExplanation;
                        P.FFetchAdd = PP.FFetchAdd;
                        P.FVersionNo = PP.FVersionNo;
                        P.FDeliveryPlace = PP.FDeliveryPlace;
                        P.FLastAlterBillNo = PP.FLastAlterBillNo;
                        P.FMultiCheckStatus = PP.FMultiCheckStatus;

                        db.POOrder.Add(P);
                        db.SaveChanges();
                        Result.Add("Добавлен заказ поставщику N"+P.FBillNo);
                    }
                    catch (Exception e)
                    {
                        Errors.Add("Не смогли залить N" + PP.FBillNo+" по ошибке "+e.Message);
                    }

                }
            }
            else
            {
                Result.Add("Новых заказов поставщику не найдено!");
            }

            if (PRODPOOrderEntries.Count>0)
            {
                Result.Add("Найдено новых новых строк в заказах POORDEREntry = " + PRODPOOrderEntries.Count);
                foreach (POOrderEntryPROD PP in PRODPOOrderEntries)
                {
                    try
                    {
                        POOrderEntry P = new POOrderEntry();
                        P.FInterID = PP.FInterID;
                        P.FBrNo = PP.FBrNo;
                        P.FDate = PP.FDate;
                        P.FEntryID = PP.FEntryID;
                        P.FItemID = PP.FItemID;
                        P.FQty = PP.FQty;
                        P.FCommitQty = PP.FCommitQty;
                        P.FPrice = PP.FPrice;
                        P.FAmount = PP.FAmount;
                        P.FTaxRate = PP.FTaxRate;
                        P.FTax = PP.FTax;
                        P.FTaxAmount = PP.FTaxAmount;
                        P.FNote = PP.FNote;
                        P.FUnitID = PP.FUnitID;
                        P.FAuxCommitQty = PP.FAuxCommitQty;
                        P.FAuxPrice = PP.FAuxPrice;
                        P.FAuxQty = PP.FAuxQty;
                        P.FSourceEntryID = PP.FSourceEntryID;
                        P.FCess = PP.FCess;
                        P.FStockQty = PP.FStockQty;
                        P.FAuxStockQty = PP.FAuxStockQty;
                        P.FQtyInvoice = PP.FQtyInvoice;
                        P.FQtyInvoiceBase = PP.FQtyInvoiceBase;
                        P.FSourceTranType = PP.FSourceTranType;
                        P.FSourceInterId = PP.FSourceInterId;
                        P.FSourceBillNo = PP.FSourceBillNo;
                        P.FDetailID = PP.FDetailID;
                        P.FMTONo = PP.FMTONo;
                        P.FSupConDate = PP.FSupConDate;
                        P.FBatchNo = PP.FBatchNo;
                        P.FCloseEntryDate = PP.FCloseEntryDate;
                        P.FEntrySelfP0266 = PP.FEntrySelfP0266;
                        P.FEntrySelfP0268 = PP.FEntrySelfP0268;
                        P.FEntrySelfP0269 = PP.FEntrySelfP0269;
                        P.FEntrySelfP0270 = PP.FEntrySelfP0270;

                        P.FMapNumber = PP.FMapNumber;
                        P.FContractBillNo = PP.FContractBillNo;
                        P.FRejectRefuseNote = PP.FRejectRefuseNote;
                        P.FRefuseNote = PP.FRefuseNote;

                        db.POOrderEntry.Add(P);
                        db.SaveChanges();
                        Result.Add("Добавлена строка заказа поставщику ID=" + P.FInterID+" номер строки ="+P.FEntryID);
                    }
                    catch (Exception e)
                    {
                        Errors.Add("Не смогли залить N" + PP.FInterID + " по ошибке " + e.Message);
                    }

                 
                }
            }
            else
            {
                Result.Add("Новых строк заказов поставщику не найдено!");
            }


            if (SCP.Count > 0)
            {
                Result.Add("Найдено новых новых заказов оутсорсерам WW = " + SCP.Count);
                foreach (ICSubContractPROD PP in SCP)
                {
                    try
                    {
                        ICSubContract P = new ICSubContract();
                        P.FInterID = PP.FInterID;
                        P.FBillNo = PP.FBillNo;
                        P.FSupplyID = PP.FSupplyID;
                        P.FDate = PP.FDate;
                        P.FCurrencyID = PP.FCurrencyID;
                        P.FCheckerID = PP.FCheckerID;
                        P.FBillerID = PP.FBillerID;
                        P.FMangerID = PP.FMangerID;
                        P.FClosed = PP.FClosed;
                        P.FTranStatus = PP.FTranStatus;
                        P.FExchangeRate = PP.FExchangeRate;
                        P.FStatus = PP.FStatus;
                        P.FCheckDate = PP.FCheckDate;
                        P.FInvStyle = PP.FInvStyle;
                        P.FSettleStyle = PP.FSettleStyle;
                        P.FCurrencyID = PP.FCurrencyID;
                        P.FDepartment = PP.FDepartment;
                        P.FSettleDate = PP.FSettleDate;
                        P.FExchangeRate = PP.FExchangeRate;
                        P.FEmployee = PP.FEmployee;
                        P.FMangerID = PP.FMangerID;
                        P.FSummary = PP.FSummary;
                        P.FCheckerID = PP.FCheckerID;
                        P.FCheckDate = PP.FCheckDate;
                        P.FBillerID = PP.FBillerID;
                        P.FCancellation = PP.FCancellation;
                        P.FClosed = PP.FClosed;
                        P.FStatus = PP.FStatus;
                        P.FTranStatus = PP.FTranStatus;
                        P.FModifyTime = default;
                        P.FClassTypeID = PP.FClassTypeID;
                        P.FRelateBrID = PP.FRelateBrID;
                        P.FBrID = PP.FBrID;
                        P.FPOOrdBillNo = PP.FPOOrdBillNo;
                        P.FOrderRefuse = PP.FOrderRefuse;
                        P.FPrintCount = PP.FPrintCount;
                        P.FExchangeRateType = PP.FExchangeRateType;
                        P.FClosedDate = PP.FClosedDate;
                        P.FPlanCategory = PP.FPlanCategory;
                        P.FDeliveryPlace = PP.FDeliveryPlace;
                        P.FAccessoryCount = PP.FAccessoryCount;
                        P.FCloserID = PP.FCloserID;
                        P.FVersionNo = PP.FVersionNo;
                        P.FExeStatus = PP.FExeStatus;
                        P.FText = PP.FText;
                        P.FHeadSelfP0253 = PP.FHeadSelfP0253;
                        P.FConnectFlag = PP.FConnectFlag;
                        P.FConcernStatus = PP.FConcernStatus;
                        P.FSendStatus = PP.FSendStatus;
                        P.FEnterpriseID = PP.FEnterpriseID;

                        db.ICSubContract.Add(P);
                        db.SaveChanges();
                        Result.Add("Добавлен заказ оутсорсеру N" + P.FBillNo);
                    }
                    catch (Exception e)
                    {
                        Errors.Add("Не смогли залить N" + PP.FBillNo + " по ошибке " + e.Message);
                    }

                }
            }
            else
            {
                Result.Add("Новых заказов оутсорсеру не найдено!");
            }


            if (SCEP.Count > 0)
            {
                Result.Add("Найдено новых новых заказов оутсорсерам WW = " + SCP.Count);
                foreach (ICSubContractEntryPROD PP in SCEP)
                {
                    try
                    {
                        ICSubContractEntry P = new ICSubContractEntry();
                        P.FInterID = PP.FInterID;
                        P.FEntryID = PP.FEntryID;
                        P.FIndex = PP.FIndex;
                        P.FDetailID = PP.FDetailID;
                        P.FItemID = PP.FItemID;
                        P.FMapID = PP.FMapID;
                        P.FMapName = PP.FMapName;
                        P.FAuxPropID = PP.FAuxPropID;
                        P.FSecQty = PP.FSecQty;
                        P.FSecCommitQty = PP.FSecCommitQty;
                        P.FSecCoefficient = PP.FSecCoefficient;
                        P.FUnitID = PP.FUnitID;
                        
                        P.FQty = PP.FQty;
                        P.FCommitQty = PP.FCommitQty;
                        P.FPrice = PP.FPrice;
                        P.FAmount = PP.FAmount;
                        P.FTaxRate = PP.FTaxRate;
                        P.FTaxAmount = PP.FTaxAmount;
                        P.FNote = PP.FNote;
                        P.FUnitID = PP.FUnitID;
                        P.FAuxCommitQty = PP.FAuxCommitQty;
                        P.FAuxPrice = PP.FAuxPrice;
                        P.FAuxQty = PP.FAuxQty;
                        P.FStockQty = PP.FStockQty;
                        P.FAuxStockQty = PP.FAuxStockQty;
                        P.FQtyInvoice = PP.FQtyInvoice;
                        P.FDetailID = PP.FDetailID;
                        P.FMTONo = PP.FMTONo;
                        P.FSupConDate = PP.FSupConDate;
                        P.FRejectRefuseNote = PP.FRejectRefuseNote;
                        P.FRefuseNote = PP.FRefuseNote;
                        P.FPayShipDate = PP.FPayShipDate;
                        P.FFetchDate = PP.FFetchDate;
                        P.FBOMInterID = PP.FBOMInterID;
                        P.FOrderBOMEntryID = PP.FOrderBOMEntryID;
                        P.FInHighLimit = PP.FInHighLimit;
                        P.FInHighLimitQty = PP.FInHighLimitQty;
                        P.FOutSourceEntryID = PP.FOutSourceEntryID;
                        P.FOutSourceInterID = PP.FOutSourceInterID;
                        P.FOutSourceTranType = PP.FOutSourceTranType;
                        P.FStockQtyOnlyForShow = PP.FStockQtyOnlyForShow;
                        P.FIsCheck = PP.FIsCheck;
                        P.FCheckMethod = PP.FCheckMethod;
                        P.FBillNo_SRC = PP.FBillNo_SRC;
                        P.FOrderNo = PP.FOrderNo;
                        P.FPORNumber = PP.FPORNumber;
                        P.FSupConfirm = PP.FSupConfirm;

                        db.ICSubContractEntry.Add(P);
                        db.SaveChanges();
                        Result.Add("Добавлена строка заказа поставщику ID=" + P.FInterID + " номер строки =" + P.FEntryID);
                    }
                    catch (Exception e)
                    {
                        Errors.Add("Не смогли залить N" + PP.FInterID + " по ошибке " + e.Message);
                    }

                }
            }
            else
            {
                Result.Add("Новых заказов оутсорсеру не найдено!");
            }

            ViewBag.Result = Result;
            ViewBag.Errors = Errors;

            return View();
        }

        public void SaveToPlanlog(string S, int WorkId, string WorkNumber, decimal Bilo, decimal Stalo, string Zadanie )
        {
            try
            {
                PlanLog P = new PlanLog();
            P.Prichina = S;
            P.UserId = CurrentKDWUserID();
            P.WorkId = WorkId;
            P.WorkNumber = WorkNumber;
                P.QTYBilo = Bilo;
                P.QTYStalo = Stalo;
                P.ChangeDate = DateTime.Now;
                P.Zadanie = Zadanie;
                db.PlanLog.Add(P);
                db.SaveChanges();

            }
            catch
            {

            }
        }

        public int FindMainStockFromDepartment(int DepartmentId)
        {
            int StockId = 0;
            List<DepartmentToStocks> DS = new List<DepartmentToStocks>();
            try
            {
                DS =db.DepartmentToStocks.ToList();
            }
            catch
            {

            }

            try
            {
                //Сначала ищем склад участка с галкой
                StockId = DS.Where(x => x.DepartmentId == DepartmentId && x.Main).Select(x => x.StockId).First();
            }
            catch (Exception e)
            {

                try
                {
                    //Потом ищем склад участка просто первый в списке
                    StockId = DS.Where(x => x.DepartmentId == DepartmentId).Select(x => x.StockId).First();
                }
                catch (Exception er)
                {

                }
            }
            return StockId;
        }

        [HttpPost]
        public ActionResult UploadWorksExcel(HttpPostedFileBase upload, string Prichina = "", string Rus = "N")
        {
            string warning = "";
            if (Rus.Contains(""))
            {
                Rus = "N";
            }
            Rus = Rus.ToUpper();
            string log = "";
            int Vkladka = 1;//DateTime.Now.Day;
            List<string> errors = new List<string>();
            List<string> uploaded = new List<string>();
            // получаем имя файла
            string fileName = System.IO.Path.GetFileName(upload.FileName);
            ProgressHub.SendMessage("Загружаем файл " + fileName, 0);
            SaveToDocLog(0, 0, "Начата загрузка файла Excel! "+ fileName, 0, 0, 0, "");

            // сохраняем файл в папку Files в проекте
            if (Directory.Exists(Server.MapPath("~/Files/")) == false)
            {
                try
                {

                    Directory.CreateDirectory(Server.MapPath("~/Files/"));
                }
                catch
                {
                    SaveToDocLog(0, 0, "Невозможно создать дирректорию Files на сервере " + fileName, 0, 0, 0, "");

                    ProgressHub.SendMessage("Невозможно создать дирректорию Files на сервере", 0);
                }

            }
            SaveToDocLog(0, 0, "Нашли директорию Files на диске " + Server.MapPath("~/Files/" + fileName), 0, 0, 0, "");

            try
            {
                upload.SaveAs(Server.MapPath("~/Files/" + fileName));
              
                SaveToDocLog(0, 0, "Сохранили файл "  + Server.MapPath("~/Files/" + fileName), 0, 0, 0, "");
            }
            catch
            {
                warning += "Невозможно сохранить в папку Files файл " + fileName;

                SaveToDocLog(0, 0, "Невозможно сохранить файл " + fileName + " на сервер", 0, 0, 0, "");
            }

            if (System.IO.File.Exists((Server.MapPath("~/Files/" + fileName))))
                {

                SaveToDocLog(0, 0, "Найден сохраненный файл " + Server.MapPath("~/Files/" + fileName) + " на сервере", 0, 0, 0, "");
            }
            else
            {
                SaveToDocLog(0, 0, "Ошибка файл не смог сохраниться на сервер " + Server.MapPath("~/Files/" + fileName) + " ", 0, 0, 0, "");
                errors.Add("Файл не смог сохраниться на сервер!");
            }
          
            if (upload != null)
            {
                int[] X = new int[] { 1, 10, 12, 14,18 };
                string[] Names = new string[] { "WORKNUMBER", "PSC1", "PSC2", "PSC3", "DATES" };
                string Err = "";
                List<List<string>> excel = ExcelSVNUpload.IMPORT(Server.MapPath("~/Files/" + fileName), Names, out Err,Vkladka.ToString(),X);
                if (excel.Count < 1)
                {
                    SaveToDocLog(0, 0, "Не найдена ни одна строка Excel " + fileName + " ", 0, 0, 0, "");
                    foreach(var ee in Err)
                    {
                        SaveToDocLog(0, 0, "Ошибка " + ee + " ", 0, 0, 0, "");

                    }
                    //если нифига не загрузилось то 
                    errors.Add(Err);
                    ViewBag.Errors = errors;
                    ViewBag.Zagrugeno = uploaded;
                    //  ViewBag.Counter = Counter;
                    return View();
                   
                }
                else
                {
                    SaveToDocLog(0, 0, "Найдено строк Excel " + excel.Count + " ", 0, 0, 0, "");
                    //  string[] readText = System.IO.File.ReadAllLines(Server.MapPath("~/Files/" + fileName), Encoding.Default);//Encoding.GetEncoding("UTF8"));
                    int Counter = 0;
                    DateTime[] Dates = new[] { DateTime.Now.Date, DateTime.Now.Date, DateTime.Now.Date };
                    int[] QTYs = new int[] { 0, 1, 2 };
                    List<PlanoviWorks> PW = new List<PlanoviWorks>();


                    //Считываем даты
                    string Error = "";
                    int DC = 0;
                    foreach (int Q in QTYs)
                    {
                       

                        try
                        {
                            //   string[] S = s.Split(';');
                            Error = "Ошибка в дате Ячейка " + Q + "! " + excel[0][Q];
                            if (excel[0][Q].Contains("."))
                            {
                                Error = "Ошибка в дате Ячейка содержащая . " + Q + "! " + excel[0][Q];
                                Dates[DC] = DateTime.ParseExact(excel[0][Q], "dd.MM.yyyy", CultureInfo.GetCultureInfo("ru-RU")).Date; //yyyy/MM/dd
                                uploaded.Add("Найдена дата " + Dates[DC].ToString());
                            }


                            //Китайский вариант
                            
                            
                            if (Rus.Contains("N")&&excel[0][Q].Contains("/"))
                                    
                            {

                                string[] DateFormats = new string[] { "dd/MM/yyyy hh:mm:ss", "dd/MM/yyyy", "yyyy/MM/dd hh:mm:ss", "yyyy/MM/dd", "yyyy/M/d", "yyyy/M/d hh:mm:ss", "yyyy/M/d h:mm:ss" };
                                SaveToDocLog(0, 0, "Попытка преобразовать дату " + excel[0][Q], 0, 0, 0, "");

                                Dates[DC] = DateTime.ParseExact(excel[0][Q], DateFormats, DateTimeFormatInfo.InvariantInfo, DateTimeStyles.None);// CultureInfo.GetCultureInfo("ru-RU")).Date; //yyyy/MM/dd
                                uploaded.Add("Найдена дата " + Dates[DC].ToString());
                                SaveToDocLog(0, 0, "Найдена дата " + fileName + " " + Dates[DC].ToString(), 0, 0, 0, "");
                                /* int day = 0;
                                 int month = 0;
                                 int year = 0;
                                 try
                                 {
                                     Error = "Ошибка в дате Ячейка содержащая / " + Q + "! " + excel[0][Q];
                                     string[] S = excel[0][Q].Split('/');
                                     Error = "Ошибка в дате Ячейка содержащая / Не смогли найти день" + S[2] + "! " + excel[0][Q];
                                     day = Convert.ToInt16(S[2].Replace(" ", "").Replace("0:00:00", ""));
                                     Error = "Ошибка в дате Ячейка содержащая / Не смогли найти месяц" + S[1] + "! " + excel[0][Q];
                                     month = Convert.ToInt16(S[1]);
                                     Error = "Ошибка в дате Ячейка содержащая / Не смогли найти год" + S[0] + "! " + excel[0][Q];
                                     year = Convert.ToInt16(S[0]);
                                 }
                                 catch (Exception e)
                                 {
                                     SaveToDocLog(0, 0, "Ошибка не смогли преобразовать дату " + e.Message + " ", 0, 0, 0, "");
                                 }
                                 if (day * month * year > 0)
                                 {
                                     DateTime DT = new DateTime(year, month, day);
                                     Dates[DC] = DT;//DateTime.ParseExact(excel[0][Q], "yyyy/MM/dd", CultureInfo.GetCultureInfo("ru-RU")).Date; //yyyy/MM/dd
                                     uploaded.Add("Найдена дата " + Dates[DC].ToString());
                                     SaveToDocLog(0, 0, "Найдена дата " + fileName + " " + Dates[DC].ToString(), 0, 0, 0, "");
                                 }
                                 else
                                 {
                                     SaveToDocLog(0, 0, "Ошибка дата определена неверно day * month * year = 0 ", 0, 0, 0, "");
                                 }
                                */

                            }
                            
                            //Русский вариант
                            
                            if (Rus.Contains("Y") && excel[0][Q].Contains("/"))

                            {
                                /*   Error = "Ошибка в дате Ячейка содержащая / " + Q + "! " + excel[0][Q];
                                   string[] S = excel[0][Q].Split('/');
                                   Error = "Ошибка в дате Ячейка содержащая / Не смогли найти день" + S[2] + "! " + excel[0][Q];
                                   int day = Convert.ToInt16(S[0].Replace(" ", "").Replace("0:00:00", ""));
                                   Error = "Ошибка в дате Ячейка содержащая / Не смогли найти месяц" + S[1] + "! " + excel[0][Q];
                                   int month = Convert.ToInt16(S[1]);
                                   Error = "Ошибка в дате Ячейка содержащая / Не смогли найти год" + S[0] + "! " + excel[0][Q];
                                   int year = Convert.ToInt16(S[2].Replace(" ", "").Replace("0:00:00", ""));

                                   DateTime DT = new DateTime(year, month, day);
                                */
                                string[] DateFormats = new string[] { "dd/MM/yyyy hh:mm:ss", "dd/MM/yyyy", "yyyy/MM/dd hh:mm:ss", "yyyy/MM/dd" };
                                SaveToDocLog(0, 0, "Попытка преобразовать дату " + excel[0][Q], 0, 0, 0, "");

                                Dates[DC] = DateTime.ParseExact(excel[0][Q], DateFormats, DateTimeFormatInfo.InvariantInfo, DateTimeStyles.None);// CultureInfo.GetCultureInfo("ru-RU")).Date; //yyyy/MM/dd
                                uploaded.Add("Найдена дата " + Dates[DC].ToString());
                                SaveToDocLog(0, 0, "Найдена дата " + fileName + " " + Dates[DC].ToString(), 0, 0, 0, "");

                            }
                            

                            if (excel[0][Q].Contains("-"))

                            {
                                Error = "Ошибка в дате Ячейка содержащая - " + Q + "! " + excel[0][Q];
                                Dates[DC] = DateTime.ParseExact(excel[0][Q], "yyyy-MM-dd", CultureInfo.GetCultureInfo("ru-RU")).Date; //yyyy/MM/dd
                                uploaded.Add("Найдена дата " + Dates[DC].ToString());
                                SaveToDocLog(0, 0, "Найдена дата " + fileName + " " + Dates[DC].ToString(), 0, 0, 0, "");

                            }

                            // Convert.ToDateTime(S[Q]);




                        }
                        catch (Exception ex)
                        {
                            errors.Add(Error + ex.Message);
                            SaveToDocLog(0, 0, "Ошибка загрузки файла " + fileName + " "+Error+" " + ex.Message, 0, 0, 0, "");
                            goto EX;
                            //  break;
                        }
                        DC++;
                    }


                    foreach (List<string> S in excel)
                    {
                        Counter++;

                     
                               
                                if (S[0].Contains("WORK") && S[0].Length > 5)
                                {
                                    //Если в файле есть Work
                                    string WorkNumber = S[0];
                                    DateTime D = DateTime.Now.Date;
                                    //  bool sovpalo = PoiskPlanWork(D, WorkNumber);
                                    //  if (!sovpalo) //если нет совпадений
                                    //   {

                                    try
                                    {
                                        int DD = -1;
                                        string E = "";
                                        foreach (int Q in QTYs)
                                        {
                                          
                                            
                                    try
                                            
                                    {
                                        Error = "Ошибка Не смогли создать новую плановую работу ";
                                        PlanoviWorks P = new PlanoviWorks();
                                        Error = " Ошибка Не смогли сохранить порядок " + Counter;
                                        //  P.Date = DateTime.Now;
                                        P.Poryadok = Counter;
                                        Error = "Ошибка Не смогли плюсануть DD " + DD;
                                        DD++;
                                        try
                                                {
                                                    if (S[Q].Equals("") == false)
                                                    {

                                                        Error = "Не смогли считать количество " + S[Q + 1] + " " + S[0] + " Date=" + Dates[DD] + "! ";
                                                        S[Q+1] = S[Q + 1].Replace(" ", "").Replace(".", ",");
                                                        P.QTY = Convert.ToDecimal(S[Q + 1]);
                                                    }

                                                }
                                                catch (Exception e)
                                                {
                                                    errors.Add(Error + e.Message);
                                            SaveToDocLog(0, 0, "Ошибки загрузки " + fileName + " " + Error + e.Message, 0, 0, 0, "");
                                            continue;
                                                }

                                                P.WorkNumber = S[0];
                                                P.Date = Dates[DD];
                                                Error = "Не нашли номер WORK в базе " + S[0] + "! ";
                                                P.ICMO = db.ICMO.Where(x => x.FBillNo.Equals(P.WorkNumber)).Include(x=>x.t_Department).First();
                                                P.WorkId = P.ICMO.FInterID;
                                                if (P.QTY > 0)
                                                {
                                                   PW.Add(P);
                                                   SaveToDocLog(0, 0, "Добавили "+ P.WorkNumber + " в список на дату"+P.Date.Value.ToString("dd.MM.yy"), 0, 0, 0, "");
                                                }
                                            }
                                            catch (Exception e)
                                            {
                                                errors.Add(Error + e.Message );
                                                SaveToDocLog(0, 0, "Ошибки загрузки " + fileName + " " + Error + e.Message, 0, 0, 0, "");
                                                continue;
                                            }



                                        }
                                    }
                                    catch (Exception e)
                                    {
                                        Console.WriteLine(e.Message);
                                SaveToDocLog(0, 0, "Ошибка добавления плановой работы! " + S[0] + Error + e.Message , 0, 0, 0, "");
                                errors.Add("Ошибка добавления плановой работы! " + S[0]+ Error + e.Message+ e.InnerException.Message);
                                        continue;
                                    }

                                    //  }
                                    //   else
                                    //  {

                                    //  }

                                }


                    }
                    uploaded.Add("Количество плановых работ = " + PW.Count);
                    SaveToDocLog(0, 0, "Количество плановых работ = " + PW.Count+" переходим к чистке подразделений ", 0, 0, 0, "");

                    if (PW.Count > 0)
                    {
                        //Теперь чистим ворки за дату+ подразделение
                        List<int> Depts = new List<int>();
                        Depts = PW.Select(x => x.ICMO.FWorkShop.Value).Distinct().ToList();

                        List<string> DeptsNames = PW.Where(x => Depts.Contains(x.ICMO.FWorkShop.Value)).Select(x=>x.ICMO.t_Department.FName).Distinct().ToList();
                        foreach(string z in DeptsNames)
                        {
                            uploaded.Add("Очищаем подразделение = " + z);
                        }
                        
                        uploaded.Add("Количество подразделений для чистки = " + Depts.Count);
                        SaveToDocLog(0, 0, "Количество подразделений для чистки = " + Depts.Count, 0, 0, 0, "");
                        // Depts =  DDD.ToDictionary(x => x.DeptId, x => x.Date);
                        //   for (int i = 0; i < 3; i++)
                        //  {
                        foreach (var D in Depts)
                        {
                            List<DateTime> DeptsDate = new List<DateTime>();
                            try
                            {
                                DeptsDate = PW.Where(x => x.ICMO.FWorkShop.Value == D).Select(x => x.Date.Value).Distinct().ToList();
                            
                                foreach (var dd in DeptsDate)
                                {
                                    SaveToDocLog(0, 0, "Чистим подразделение " + D + " на дату " + dd.ToString("dd.MM.yy") + " " + D, 0, 0, 0, "");
                                    bool go = false;
                                    go = ChistkaPlanWork(dd, D);
                                    if (go)
                                    {
                                        uploaded.Add("Очишено подразделение  "+dd+" " + D);
                                        SaveToDocLog(0, 0, "Очишено подразделение  " + dd + " " + D, 0, 0, 0, "");
                                    }
                                    else
                                    {
                                        errors.Add("Не смогли очистить подразделение " + dd + " " + D);
                                        SaveToDocLog(0, 0, "Ошибка Не смогли очистить подразделение " + dd + " " + D, 0, 0, 0, "");
                                    }
                                }
                            }

                            catch (Exception e)
                            {
                                errors.Add("Ошибка Не смогли очистить подразделение  " + D + " по ошибке " + e.Message);
                                SaveToDocLog(0, 0, "Ошибка Не смогли очистить подразделение  " + D + " по ошибке " + e.Message, 0, 0, 0, "");
                            }
                        }
                        //  }
                        //Теперь грузим новые ворки


                        //Грузим работы старшего мастера для обновления количества
                        List<StarMehWorks> SW = new List<StarMehWorks>();
                        try
                        {
                            SW = db.StarMehWorks.Where(x => Dates.Contains(x.DateStart.Value)).ToList();
                        }
                        catch
                        {

                        }
                        //Грузим работы склада для обновления количества

                   /*     List<StockWorks> StockWorks = new List<StockWorks>();
                        try
                        {
                            StockWorks = db.StockWorks.Where(x => Dates.Contains(x.DateStart)).Include(x=>x.StockWorkEntrys).Include(x=>x.ICMO).ToList();
                        }
                        catch
                        {

                        }
*/
                        uploaded.Add("Переходим к сохранению плановых работ = " + PW.Count);
                        SaveToDocLog(0, 0, "Переходим к сохранению плановых работ = " + PW.Count, 0, 0, 0, "");
                        foreach (var pw in PW)
                        {
                            try
                            {
                                Error = "Ошибка сохранения плановой работы" + pw.WorkNumber+ " подразделение "+ pw.ICMO.FWorkShop;

                                PlanoviWorks pp = new PlanoviWorks();
                                pp.Date = pw.Date;
                                pp.QTY = pw.QTY;
                                pp.WorkId = pw.WorkId;
                                pp.Poryadok = pw.Poryadok;
                                pp.WorkNumber = pw.WorkNumber;

                                using (var db2 = new KingDeeDB())
                                {
                                    try
                                    {
                                        Error = "Ошибка сохранения лога" + pw.WorkNumber + " подразделение " + pw.ICMO.FWorkShop;
                                      
                                        db2.PlanoviWorks.Add(pp);
                                        db2.SaveChanges();
                                        uploaded.Add("Добавлено новое задание в план " + pw.ICMO.FBillNo + " на " + pw.Date + " QTY = " + pw.QTY);
                                        SaveToDocLog(0, 0, "Добавлено новое задание в план на " + pw.Date, pw.QTY, 0, 0, pw.ICMO.FBillNo);
                                    }
                                    catch (Exception e)
                                    {
                                        uploaded.Add("Ошибка сохранения / изменения планового задания " + e.Message);
                                        SaveToDocLog(0, 0, "Ошибка сохранения / изменения планового задания " + e.Message, pp.QTY, 0, pp.WorkId, pp.WorkNumber);
                                    }
                                }
                              
                               
                                //Обновляем работы старшего мастера
                                try
                                {
                                    List<StarMehWorks> SW2 = new List<StarMehWorks>();
                                   SW2 =SW.Where(x => x.DateStart == pw.Date && x.WorkId == pw.WorkId && x.QTY != pw.QTY).ToList();
                                    foreach (var s in SW2)
                                    {
                                        decimal Bilo = s.QTY;
                                        s.QTY = pw.QTY;
                                        s.Prichina = Resources.Resource.IzmeneniyaVnesPlanovi + " " + DateTime.Now + " " + Prichina; 
                                
                                        try
                                        {
                                            db.Entry(s).State = EntityState.Modified;
                                            db.SaveChanges();
                                            SaveToPlanlog(s.Prichina, pw.WorkId, pw.WorkNumber, Bilo, pw.QTY, "Задание старшего мастера");
                                        }
                                        catch (Exception e)
                                        {
                                            SaveToDocLog(0, 0, "Ошибка сохранения / изменения задания старшего мастера" + e.Message, pw.QTY, 0, pw.ICMO.FInterID, pw.ICMO.FBillNo);
                                        }
                                    }

                                }
                                catch (Exception e)
                                {
                                    SaveToDocLog(0, 0, "Предупреждение нет заданий старшего мастера для изменения" + e.Message, pw.QTY, 0, pw.ICMO.FInterID, pw.ICMO.FBillNo);
                                }
                                //Обновляем задания на склад
                           /*    
                                try
                                {
                                    //Если создан заказ на склад
                                    List<StockWorks> Stock2 = new List<StockWorks>();
                                    PeremeshenieWorks WorksWay = new PeremeshenieWorks();

                                    try 
                                    {
                                       WorksWay = db.PeremeshenieWorks.Where(x => x.DepartmentId == pw.ICMO.FWorkShop).First();
                                    }
                                    catch
                                    {

                                    }

                                    try
                                    {
                                        Stock2 = StockWorks.Where(x => x.DateStart == pw.Date && x.WorkId == pw.WorkId).ToList();
                                    }
                                    catch
                                    {

                                    }
                                  
                                    if (Stock2.Count > 0)
                                    {
                                        foreach (var s in Stock2)
                                        {
                                            decimal Bilo = s.QTY;
                                            s.QTY = pw.QTY;
                                            s.Prichina = Prichina;
                                            s.StockId = 0;
                                            s.StockId = FindMainStockFromDepartment(pw.ICMO.FWorkShop.Value);
                                            
                                            try
                                            {
                                                db.Entry(s).State = EntityState.Modified;
                                                db.SaveChanges();
                                                SaveToPlanlog(s.Prichina, pw.WorkId, pw.WorkNumber, Bilo, pw.QTY, "Задание на склад");
                                                SaveToDocLog(0, 0, "Обновили задание на склад ", pw.QTY, s.StockId.Value, pw.WorkId, pw.ICMO.FBillNo);
                                            }
                                            catch (Exception ex)
                                            {
                                                SaveToDocLog(0, 0, "Ошибка не смогли изменить задания на склад " + ex.Message, pw.QTY, 0, pw.ICMO.FInterID, pw.ICMO.FBillNo);
                                            }
                                            foreach (var e in s.StockWorkEntrys)
                                            {
                                                try
                                                {

                                                    e.QTY = Math.Round(pw.QTY * e.Scrap, 3);
                                                    e.Prichina = Resources.Resource.IzmeneniyaVnesPlanovi+" "+DateTime.Now+" "+Prichina;
                                                    e.UserId = FindCurrentKDWUser().Id;
                                                    if (e.QTY <= e.QTYDept)
                                                    {
                                                        e.Complete = true;
                                                    }
                                                    db.Entry(e).State = EntityState.Modified;
                                                    db.SaveChanges();
                                                  
                                                }
                                                catch (Exception ex)
                                                {
                                                    SaveToDocLog(0, 0, "Ошибка не смогли изменить строку задания на склад " + ex.Message, pw.QTY, 0, pw.ICMO.FInterID, pw.ICMO.FBillNo);
                                                }
                                            }


                                        }
                                    }
                                    else
                                    {
                                        //Если еще не создан заказ на склад
                                        StockWorks StW = new StockWorks();
                                        StW.Complete = false;
                                        StW.DateStart = pw.Date.Value;
                                        StW.Prichina = "";
                                        StW.QTY = pw.QTY;
                                        StW.QTYFact = 0;
                                        StW.StockId = 0;
                                        StW.UserId = FindCurrentKDWUser().Id;
                                        StW.WorkId = pw.WorkId;
                                        StW.WorkNumber = pw.WorkNumber;
                                        StW.DateEnd = pw.Date.Value.AddDays(3);
                                        StW.StockId = FindMainStockFromDepartment(pw.ICMO.FWorkShop.Value);
                                        try
                                        {
                                            db.StockWorks.Add(StW);
                                            db.SaveChanges();

                                            try
                                            {
                                                List<PPBOMEntry> be = db.PPBOMEntry.Where(x => x.FICMOInterID == StW.WorkId).ToList();//.Include(x=>x.t_Item).Include(x=>x.t_Item.t_ICItem).ToList();
                                                foreach (var b in be)
                                                {
                                                    StockWorkEntrys SWE = new StockWorkEntrys();
                                                    SWE.Complete = false;
                                                    SWE.DateStart = pw.Date.Value;
                                                    SWE.DateEnd = pw.Date.Value.AddDays(3);
                                                    SWE.ItemId = b.FItemID;
                                                    SWE.Prichina = "";
                                                    SWE.QTY = Math.Round(pw.QTY * b.FQtyScrap,3);
                                                    SWE.QTYBufer = 0;
                                                    SWE.QTYStock = 0;
                                                    SWE.QTYDept = 0;
                                                    SWE.WorkId = pw.WorkId;
                                                    SWE.ToBufer = "";
                                                    SWE.SchemaDept = true;
                                                    SWE.SchemaStock = WorksWay.StockUchastka;
                                                    SWE.SchemaBufer = WorksWay.BuferZona;
                                                    SWE.Scrap = b.FQtyScrap;
                                                    SWE.StockWorkId = StW.Id;
                                                    SWE.UserId = FindCurrentKDWUser().Id;
                                                    SWE.ToStock = StW.StockId.Value;
                                                    try
                                                    {
                                                       // SWE.FromStock = b.t_Item.t_ICItem.First().FDefaultLoc.Value;
                                                    }
                                                    catch
                                                    {

                                                    }
                                                    try
                                                    {
                                                        db.StockWorkEntrys.Add(SWE);
                                                        db.SaveChanges();
                                                        SaveToDocLog(0, 0, "Добавили новое задание на склад "+ pw.Date.Value, pw.QTY, StW.StockId.Value, pw.WorkId, pw.ICMO.FBillNo);
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        SaveToDocLog(0, 0, "Ошибка добавления нового задания на склад " +ex.Message , pw.QTY, StW.StockId.Value, pw.WorkId, pw.ICMO.FBillNo);
                                                    }
                                                }
                                            }
                                            catch (Exception exx)
                                            {

                                            }


                                        }
                                        catch (Exception exxx)
                                        {

                                        }
                                    }

                                }
                                catch
                                {

                                }
                           */
                            }

                            catch (Exception e)
                            {
                                Console.WriteLine(e.Message);
                                errors.Add("Ошибка добавления! " + Error + e.Message+e.InnerException.Message);
                                SaveToDocLog(0, 0, "Ошибка добавления! " + pw.ICMO.FBillNo + e.Message+Error,0,0, pw.WorkId, pw.ICMO.FBillNo);
                            }
                           
                        }

                    }


                }
                EX:
                ViewBag.Errors = errors;
                ViewBag.Zagrugeno = uploaded;
              //  ViewBag.Counter = Counter;
                return View();
                }

            
            return View();
        }


        public JsonResult DeleteQRJson(int QRID)
        {
            bool Result = true;
            Result = DeleteQR(QRID);
            return Json(Result.ToString());
        }

        public bool DeleteQR(int QRID)
        {
            bool Result = true; 
            QRTable QR = new QRTable();
            InventQR IQR = new InventQR();
            InventSecondQR IQR2 = new InventSecondQR();
            Dvigenie Dvig = new Dvigenie();
            NomenklaturaPlace P = new NomenklaturaPlace();
            try
            {
                QR = db.QRTable.Where(x => x.Id == QRID).First();
                Dvig = db.Dvigenie.Where(x => x.QRID == QRID).OrderByDescending(x => x.Id).First();
                try
                {
                    P = db.NomenklaturaPlace.Where(x => x.DvigenieId == Dvig.Id).First();
                    db.Entry(P).State = EntityState.Deleted;
                    db.SaveChanges();
                }
                catch
                {

                }
                db.Entry(Dvig).State = EntityState.Deleted;
                db.Entry(QR).State = EntityState.Deleted;
                db.SaveChanges();
            }
            catch
            {
                return false;
            }

            try
            {
                IQR = db.InventQR.Where(x => x.QRId == QRID).First();
                db.Entry(IQR).State = EntityState.Deleted;
                db.SaveChanges();

            }
            catch
            {

            }

            try
            {
                IQR2 = db.InventSecondQR.Where(x => x.QRId == QRID).First();
                db.Entry(IQR2).State = EntityState.Deleted;
                db.SaveChanges();

            }
            catch
            {

            }


            return Result;
        }


        public JsonResult EditQRJson(int QRID, decimal QTY)
        {
            bool Result = true;
            Result = EditQR(QRID, QTY);
            return Json(Result.ToString());
        }
        //Меняет количество QTYFact в последнем движении QR
        public bool EditQR(int QRID, decimal QTY)
        {
            bool Result = true;

            InventQR IQR = new InventQR();
            Dvigenie Dvig = new Dvigenie();
            NomenklaturaPlace P = new NomenklaturaPlace();
            try
            {
             
                Dvig = db.Dvigenie.Where(x => x.QRID == QRID).OrderByDescending(x => x.Id).First();
                Dvig.QTYFact = QTY;
                Dvig.QTY = QTY;
                db.Entry(Dvig).State = EntityState.Modified;
          
                db.SaveChanges();
            }
            catch
            {
                return false;
            }

            return Result;
        }

        public List<t_Item> FindAllNomenklaturs()
        {
            List<t_Item> Result = new List<t_Item>();
            List<NomenklaturaEnterprise> NE = new List<NomenklaturaEnterprise>();
            if (Session["Nomenklaturs"] == null)
            {
                try
                {
                    Result = db.t_Item.Where(x => x.FItemClassID == 4).Include(x=>x.NomenklaturaEnterprise).ToList();

                }
                catch
                {

                }
                if (CultureRU())
                {
                    try
                    {
                     //   var Items = Result.Select(x => x.FItemID).ToList();
                      //  NE = db.NomenklaturaEnterprise.Where(x => Items.Contains(x.KingDeeId.Value)).ToList();

                        foreach (t_Item i in Result)
                        {

                           // if (CultureRU())
                          //  {
                                i.FName = PerevestiItem(i).FName;
                           /*     try
                                {
                                    i.FName = NE.Where(x => x.KingDeeId == i.FItemID).Select(x => x.RusName).First();
                                }
                                catch
                                {

                                }
                           */
                          //  }

                        }
                    }
                    catch
                    {

                    }

                }
                Session["Nomenklaturs"] = (List<t_Item>)Result;
                    }
            else
            {
               Result = (List<t_Item>)Session["Nomenklaturs"];
            }

          
                return Result;
        }

        public JsonResult SetKomplektovkaDepartment(int DepartmentId, bool Sbros = false)
        {

            if (DepartmentId != 0)
            {
                Session["KomplektovkaDepartmentId"] = (int) DepartmentId;
            }
            if (Sbros == true)
            {
                Session["KomplektovkaDepartmentId"] = 0;
            }
            return Json(DepartmentId);


        }

        public JsonResult SetKomplektovkaStock(int StockId)
        {

            if (StockId != 0)
            {
                Session["KomplektovkaStockId"] = (int)StockId;
            }
            return Json(StockId);


        }

        public JsonResult SetStockWorkPart(int Part)
        {

            if (Part != 0)
            {
                Session["StockWorkPart"] = (int) Part;
            }
            return Json(Part);


        }

        public JsonResult SWEtap1(string QRData, string QTY, int StockWorkId, int ToStockId)
        {
            PredNZP QR = new PredNZP();
            decimal QTYfact = 0;
          /*  try
            {
                
              QR =  db.PredNZP.Where(x => x.QRData == QRData).First();
                if (QR.Id!=0)
                {
                    return Json("Уже есть такой код!");
                }

            }
            catch
            {

            }
          */
            try
            {
                QTYfact = Convert.ToDecimal(QTY.Replace(",", "."));
            }
            catch
            {

            }

            if (QTYfact == 0)
            {
                return Json("Значение должно быть не нулевым!");
            }


            StockWorks W = new StockWorks();
            try
            {
                W = db.StockWorks.Where(x => x.Id == StockWorkId).Include(x=>x.StockWorkEntrys).First();
            }
            catch
            {

            }

            //ищем последнее движение
            ItemView I = new ItemView();
            I.FindLastDvig(QRData);

            if (QTYfact > I.LastDvig.QTYFact)
            {
                return Json("Нельзя переместить больше чем в QR коде!");
            }

            StockBufer SB = new StockBufer();
            try
            {
                SB = db.StockBufer.Where(x => x.StockId == ToStockId).First();
            }
            catch
            {

            }
            string Mesto = "";
            if (SB.Id!=0)
            {
                Mesto = SB.Yacheika;
            }
            //   string Result =  CHGSWE(QTYfact, I.LastDvig.Id, ToStockId, Mesto);
            int QRID = 0;
            int lvl = 0;
            int Parent = 0;
            bool PrintQR = false;
            int NewDvigId = 0;

            if (I.LastDvig.QTYFact<=0)
            {
                return Json("Нулевой QR код!");

            }

            if (QTYfact < I.LastDvig.QTYFact)
            {

                //генерим новый код родитель - этот
                lvl = SelectMaxLev(I.LastDvig.POOrderId, I.LastDvig.ItemID, I.LastDvig.ZakazPostavshiku);
                lvl++;
                QRID = SaveQR(I.LastDvig.Item, I.LastDvig.ZakazPostavshiku, I.LastDvig.POOrderId, lvl);
                EditDvigenie(I.LastDvig, I.LastDvig.QTYFact - QTYfact);
                Parent = I.LastDvig.Id;
                PrintQR = true;
            }
            else
            {
                QRID = I.LastDvig.QRID.Value;
                EditDvigenie(I.LastDvig, I.LastDvig.QTYFact - QTYfact);
                PrintQR = false;
            }




            //Сохраняем QR код
            //   string STQ = Item.FNumber + ";" + Item.FName + ";" + QTY + ";" + StockBill.FCheckDate.Value.ToString("dd.MM.yyyy") + ";" + CHG + ";" + FindRussianName(Item) + ";" + StockTo + ";";
            if (QRID != 0)
            {

                NewDvigId = SaveDvigenie(I.LastDvig.ZakazPostavshiku, "BUFER", QTYfact, I.LastDvig.ItemID, I.LastDvig.POOrderId, ToStockId, ToStockId, QRID, lvl, Parent, "", I.LastDvig.Mnimoe);

                AddStatusOTK(NewDvigId, FindLastStatusOTK(I.LastDvig.Id));
            }


            try
            {
                QR.ItemId = I.LastDvig.ItemID;
                QR.QRData = QRData;
                QR.QRId = QRID;
                QR.QTY = QTYfact;
                QR.StockId = ToStockId;
                QR.StockWorkId = StockWorkId;
                QR.WorkId = W.WorkId;
                QR.Etap = 1;
                db.PredNZP.Add(QR);


               StockWorkEntrys SWE = W.StockWorkEntrys.Where(x => x.ItemId == I.LastDvig.ItemID).First();
                SWE.QTYBufer += QTYfact;
                MestoPrikrutit(SB.Yacheika, NewDvigId, I.LastDvig.ItemID);

                db.Entry(SWE).State = EntityState.Modified;
                db.SaveChanges();
                
            }
            catch (Exception e)
            {
                return Json(e.Message);
            }



            return Json("Ok;"+QRID+";"+PrintQR.ToString());
        }

        public JsonResult SWEtap2(string QRData, string QTY, int StockWorkId, int ToStockId)
        {
            PredNZP QR = new PredNZP();
          

            ItemView I = new ItemView();
            I.FindLastDvig(QRData);


            int StockFromID = 0;
            int StockToID = 0;
            int ManagerID = 0;
            decimal Price = 0;

            int UserID = 0;

            StockWorkEntrys SWE = new StockWorkEntrys();
            StockWorks SW = new StockWorks();

            try
            {
                SW = db.StockWorks.Where(x => x.Id == StockWorkId).Include(x => x.StockWorkEntrys).Include(x => x.ICMO).First();
                SWE = SW.StockWorkEntrys.Where(x=>x.ItemId==I.LastDvig.ItemID).First();
              
            }
            catch
            {

            }

            try
            {
                ToStockId = db.DepartmentToStocks.Where(x => x.DepartmentId == SW.ICMO.FWorkShop.Value && x.Main).Select(x => x.StockId).First();
            }
            catch
            {
                return Json("У этого подразделения "+ SW.ICMO.FWorkShop.Value.ToString()+" нет склада участка! Поставьте галку в таблице DepartmentToStocks");
            }

            /*try
            {

                QR = db.PredNZP.Where(x => x.QRData == QRData).First();
                if (QR.Id != 0)
                {
                    return Json("Уже есть такой код!");
                }

            }
            catch
            {

            }
            */
            decimal QTYfact = 0;
            try
            {
                QTYfact = Convert.ToDecimal(QTY.Replace(",", "."));
            }
            catch
            {

            }

            if (QTYfact == 0)
            {
                return Json("Значение должно быть не нулевым!");
            }


            StockWorks W = new StockWorks();
            try
            {
                W = db.StockWorks.Where(x => x.Id == StockWorkId).Include(x => x.StockWorkEntrys).First();
            }
            catch
            {

            }

            //ищем последнее движение
          

            if (QTYfact > I.LastDvig.QTYFact)
            {
                return Json("Нельзя переместить больше чем в QR коде!");
            }

            StockBufer SB = new StockBufer();
            try
            {
                SB = db.StockBufer.Where(x => x.StockId == ToStockId).First();
            }
            catch
            {

            }

            if (QTYfact > I.LastDvig.QTYFact)
            {
                return Json("Нельзя переместить больше чем в QR коде!");
            }

            string Mesto = "";
            if (SB.Id != 0)
            {
                Mesto = SB.Yacheika;
            }

            if (I.LastDvig.QTYFact <= 0)
            {
                return Json("Нулевой QR код!");

            }


         /*   try
            {
                QR.ItemId = I.LastDvig.ItemID;
                QR.QRData = QRData;
                QR.QRId = I.LastDvig.QRID.Value;
                QR.QTY = QTYfact;
                QR.StockId = ToStockId;
                QR.StockWorkId = StockWorkId;
                QR.WorkId = W.WorkId;
                QR.Etap = 1;
                db.PredNZP.Add(QR);


                StockWorkEntrys SWEX = W.StockWorkEntrys.Where(x => x.ItemId == I.LastDvig.ItemID).First();
                SWEX.QTYStock += QTYfact;

                db.Entry(SWE).State = EntityState.Modified;
                db.SaveChanges();

            }
            catch (Exception e)
            {
                return Json(e.Message);
            }
         */

            //  t_Item Item = new t_Item();
            Dvigenie Dvig = new Dvigenie();
            decimal QTYnaSklade = 0;
            UsersKDW U = new UsersKDW();
            U = FindCurrentKDWUser();
            string User = U.t_Base_User.FName;
            Dvig = I.LastDvig;
            //Ищем менеджера в подразделении
            try
            {
                ManagerID = U.UserID;//db.DepartmentToStocks.Where(x => x.StockId == ToStockId && x.DepartmentId == SWE.StockWorks.ICMO.FWorkShop).Select(x => x.MolId).First();
            }
            catch
            {

            }


            try
            {
                StockFromID = Dvig.StockId;
                StockToID = ToStockId;//FindStockID(StockTo);
                                      // StockFromID = db.t_Stock.Where(x => x.FName.Equals(StockFrom)).Select(a => a.FItemID).First();
                                      //  StockToID = db.t_Stock.Where(x => x.FName.Equals(StockTo)).Select(a => a.FItemID).First();
                                      //  ManagerID = FindManagerID(Manager);
                UserID = U.UserID;//FindUserID(User);
                                  //  UserID = db.t_Item.Where(x => x.FItemClassID == 3 && x.FName.Equals(User)).Select(a => a.FItemID).First();
                                  //  Item = db.t_Item.Where(x => x.FItemID == Dvig.ItemID).Include(x => x.NomenklaturaEnterprise).First();
                                  //Item = SWE.Item;
                QTYnaSklade = QTYNaSklade(StockFromID, Dvig.ItemID);
                //   QTYnaSklade = Dvig.QTYFact;

            }
            catch (Exception e)
            {
                return Json(Resources.Resource.ZapolniteYellow);
            }



            if (Dvig.QTYFact < QTYfact)
            {
                return Json(Resources.Resource.VveliBolsheChemVZakaze);
            }

            if (QTYnaSklade < QTYfact)
            {
                return Json(Resources.Resource.QTYNaSkladeNedostatochno + " " + QTYnaSklade);
            }

            if (QTYfact == 0)
            {
                return Json(Resources.Resource.NomenklaturiNedostatochno);
            }


            //Ищем прайс
            Price = FindPrice(Dvig);

            var MaxNum = FindMaxNumStockBill();// db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();//Максимальный номер ICStockBill в таблице номеров
            //Плюсуем макс номер
            MaxNum++;
            var MaxNumTable = db.ICMaxNum.Where(x => x.FTableName == "ICStockBill").First();
            var MaxStockID = db.ICBillNo.Where(x => x.FBillID == 41).First();
            //MaxStockID.FCurNo.Value+=1
            int MaxStockId = MaxStockID.FCurNo.Value + 1;
            string CHG = "CHG" + DopolnitNumber(MaxStockId, 6);

            //   int userId = 16507;// TODO найти пользака текущего. Сделать модуль регистрации пользователей и сопоставить их с кинди


            //  MaxStockID = Convert.ToInt32(ZaprosOneZapis("SELECT FCurNo FROM[ICBillNo]  where FBillID = 1", true));

            //  select(FMaxNum + 1) FROM ICMaxNum where FTableName = 'ICStockBill'"
            var StockBill = new ICStockBill();//Создаем новое поступление на склад
            StockBill.FInterID = MaxNum;
            StockBill.FDate = DateTime.Now.Date;
            StockBill.FTranType = 41;
            StockBill.FBillNo = CHG;
            StockBill.FDeptID = 0; //Возможно можно перемещать на подразделение!!! 270 есть в таблице
            StockBill.FEmpID = 0;
            StockBill.FSupplyID = null;
            StockBill.FCheckerID = UserID;
            StockBill.FManagerID = U.MOLId;
            StockBill.FSManagerID = U.MOLId;//От кого
            StockBill.FBillerID = UserID;
            StockBill.FFManagerID = ManagerID;//Кому
            StockBill.FHookInterID = 0;//Неизвестно что за хук
            StockBill.FVchInterID = null;//При перемещении есть записи с указанным ID например 229
            StockBill.FPosted = 1;
            StockBill.FCheckSelect = 0;
            StockBill.FROB = 1;
            StockBill.FStatus = 1;
            StockBill.FUpStockWhenSave = false;
            StockBill.FCancellation = false;
            StockBill.FOrgBillInterID = 0;
            StockBill.FBillTypeID = 0;
            StockBill.FPOStyle = 252;
            StockBill.FBackFlushed = false;
            StockBill.FUUID = Guid.NewGuid();
            StockBill.FOperDate = BitConverter.GetBytes(DateTime.Now.Ticks);
            StockBill.FMarketingStyle = 12530;
            StockBill.FRefType = 12561;
            StockBill.FCheckDate = DateTime.Now;
            StockBill.FExplanation = "WEB " + U.Name;
            StockBill.FSelTranType = 1007105;// также может быть 85, 0, 1012510
            StockBill.FChildren = 0;
            StockBill.FHookStatus = 0;
            StockBill.FEnterpriseID = 0; //здесь можно связать ID с чем-нибудь
            StockBill.FISUpLoad = 1059;
            StockBill.FsourceType = 37521;
            StockBill.FPayCondition = 0;
            StockBill.FYearPeriod = DateTime.Now.ToString("yyyy-MM");
            StockBill.FPOMode = 0;
            StockBill.FBrNo = "0";
            StockBill.FFetchAdd = "";
            StockBill.FPOSName = "";
            StockBill.FConfirmMem = "";
            StockBill.FInvoiceStatus = "";
            StockBill.FHeadSelfA0143 = "KingDeeWeb";

            ICStockBillEntry Entry = new ICStockBillEntry();
            bool go = false;
            try
            {
                db.ICStockBill.Add(StockBill);
                db.SaveChanges();

                Entry.FInterID = MaxNum;

                MaxNumTable.FMaxNum = MaxNum;
                db.Entry(MaxNumTable).State = EntityState.Modified;
                db.SaveChanges();


                // MaxStockID.FCurNo++;
                MaxStockID.FDesc = "CHG+" + DopolnitNumber(MaxStockId, 6);
                MaxStockID.FCurNo = MaxStockId;
                db.Entry(MaxStockID).State = EntityState.Modified;
                db.SaveChanges();
                go = true;
            }
            catch (Exception e)
            {

            }



            //   string Result =  CHGSWE(QTYfact, I.LastDvig.Id, ToStockId, Mesto);
            int QRID = 0;
            int lvl = 0;
            int Parent = 0;
            bool PrintQR = false;
            int NewDvigId = 0;

            if (QTYfact < I.LastDvig.QTYFact)
            {

                //генерим новый код родитель - этот
                lvl = SelectMaxLev(I.LastDvig.POOrderId, I.LastDvig.ItemID, I.LastDvig.ZakazPostavshiku);
                lvl++;
                QRID = SaveQR(I.LastDvig.Item, I.LastDvig.ZakazPostavshiku, I.LastDvig.POOrderId, lvl);
                EditDvigenie(I.LastDvig, I.LastDvig.QTYFact - QTYfact);
                Parent = I.LastDvig.Id;
                PrintQR = true;
            }
            else
            {
                QRID = I.LastDvig.QRID.Value;
                EditDvigenie(I.LastDvig, I.LastDvig.QTYFact - QTYfact);
                PrintQR = false;
            }




            //Сохраняем QR код
            //   string STQ = Item.FNumber + ";" + Item.FName + ";" + QTY + ";" + StockBill.FCheckDate.Value.ToString("dd.MM.yyyy") + ";" + CHG + ";" + FindRussianName(Item) + ";" + StockTo + ";";
            if (QRID != 0)
            {

                NewDvigId = SaveDvigenie(I.LastDvig.ZakazPostavshiku, "BUFER", QTYfact, I.LastDvig.ItemID, I.LastDvig.POOrderId, ToStockId, ToStockId, QRID, lvl, Parent, "", I.LastDvig.Mnimoe);

                AddStatusOTK(NewDvigId, FindLastStatusOTK(I.LastDvig.Id));
            }


            try
            {
                QR.ItemId = I.LastDvig.ItemID;
                QR.QRData = QRData;
                QR.QRId = QRID;
                QR.QTY = QTYfact;
                QR.StockId = ToStockId;
                QR.StockWorkId = StockWorkId;
                QR.WorkId = W.WorkId;
                QR.Etap = 2;
                db.PredNZP.Add(QR);


                StockWorkEntrys SWEN = W.StockWorkEntrys.Where(x => x.ItemId == I.LastDvig.ItemID).First();
                SWEN.QTYStock += QTYfact;
                MestoPrikrutit(SB.Yacheika, NewDvigId, I.LastDvig.ItemID);

                db.Entry(SWEN).State = EntityState.Modified;
                db.SaveChanges();

            }
            catch (Exception e)
            {
                return Json(e.Message);
            }
            //Вычетаем количество из текущего движения
      


            decimal QTYFact = Dvig.QTYFact - QTYfact;
                EditDvigenie(Dvig, QTYFact);

                go = false;

                Entry.FBrNo = "0";

                Entry.FItemID = Dvig.ItemID;
                Entry.FQtyMust = 0;
                Entry.FAuxQtyMust = 0;
                Entry.FQty = QTYfact;
                Entry.FPrice = Price;
                Entry.FBatchNo = "";
                decimal Q = Convert.ToDecimal(QTYfact);
                decimal C = Convert.ToDecimal(Entry.FPrice);
                Entry.FAmount = Q * C;
                Entry.FEntryID = 1;//ToDo учесть если будет более 1 строки то номер строки должен меняться
                Entry.FNote = FindModelByItem(Dvig.ItemID);
                Entry.FUnitID = 259;//Непонятно что это
                Entry.FAuxPrice = Entry.FPrice;
                Entry.FPurchasePrice = I.Z.SelectedEntry.PurchasePrice; // Закупочная цена с налогом из заказа поставщику
            Entry.FPurchaseAmount = Q * Entry.FPurchasePrice; ;
                Entry.FAuxQty = QTYfact;
                Entry.FPriceRef = Entry.FPrice;
                Entry.FAuxPriceRef = Entry.FAuxPrice;
                Entry.FAmtRef = Q * C;
                Entry.FSourceBillNo = "";
                Entry.FSCStockID = StockFromID;//откуда
                Entry.FDCStockID = StockToID;//куда
                Entry.FSourceInterId = 0;
                Entry.FOrderBillNo = "";
                Entry.FOrderInterID = 0;
                Entry.FOrderEntryID = 0;
                Entry.FMapNumber = QR.Id.ToString();//Сюда сохраняем QR Id



                Entry.FContractBillNo = "";
                Entry.FICMOBillNo = "";
                Entry.FMTONo = "";
                Entry.FItemSize = "";
                Entry.FItemSuite = "";
                Entry.FPositionNo = "";
                Entry.FSEOutBillNo = "";
                Entry.FConfirmMemEntry = "";
                Entry.FItemStatementBillNO = "";
                Entry.FReturnNoticeBillNO = "";
                Entry.FSplitState = "";



                try
                {
                    db.ICStockBillEntry.Add(Entry);
                    db.SaveChanges();


                    //Сохраняем движение 


                    go = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(" Не смогли добавить строку " + ex.Message);
                }
            

            if (go)
            {
                go = PeremeshenieNaSklad(MaxNum,StockFromID, Dvig.ItemID, QTYFact, false);//Минусуем на склад
                if (go)
                {
                    go = PeremeshenieNaSklad(MaxNum,StockToID, Dvig.ItemID, QTYFact, true);//Плюсуем на склад
                }
               // Message = Resources.Resource.Error;

                // MestoPrikrutit(Mesto, NewDvigId, Item.FItemID); //Прикручиваем место к движению если оно указано


            }





            /*  try
              {

                QR =  db.PredNZP.Where(x => x.QRData == QRData).First();
                  if (QR.Id!=0)
                  {
                      return Json("Уже есть такой код!");
                  }

              }
              catch
              {

              }
            */
        

          

         



            return Json("Ok;" + QRID + ";" + PrintQR.ToString());
        }

        public JsonResult SWEtap3(string QRData, string QTY, int StockWorkId, int WorkId)
        {
            string Result = "";
            ItemView I = new ItemView();
            decimal SumQty = 0;
            decimal NeedQty = 0;
            decimal OstalosQty = 0;
            bool Naideno = false;
            UsersKDW U = CurrentKDWUserModel();
            int ManagerId = U.MOLId;// FindUserID(FindCurrentUser());
            int UserId = U.UserID; //FindUserID(FindCurrentUser());

            //KomplektovkaView KW = LoadKomplektovka();
           
            decimal QTYfact = 0;
            try
            {
                QTYfact = Convert.ToDecimal(QTY.Replace(",", "."));
            }
            catch
            {

            }

            if (QTYfact == 0)
            {
                return Json("Значение должно быть не нулевым!");
            }


            NZP nzp = new NZP();
            try
            {
                I = QRTrace(QRData); //FindLastDvigs(QRData);// 
            }
            catch
            {

            }
            /*  try
              {
                  // ищем есть ли такой же нзп
                  nzp = KW.NZPs.Where(x => x.DvigenieId == I.LastDvig.Id).First();
                  Naideno = true;
              }
              catch (Exception e)
              {

              }
            */

            StockWorkEntrys SWE = new StockWorkEntrys();
            StockWorks SW = new StockWorks();

            try
            {
                SW = db.StockWorks.Where(x => x.WorkId == StockWorkId).Include(x => x.StockWorkEntrys).Include(x => x.ICMO).Include(x=>x.ICMO.PPBOMEntry).First();
                SWE = SW.StockWorkEntrys.Where(x => x.ItemId == I.LastDvig.ItemID).First();

            }
            catch
            {

            }
            SaveToDocLog(I.LastDvig.Id,I.LastDvig.ItemID,"Начато перемещение в производство количество строка="+QTY ,QTYfact,0,WorkId,"Пока не создан");
            if (nzp == null || nzp.Id == 0)
            {
                //Если такого нзп не найдено
                nzp.Active = true;
                nzp.DepartmentId = SW.ICMO.FWorkShop.Value;
                nzp.DatePostupleniya = DateTime.Now.Date;
                nzp.StarWorkId = 0;
                nzp.WorkId = SW.WorkId;
                nzp.SOUTId = null;

            }

            /*
            if (Session["KOMPLEKTOVKA"]!=null)
            {
                nzp = (NZP)Session["KOMPLEKTOVKA"];
            }
       */
            nzp.StockId = I.LastDvig.StockId;
            nzp.POOrderId = I.LastDvig.POOrderId;
            nzp.ItemId = I.Item.FItemID;
            nzp.DvigenieId = I.LastDvig.Id;

            //Ищем уже полученное кол-во по итемам
            try
            {
                SumQty = SW.ICMO.PPBOMEntry.Where(x => x.FItemID == nzp.ItemId).Select(x => x.FQtyMust - x.FWIPQTY.Value).First();//KW.NZPs.Where(x => x.WorkId == nzp.WorkId && x.ItemId == nzp.ItemId).Sum(x => x.QTY);// db.NZP.Where(x => x.WorkId == nzp.WorkId && x.ItemId == nzp.ItemId).Sum(x => x.QTY);
            }
            catch (Exception e)
            {
                SaveToDocLog(I.LastDvig.Id, I.LastDvig.ItemID, "Ошибка не нашли кол-во в БОМЕ", QTYfact, 0, WorkId, "Пока не создан");

            }

            if (SumQty < QTYfact)
            {
                SaveToDocLog(I.LastDvig.Id, I.LastDvig.ItemID, "Возврат в НЗП требуется не более чем " + SumQty, QTYfact, 0, WorkId, "Пока не создан");
                return Json("В НЗП требуется не более чем " + SumQty);
            }

            PredNZP QR = new PredNZP();
            try
            {
                QR.ItemId = I.LastDvig.ItemID;
                QR.QRData = QRData;
                QR.QRId = I.LastDvig.QRID.Value;
                QR.QTY = QTYfact;
                QR.StockId = 0;
                QR.StockWorkId = 0;
                QR.WorkId = WorkId;
                QR.Etap = 3;
                db.PredNZP.Add(QR);
                SaveToDocLog(I.LastDvig.Id, I.LastDvig.ItemID, "Сохранили пред НЗП на всякий случай" + QTY, QTYfact, 0, WorkId, "Пока не создан");
                StockWorks W = new StockWorks();
                try
                {
                    W = db.StockWorks.Where(x => x.WorkId == StockWorkId).Include(x => x.StockWorkEntrys).First();
                }
                catch
                {

                }

              //  SWEX.QTYDept += QTYfact;

                StockWorkEntrys SWEX = W.StockWorkEntrys.Where(x => x.ItemId == I.LastDvig.ItemID).First();
                SWEX.QTYDept += QTYfact;

                db.Entry(SWEX).State = EntityState.Modified;
                db.SaveChanges();
                SaveToDocLog(I.LastDvig.Id, I.LastDvig.ItemID, "Добавили количество в задание на перемещение в НЗП" + QTY, QTYfact, 0, WorkId, "Пока не создан");
            }
            catch (Exception e)
            {
                return Json(e.Message);
            }


          
            /*
            try
            {
                NeedQty = SW.ICMO.PPBOMEntry.Where(x => x.FItemID == nzp.ItemId).Select(x => x.FQtyMust).First();//db.PPBOMEntry.Where(x => x.FICMOInterID == nzp.WorkId && x.FItemID == nzp.ItemId).Select(x => x.FAuxQtyMust).First();
                /*   if (NeedQty>QTYFact)
                       {
                           NeedQty = QTYFact+SumQty;

                       }
                
            }
            catch (Exception e)
            {

            }

            if (NeedQty == 0)
            {
                return Json("Данной номенклатуры не нужно.");
            }
*/
            //  OstalosQty = NeedQty - SumQty;
            string Data = "";
            //  if (OstalosQty>0)
            // {
            decimal OstatokVDvigenii = 0;

            if (I.LastDvig.QTYFact >= QTYfact)
            {
                nzp.QTY += QTYfact;



                Data = SOUTfromQR(I.LastDvig.Id, SW.WorkId, ManagerId, UserId, SW.ICMO.FWorkShop.Value, QTYfact, 0);
                string[] S = Data.Split(';');
                nzp.SOUTId = Convert.ToInt32(S[0]);
                if (S[1].Equals("True"))
                {
                    Result = "True;" + S[2];

                }
                else
                {
                    Result = "False;" + S[2];
                }
                nzp.DvigenieId = Convert.ToInt32(S[3]);
                OstatokVDvigenii = I.LastDvig.QTYFact - QTYfact;
                OstalosQty = 0;

            }
            else
            {
                return Json("В QR коде нет такого количества!");
            }
            /*
            else
            {
                if (I.LastDvig.QTYFact>0)
                {
                    nzp.QTY +=  I.LastDvig.QTYFact;
                    OstatokVDvigenii =  0;
                    OstalosQty -= I.LastDvig.QTYFact;
                   // nzp.SOUTId = 0;
                    Data = SOUTfromQR(I.LastDvig.Id, KW.WorkId, ManagerId, UserId, KW.DepartmentId, I.LastDvig.QTYFact, 0);
                    string[] S = Data.Split(';');
                    nzp.SOUTId = Convert.ToInt32(S[0]);
                    //MaxNum.FMaxNum.Value+";"+PrintQR.ToString()+";"+QRID+";"+DvigId;
                    if (S[1].Equals("True"))
                    {
                        Result = "True;" + S[2];

                    }
                    else
                    {
                        Result = "False;" + S[2];
                    }
                    nzp.DvigenieId = Convert.ToInt32(S[3]);
                }
                else
                {
                    return Json(Resources.Resource.NetNaSklade);
                }
            }
*/
            try
            {
                if (!Naideno)
                {
                    using (var db2 = new KingDeeDB())
                    {
                        try
                        {
                            db2.NZP.Add(nzp);
                            db2.SaveChanges();
                        }
                        catch (Exception e)
                        {

                        }
                    }
                }
                else
                {
                    using (var db2 = new KingDeeDB())
                    {
                        try
                        {
                            db2.Entry(nzp).State = EntityState.Modified;
                            db2.SaveChanges();
                        }
                        catch
                        {

                        }
                    }
                }

                // EditDvigenie(I.LastDvig, OstatokVDvigenii);
                Result += ";" + nzp.QTY.ToString();
               // KW.ObnovitNZP();//Обновляем список НЗП после добавления

            }
            catch (Exception e)
            {
                Result = e.Message;
            }


            //   }



            return Json(Result);
        }


        [Culture]
        public ActionResult KomplektovkaNZPNEW()
        {
            ViewBag.DefaultStockId = 13689;
  
            if (Session["KomplektovkaStockId"] != null)
            {
                ViewBag.DefaultStockId = (int)Session["KomplektovkaStockId"];
            }

            ViewBag.DefaultDepartmentId = 0;
            if (Session["KomplektovkaDepartmentId"] != null)
            {
                ViewBag.DefaultDepartmentId = (int)Session["KomplektovkaDepartmentId"];
            }

       

          //  FindAllNomenklaturs();
            CurrentKDWUserModel();


            ViewBag.Stocks = SearchStorages("", true, true, false, false);
            ViewBag.QR = FindCurrentDvigenieNEW();
            ViewBag.Departments = SearchAllDepartments(true);
            return View();
        }


        public WorkView FindWorkFast(int WorkId = 0, int ItemId = 0, bool Fast = false)
        {

            DvigenieNEW Dvig = new DvigenieNEW();
            if (ItemId == 0)
            {
                Dvig = FindCurrentDvigenieNEW();
            }
            else
            {
                Dvig.Id = 1;
                Dvig.ItemID = ItemId;
            }
            WorkView W = new WorkView();
            DateTime D = DateTime.Now;
          
               
               
                try
                {
                    if (WorkId > 0)
                    {
                        W.WORK = db.ICMO.Where(x => x.FInterID == WorkId).Include(x => x.t_Department).Include(x => x.t_Item).First();
                    }
                    else
                    {
                    //  W.WORK = db.ICMO.Where(x => x.FBillNo.Equals(WorkNumber)).Include(x => x.t_Department).Include(x => x.t_Item).First();
                    return null;
                    }

                    W.Item = PerevestiItem(W.WORK.t_Item);
                    W.BOM = db.PPBOM.Where(x => x.FICMOInterID == W.WORK.FInterID).First();
                    W.BE = db.PPBOMEntry.Where(x => x.FICMOInterID == W.WORK.FInterID && x.FQtyMust > 0).Include(x => x.t_Item).Include(x => x.t_Item.NomenklaturaEnterprise).ToList();
                    try
                    {
                        //Ищем НЗП
                        W.NZPs = db.NZPNEW.Where(x => x.WorkId == W.WORK.FInterID).ToList();
                    }
                    catch
                    {

                    }

                    try
                    {
                        //Собираем все склады где хранятся необходимые номенклатуры (отключено для ускорения)
                        if (!Fast)
                        {
                            List<int> ItemsIds = W.BE.Select(x => x.FItemID).ToList();
                            W.Inventory = db.ICInventory.Where(x => ItemsIds.Contains(x.FItemID) && x.FQty > 0).Include(x => x.t_Stock).ToList();
                        }
                    }
                    catch
                    {

                    }
                    if (!Fast)
                    {
                        try
                        {
                            //Собираем все документы выпуска 

                            W.CINs = db.ICStockBillEntry.Where(x => x.FICMOInterID == W.WORK.FInterID).Include(x => x.ICStockBill).Where(x => x.ICStockBill.FTranType == 2).ToList();
                        }
                        catch
                        {

                        }

                        try
                        {
                            //Собираем все документы выпуска 

                            W.SOUTS = db.ICStockBillEntry.Where(x => x.FICMOInterID == W.WORK.FInterID).Include(x => x.ICStockBill).Where(x => x.ICStockBill.FTranType == 24).ToList();
                        }
                        catch
                        {

                        }
                    }


                    try
                    {
                        //Собираем все документы выпуска за сегодня

                        W.SMWorks = db.StarMehWorks.Where(x => x.WorkId == W.WORK.FInterID && x.DateStart >= D.Date).ToList();

                    }
                    catch
                    {

                    }



                    foreach (PPBOMEntry be in W.BE)
                    {
                        if (Dvig.Id > 0 && be.t_Item.FNumber.Equals(Dvig.ItemNumber) == false)
                        {
                            //Если отсканирован код и не совпала номенклатура
                            continue;
                        }

                        BomEntry BOME = new BomEntry();
                        BOME.Item = PerevestiItem(be.t_Item);
                        BOME.NZPQty = W.NZPs.Where(x => x.ItemId == be.FItemID).Sum(x => x.QTYFact);
                        BOME.QTYMAXWork = Math.Round(W.WORK.FQty * be.FQtyScrap, 3); // требуется в работу максимум
                        BOME.QTYNeedWork = Math.Round((W.WORK.FQty - W.WORK.FCommitQty) * be.FQtyScrap, 3); // требуется в работу остаток
                        BOME.QTYScrap = be.FQtyScrap; // требуется в работу остаток
                        BOME.CINQty = Math.Round(W.CINs.Sum(x => x.FCommitQty) * be.FQtyScrap, 3); // сегодня выпущено * на расход
                        BOME.QTYFact = BOME.CINQty + be.FWIPQTY.Value; //Сколько есть сегодня
                        BOME.QTYOstalosWork = Math.Round(BOME.QTYNeedWork - BOME.QTYFact, 3);
                        BOME.MognoVipustit = Convert.ToInt32(Math.Round(be.FWIPQTY.Value, 0));
                        if (W.SMWorks.Count == 0)
                        {
                            if (!Fast)
                            {
                                BOME.QTYOstalosToday = W.CINs.Sum(x => x.FQty) * be.FQtyScrap - W.SOUTS.Where(x => x.FItemID == be.FItemID).Sum(x => x.FQty);
                                BOME.QTYNeedToday = BOME.QTYOstalosToday;
                            }
                            else
                            {
                                BOME.QTYOstalosToday = BOME.QTYNeedWork - be.FWIPQTY.Value;
                                BOME.QTYNeedToday = BOME.QTYOstalosToday;
                            }
                            BOME.NugnoVipustitSegodnya = Convert.ToInt32(Math.Round(W.WORK.FQty - W.WORK.FCommitQty, 0));
                        }
                        else
                        {
                            if (!Fast)
                            {
                                BOME.QTYNeedToday = Math.Round((W.SMWorks.Sum(x => x.QTY) * be.FQtyScrap), 3);
                                BOME.QTYOstalosToday = Math.Round((W.SMWorks.Sum(x => x.QTY) * be.FQtyScrap) - BOME.QTYFact, 3); // Сколько задано по работам старших мастеров - сколько выполнено сегодня и - сколько есть в НЗП
                            }
                            else
                            {
                                BOME.QTYOstalosToday = BOME.QTYNeedWork - be.FWIPQTY.Value;
                                BOME.QTYNeedToday = BOME.QTYOstalosToday;
                            }

                            BOME.NugnoVipustitSegodnya = Convert.ToInt32(Math.Round((W.SMWorks.Sum(x => x.QTY)), 0));
                        }


                        BOME.VipushenoSegodnya = Convert.ToInt32(Math.Round(W.CINs.Sum(x => x.FCommitQty), 0));
                        BOME.VipushenoVsego = Convert.ToInt32(Math.Round(W.WORK.FCommitQty, 0));


                        try
                        {
                            BOME.Inventorys = W.Inventory.Where(x => x.FItemID == be.FItemID).ToList(); // складские записи
                        }
                        catch
                        {

                        }
                        try
                        {
                            BOME.NZPs = W.NZPs.Where(x => x.ItemId == be.FItemID).ToList(); // все QR кодды по данной номекнклатуре
                        }
                        catch
                        {

                        }
                        if (BOME.QTYNeedToday > 0)
                        {
                            W.BOMEntrys.Add(BOME);
                        }
                    }
                }
                catch
                {

                }
            
            return W;
        }


        public WorkView FindWork(string WorkNumber = "", int ItemId = 0, bool Fast =false)
        {

            DvigenieNEW Dvig = new DvigenieNEW();
            if (ItemId == 0)
            {
               Dvig = FindCurrentDvigenieNEW();
            }
            else
            {
                Dvig.Id = 1;
                Dvig.ItemID = ItemId;
            }
            WorkView W = new WorkView();
            DateTime D = DateTime.Now;
            if (WorkNumber.Length > 0)
            {
                int WorkId = 0;
                try
                {
                    WorkId = Convert.ToInt32(WorkNumber);
                }
                catch
                {

                }
                try
                {
                    if (WorkId>0)
                    {
                        W.WORK = db.ICMO.Where(x => x.FInterID == WorkId).Include(x => x.t_Department).Include(x => x.t_Item).First();
                    }
                    else
                    {
                        W.WORK = db.ICMO.Where(x => x.FBillNo.Equals(WorkNumber)).Include(x => x.t_Department).Include(x => x.t_Item).First();
                    }
                   
                    W.Item = PerevestiItem(W.WORK.t_Item);
                    W.BOM = db.PPBOM.Where(x => x.FICMOInterID == W.WORK.FInterID).First();
                    W.BE = db.PPBOMEntry.Where(x => x.FICMOInterID == W.WORK.FInterID&&x.FQtyMust>0).Include(x=>x.t_Item).Include(x=>x.t_Item.NomenklaturaEnterprise).ToList();
                    try
                    {
                        //Ищем НЗП
                        W.NZPs = db.NZPNEW.Where(x => x.WorkId == W.WORK.FInterID).ToList();
                    }
                    catch
                    {

                    }

                    try
                    {
                        //Собираем все склады где хранятся необходимые номенклатуры (отключено для ускорения)
                        if (!Fast)
                        {
                            List<int> ItemsIds = W.BE.Select(x => x.FItemID).ToList();
                            W.Inventory = db.ICInventory.Where(x => ItemsIds.Contains(x.FItemID) && x.FQty > 0).Include(x => x.t_Stock).ToList();
                        }
                    }
                    catch
                    {

                    }
                    if (!Fast)
                    {
                        try
                        {
                            //Собираем все документы выпуска 

                            W.CINs = db.ICStockBillEntry.Where(x => x.FICMOInterID == W.WORK.FInterID).Include(x => x.ICStockBill).Where(x => x.ICStockBill.FTranType == 2).ToList();
                        }
                        catch
                        {

                        }

                        try
                        {
                            //Собираем все документы выпуска 

                            W.SOUTS = db.ICStockBillEntry.Where(x => x.FICMOInterID == W.WORK.FInterID).Include(x => x.ICStockBill).Where(x => x.ICStockBill.FTranType == 24).ToList();
                        }
                        catch
                        {

                        }
                    }


                    try
                    {
                        //Собираем все документы выпуска за сегодня

                        W.SMWorks = db.StarMehWorks.Where(x => x.WorkId == W.WORK.FInterID&& x.DateStart >= D.Date).ToList();
                    
                    }
                    catch
                    {

                    }
                 


                        foreach (PPBOMEntry be in W.BE)
                    {
                        if (Dvig.Id>0&&be.t_Item.FNumber.Equals(Dvig.ItemNumber)==false)
                        {
                            //Если отсканирован код и не совпала номенклатура
                            continue;
                        }
                        
                        BomEntry BOME = new BomEntry();
                        BOME.Item = PerevestiItem(be.t_Item);
                        BOME.NZPQty = W.NZPs.Where(x => x.ItemId == be.FItemID).Sum(x => x.QTYFact);
                        BOME.QTYMAXWork = Math.Round(W.WORK.FQty * be.FQtyScrap, 3); // требуется в работу максимум
                        BOME.QTYNeedWork = Math.Round((W.WORK.FQty - W.WORK.FCommitQty) * be.FQtyScrap, 3); // требуется в работу остаток
                        BOME.QTYScrap = be.FQtyScrap; // требуется в работу остаток
                        BOME.CINQty = Math.Round(W.CINs.Sum(x=>x.FCommitQty)  * be.FQtyScrap, 3); // сегодня выпущено * на расход
                        BOME.QTYFact = BOME.CINQty + be.FWIPQTY.Value; //Сколько есть сегодня
                        BOME.QTYOstalosWork = Math.Round(BOME.QTYNeedWork - BOME.QTYFact, 3);
                        BOME.MognoVipustit = Convert.ToInt32(Math.Round(be.FWIPQTY.Value, 0));
                        if (W.SMWorks.Count == 0)
                        {
                            if (!Fast)
                            {
                                BOME.QTYOstalosToday = W.CINs.Sum(x => x.FQty) * be.FQtyScrap - W.SOUTS.Where(x => x.FItemID == be.FItemID).Sum(x => x.FQty);
                                BOME.QTYNeedToday = BOME.QTYOstalosToday;
                            }
                            else
                            {
                                BOME.QTYOstalosToday = BOME.QTYNeedWork - be.FWIPQTY.Value;
                                BOME.QTYNeedToday = BOME.QTYOstalosToday;
                            }
                            BOME.NugnoVipustitSegodnya = Convert.ToInt32(Math.Round(W.WORK.FQty - W.WORK.FCommitQty,0));
                        }
                        else
                        {
                            if (!Fast)
                            {
                                BOME.QTYNeedToday = Math.Round((W.SMWorks.Sum(x => x.QTY) * be.FQtyScrap), 3);
                                BOME.QTYOstalosToday = Math.Round((W.SMWorks.Sum(x => x.QTY) * be.FQtyScrap) - BOME.QTYFact, 3); // Сколько задано по работам старших мастеров - сколько выполнено сегодня и - сколько есть в НЗП
                            }
                            else
                            {
                                BOME.QTYOstalosToday = BOME.QTYNeedWork - be.FWIPQTY.Value;
                                BOME.QTYNeedToday = BOME.QTYOstalosToday;
                            }

                                BOME.NugnoVipustitSegodnya = Convert.ToInt32(Math.Round((W.SMWorks.Sum(x => x.QTY)), 0));
                        }
                      
                      
                        BOME.VipushenoSegodnya = Convert.ToInt32(Math.Round(W.CINs.Sum(x => x.FCommitQty),0));
                        BOME.VipushenoVsego = Convert.ToInt32(Math.Round(W.WORK.FCommitQty,0));
                        
                       
                        try
                        {
                            BOME.Inventorys = W.Inventory.Where(x => x.FItemID == be.FItemID).ToList(); // складские записи
                        }
                        catch
                        {

                        }
                        try
                        {
                            BOME.NZPs = W.NZPs.Where(x => x.ItemId == be.FItemID).ToList(); // все QR кодды по данной номекнклатуре
                        }
                        catch
                        {

                        }
                        if (BOME.QTYNeedToday > 0)
                        {
                            W.BOMEntrys.Add(BOME);
                        }
                    }
                }
                catch
                {

                }
            }
            return W;
        }

        public ItemView FindCurrentDvigenie()
        {
            ItemView D = new ItemView();
            if (Session["ItemView"] != null)
            {
                D = (ItemView)Session["ItemView"];
            }
            else
            {

            }
            return D;
        }

        public DvigenieNEW FindCurrentDvigenieNEW()
        {
            DvigenieNEW D = new DvigenieNEW();
           if ( Session["DvigenieNEW"]!= null)
            {
                D = (DvigenieNEW)Session["DvigenieNEW"];
            }
           else
            {
                
            }
            return D;
        }

        public JsonResult RemoveDvigenieNEW()
        {
            DvigenieNEW D = new DvigenieNEW();
            Session["DvigenieNEW"] = null;
            
            return Json("Ok");
        }

        [Culture]
        public ActionResult KomplektovkaNZPNEWEntries(string PartNumber = "", string WorkNumber = "", bool AllWorks = false)
        {
            int StockId = 0;
            int DepartmentId = 0;
            DateTime D = DateTime.Now.Date;
            List<int> PW = new List<int>();
            List<WorkView> W = new List<WorkView>();
            bool WorkFinded = false;
            List<PPBOMEntry> Entries = new List<PPBOMEntry>();
            List<ICInventory> Stocks = new List<ICInventory>();
            List<int> WORKS = new List<int>();
            //  List<t_Item> Nomenklaturs = FindAllNomenklaturs();

            //Обнуляем сессию большого кода
            Session["BIGQR"] = null;
            
              
            int Count = 50;
            int ItemId = 0;
            List<int> Items = new List<int>();
            if (Session["KomplektovkaStockId"] != null)
            {
                StockId = (int)Session["KomplektovkaStockId"];
            }
            if (Session["KomplektovkaDepartmentId"] != null)
            {
                DepartmentId = (int)Session["KomplektovkaDepartmentId"];
            }

          ViewBag.QR=  FindCurrentDvigenieNEW();

            if (WorkNumber.Equals("")==false)
            try
            {
                   WORKS = db.ICMO.Where(x => x.FBillNo.Contains(WorkNumber)).Select(x=>x.FInterID).ToList();
                    WorkFinded = true;
            }
            catch
            {

            }

            //Находим где лежит номенклатура
            try
            {
               if (PartNumber.Equals("")==false)
                {
                  ItemId = db.t_Item.Where(x => x.FNumber.Equals(PartNumber)).First().FItemID;
                }
            }
            catch
            {

            }

        /* //Поиск наличия на складах
            try
            {
                if (StockId != 0)
                {
                    Stocks = db.ICInventory.Where(x => x.FStockID == StockId && x.FQty > 0).ToList();
                }
            }
            catch
            {

            }

           
            if (StockId != 0)
            {
                Stocks = db.ICInventory.Where(x => x.FStockID == StockId && x.FQty > 0 && Items.Contains(x.FItemID)).ToList();
              //  W.Inventory = Stocks;
            }
        */
            List<int> WorksId = new List<int>();
            List<StarMehWorks> SMW = new List<StarMehWorks>();
            if (DepartmentId > 0)
            {
                try
                {
                    if (!AllWorks)
                    {
                        if (ItemId > 0)
                        {
                            //Если задана номенклатура то только её выбираем
                            SMW = db.StarMehWorks.Where(x => x.DateStart >= D && x.QTYFact < x.QTY).Include(x => x.ICMO).Include(x => x.ICMO.PPBOMEntry).Where(x => x.ICMO.FWorkShop == DepartmentId && x.ICMO != null&&x.ICMO.PPBOMEntry.Where(y => y.FItemID == ItemId).Count()>0).ToList(); //

                        }
                        else
                        {
                            //Если выбрано задание и не указана номенклатура
                            SMW = db.StarMehWorks.Where(x => x.DateStart >= D && x.QTYFact < x.QTY).Include(x => x.ICMO).Include(x => x.ICMO.PPBOMEntry).Where(x => x.ICMO.FWorkShop == DepartmentId && x.ICMO != null).ToList(); //

                        }
                    }
                    else
                    {
                        List<int> Works = db.PPBOMEntry.Where(x => x.FWIPQTY < -1).Select(x => x.FICMOInterID).ToList();
                        List<ICMO> WW = new List<ICMO>();
                         if (ItemId>0)
                        {
                            //Если задана номенклатура то только её выбираем
                            WW = db.ICMO.Where(x => Works.Contains(x.FInterID) && x.FWorkShop == DepartmentId).Include(x => x.PPBOMEntry).Where(x=>x.PPBOMEntry.Where(y => y.FItemID == ItemId).Count() > 0).ToList();
                            
                        }
                        else
                        {
                            //Если выбрано задание и не указана номенклатура
                            WW = db.ICMO.Where(x => Works.Contains(x.FInterID) && x.FWorkShop == DepartmentId).Include(x => x.PPBOMEntry).ToList();//.Include(x => x.PPBOMEntry)

                        }
                        foreach (var w in WW)
                        {
                            StarMehWorks SW = new StarMehWorks();
                            SW.DateStart = DateTime.Now.Date;
                            SW.Complete = false;
                            SW.ICMO = w;
                            SW.PlanoviWorkId = 1;
                            SW.PlanshetId = 17;
                            SW.Prichina = "Генерированная работа ее нет в базе";
                            SW.QTY = 0;
                            SW.WorkId = w.FInterID;
                            SW.QTYFact = w.FCommitQty;
                            SW.QTY = w.FQty;
                            SMW.Add(SW);
                        }

                    }
                }
                catch
                {

                }
            }
            else
            {
                return View(W);
                /*
                try
                {
                    SMW = db.StarMehWorks.Where(x => x.DateStart >= D && x.QTYFact < x.QTY).Include(x => x.ICMO).Where(x=>x.ICMO!=null).Include(x => x.ICMO.PPBOMEntry).ToList();

                }
                catch
                {

                }
                */
            }
            if (ItemId>0)
            {
               SMW = SMW.Where(x => x.ICMO.PPBOMEntry.Where(y => y.FItemID == ItemId).Count() > 0).ToList();
            }

            try
            {
                WorksId = SMW.Select(x => x.ICMO.FInterID).Distinct().ToList();
            }
            catch
            {

            }
            if (WORKS!=null&&WORKS.Count>0)
            {
                WorksId = WORKS.Where(x => WorksId.Contains(x)).ToList();
            }

            foreach (var s in WorksId)
            {
                try
                {
                    var WWW = FindBOMSFromWork(s, ItemId, true, true, "Индивидуальная комплектовка NEWQR");
                   // var WW = FindWorkFast(s, 0, true);
                    if (WWW != null&&WWW.Count>0)
                    {
                        WorkView CW = new WorkView();
                        CW.WORK = db.ICMO.Where(x => x.FInterID == s).First();
                        CW.BOMEntrys = WWW;
                        W.Add(CW);
                    }
                }
                catch
                {

                }
            }
      

            /* foreach (StockWorks W in SW)
             {
                 foreach (PPBOMEntry E in Entries.Where(x=>x.FICMOInterID==W.WorkId).ToList())
                 {
                     E.FQtyMust = 0;
                     try
                     {
                         E.FQtyMust =  Math.Round(E.FQtyScrap * W.QTY,3);
                         if (E.FQtyMust<0)
                         {
                             E.FQtyMust = 0;
                         }



                     }
                     catch
                     {

                     }

                     E.FStockQty = 0;
                     try
                     {

                         E.FStockQty = Stocks.Where(x => x.FItemID == E.FItemID).Sum(x => x.FQty);
                     }
                     catch
                     {

                     }
                 }
             }
            */
            // ViewBag.Stocks = SearchStorages();
            //   ViewBag.Prohod = Prohod;
            if (Session["Count"] != null)
            {
                Count = (int)Session["Count"];
            }

            if (Count == 0)
            {
                Count = 9999999;
            }
         

            return View(W);
        }

        public ActionResult SpisokAllWorks()
        {

            List<ICMO> W = new List<ICMO>();
            List<int> Depts = FindCurrentDepartmentIdArray();
            try
            {
                W = db.ICMO.Where(x => x.FStatus == 1 && x.FQty > x.FCommitQty&& Depts.Contains(x.FWorkShop.Value)).ToList();
            }
            catch
            {

            }

            return View(W);
        }
        public JsonResult AddToPlanWork(int WorkId, string WorkNumber, decimal QTY)
        {
            DateTime D = DateTime.Now.Date;
            int C = 0;
            PlanoviWorks PW = new PlanoviWorks();
            try
            {  
                PW = db.PlanoviWorks.Where(x => x.WorkId == WorkId&& x.Date == D).First(); 
            }
            catch 
            { 
            
            }
           

            if (PW.Id!=0)
            {
                PW.QTY = QTY;
                try
                {
                    db.Entry(PW).State = EntityState.Modified;
                    db.SaveChanges();
                }
                catch
                {
                    return Json("Error");
                }
            }
        else
            {
                try
                {
                    PW.WorkId = WorkId;
                    PW.Poryadok = 1;
                    PW.QTY = QTY;
                    PW.WorkNumber = WorkNumber;
                    PW.Date = D;
                    db.PlanoviWorks.Add(PW);
                    db.SaveChanges();
                }
                catch
                {
                    return Json("Error");
                }
            }

            return Json("Ok");

        }


        [Culture]
        public ActionResult KomplektovkaNZP()
        {
            ViewBag.DefaultStockId = 13689;
            int StockWorkPart = 1;
            if (Session["KomplektovkaStockId"] != null)
            {
                ViewBag.DefaultStockId = (int)Session["KomplektovkaStockId"];
            }

            ViewBag.DefaultDepartmentId = 0;
            if (Session["KomplektovkaDepartmentId"] != null)
            {
                ViewBag.DefaultDepartmentId = (int)Session["KomplektovkaDepartmentId"];
            }

            if (Session["StockWorkPart"] != null)
            {
                StockWorkPart = (int)Session["StockWorkPart"];
            }
            ViewBag.StockWorkPart = StockWorkPart;

            FindAllNomenklaturs();
            CurrentKDWUserModel();
            if (StockWorkPart == 1)
            {
                ViewBag.Stocks = SearchStorages("", false, false, false, true);
            }
            if (StockWorkPart == 2)
            {
                ViewBag.Stocks = SearchStorages("", true, false, false,false);
            }
            if (StockWorkPart == 3)
            {
                ViewBag.Stocks = SearchStorages("", true,true, false,true);
            }
            ViewBag.Departments = SearchAllDepartments();
            return View();
        }

        [Culture]
        public ActionResult KomplektovkaNZPEntries(string PartNumber = "", string WorkNumber="" )
        {
            int StockId = 0;
            int DepartmentId = 0;
            int StockWorkPart = 1;
            DateTime D = DateTime.Now.Date;
            List<int> PW = new List<int>(); 
            List<StockWorks> SW = new List<StockWorks>();
            List<StockWorks> SWAll = new List<StockWorks>();
            List<PPBOMEntry> Entries = new List<PPBOMEntry>();
            List<StockWorkEntrys> SWE = new List<StockWorkEntrys>();
            List<ICInventory> Stocks = new List<ICInventory>();
            List<t_Item> Nomenklaturs = FindAllNomenklaturs();
            int Count = 50; 
            List<int> Items = new List<int>();
            if (Session["KomplektovkaStockId"]!=null)
            {
                StockId = (int) Session["KomplektovkaStockId"];
            }
            if (Session["KomplektovkaDepartmentId"] != null)
            {
                DepartmentId = (int)Session["KomplektovkaDepartmentId"];
            }

            if (Session["StockWorkPart"] != null)
            {
                StockWorkPart = (int)Session["StockWorkPart"];
            }
            ViewBag.StockWorkPart = StockWorkPart;
            try
            {
                if (StockId!=0)
                {
                    Stocks = db.ICInventory.Where(x => x.FStockID == StockId && x.FQty > 0).ToList();
                }
            }
            catch
            {

            }

            try
            {
                //  PlanWorks = db.PlanoviWorks.Where(x => x.Date == D).Include(x => x.ICMO).Where(x => x.ICMO.FWorkShop == DepartmentId).ToList();
                PeremeshenieWorks Way = new PeremeshenieWorks();
                try
                {
                    Way = db.PeremeshenieWorks.Where(x => x.DepartmentId == DepartmentId).First();

                    
                        SWAll = db.StockWorks.Include(x => x.ICMO).Where(x => x.ICMO.FWorkShop == DepartmentId ).Include(x => x.StockWorkEntrys).ToList(); //Находим все работы по этому подразделению
                   if (WorkNumber.Equals("")==false)
                    {
                        SWAll = SWAll.Where(x => x.WorkNumber.Contains(WorkNumber)).ToList();
                    }

                    //Выгружаем все строки чтоб потом сумму перемещения искать
                    List<StockWorkEntrys> AllSWE = new List<StockWorkEntrys>();
                    foreach (var swall in SWAll)
                    {
                        AllSWE.AddRange(swall.StockWorkEntrys.ToList());
                    }
                    
                        SW = SWAll.Where(x => x.DateStart == D && x.Complete == false&& x.ICMO.FWorkShop == DepartmentId).ToList();
                        PW = SW.Select(x => x.WorkId).Distinct().ToList();

                        foreach (var s in SW)
                        {
                        bool go = false;
                        decimal WorkQTY = s.ICMO.FQty;
      
                        if (StockWorkPart == 1 && Way.BuferZona)
                        {
                           
                            s.StockWorkEntrys = s.StockWorkEntrys.Where(x => x.QTYBufer < WorkQTY).ToList();//&&x.SchemaBufer
                            go = true;
                        }
                        

                        if (StockWorkPart == 2&& Way.StockUchastka)
                        {
                            s.StockWorkEntrys = s.StockWorkEntrys.Where(x => x.QTYStock < WorkQTY ).ToList();//&& x.SchemaStock
                            go = true;
                        }
                        if (StockWorkPart == 3 )
                        {
                            s.StockWorkEntrys = s.StockWorkEntrys.Where(x => x.QTYDept < x.QTY).ToList();
                            go = true;
                        }

                        if (!go)
                        {
                            s.StockWorkEntrys = new List<StockWorkEntrys>();
                        }

                        foreach (var swe in s.StockWorkEntrys)
                            {
                                swe.Item = Nomenklaturs.Where(x => x.FItemID == swe.ItemId).First();
                            decimal Peremesheno = 0;
                  
                            try
                            {
                                if (StockWorkPart == 1)
                                {
                                  Peremesheno =  AllSWE.Where(x => x.ItemId == swe.ItemId && x.WorkId == swe.WorkId).Sum(x => x.QTYBufer);
                                    swe.QTYBufer = Peremesheno;
                                    swe.QTY = Math.Round(WorkQTY * swe.Scrap, 3);
                                }
                                if (StockWorkPart == 2)
                                {
                                    Peremesheno = AllSWE.Where(x => x.ItemId == swe.ItemId && x.WorkId == swe.WorkId).Sum(x => x.QTYStock);
                                    swe.QTYStock = Peremesheno;
                                    swe.QTY = Math.Round(WorkQTY * swe.Scrap, 3);
                                }
                                if (StockWorkPart == 3)
                                {
                                    Peremesheno = AllSWE.Where(x => x.ItemId == swe.ItemId && x.WorkId == swe.WorkId).Sum(x => x.QTYDept);
                                    swe.QTYDept = Peremesheno;
                                }

                            }
                            catch
                            {

                            }

                            try
                                {
                                if (StockWorkPart == 1)
                                {
                                    swe.QTYStock = Stocks.Where(x => x.FItemID == swe.ItemId).Sum(x => x.FQty); //Добавить в модель поле количество на складе
                                }
                               // if (StockWorkPart == 2)
                               // {
                               //     swe.QTYStock = swe.QTYBufer; //Добавить в модель поле количество на складе
                               // }
                                if (StockWorkPart == 3)
                                {
                                    swe.QTYStock = AllSWE.Where(x => x.ItemId == swe.ItemId && x.WorkId == swe.WorkId).Sum(x => x.QTYBufer+x.QTYStock); //Считаем общее кол-во на предыдущих шагах
                                }

                            }
                                catch
                                {

                                }

                          

                                if (PartNumber.Equals("") == false)
                                {
                                if (swe.Item.FNumber.Contains(PartNumber))
                                {
                                    SWE.Add(swe);
                                }
                                }
                                else
                                {
                                    if (swe.Item.FNumber.Contains(PartNumber))
                                    {
                                        SWE.Add(swe);
                                    }

                                }
                            }
                        }
                    

                }
                catch
                {

                }

              
              
              //  PW = PlanWorks.Select(x => x.WorkId).Distinct().ToList();
            }
            catch
            {
                
            }
           

        /*    if (PartNumber.Equals("")==false)
            {
              swe.  Nomenklaturs.Where(x => x.FNumber.Contains(PartNumber));
            }
        */

            /*
            try
            {
                Entries = db.PPBOMEntry.Where(x => PW.Contains(x.FICMOInterID)).ToList();
                Items = Entries.Select(x => x.FItemID).Distinct().ToList();
                foreach (var E in Entries)
                {
                    E.t_Item = Nomenklaturs.Where(x => x.FItemID == E.FItemID).First();
                }
            }
            catch
            {

            }
            */
            if (StockId!=0)
            {
                Stocks = db.ICInventory.Where(x => x.FStockID == StockId && x.FQty>0&& Items.Contains(x.FItemID)).ToList();
            }

           /* foreach (StockWorks W in SW)
            {
                foreach (PPBOMEntry E in Entries.Where(x=>x.FICMOInterID==W.WorkId).ToList())
                {
                    E.FQtyMust = 0;
                    try
                    {
                        E.FQtyMust =  Math.Round(E.FQtyScrap * W.QTY,3);
                        if (E.FQtyMust<0)
                        {
                            E.FQtyMust = 0;
                        }

                       
                            
                    }
                    catch
                    {

                    }

                    E.FStockQty = 0;
                    try
                    {

                        E.FStockQty = Stocks.Where(x => x.FItemID == E.FItemID).Sum(x => x.FQty);
                    }
                    catch
                    {

                    }
                }
            }
           */
            // ViewBag.Stocks = SearchStorages();
            //   ViewBag.Prohod = Prohod;
            if (Session["Count"] != null)
            {
                Count = (int)Session["Count"];
            }

            if (Count == 0)
            {
                Count = 9999999;
            }


            return View(SWE.Take(Count).ToList());
        }




        public int GetCount()
        {
            int Count = 500;
            if (Session["Count"] != null)
            {
                Count = (int)Session["Count"];
            }
            return Count;
        }

        [Culture]
        public ActionResult InvVedomost(int Prohod =1)
        {
            ViewBag.DefaultStockId = 13689;
            if (Session["InvVedomostStockId"] != null)
            {
                ViewBag.DefaultStockId = (int) Session["InvVedomostStockId"];
            }

            FindAllNomenklaturs();
            CurrentKDWUserModel();
            ViewBag.Stocks = SearchStorages();
            ViewBag.Prohod = Prohod;
            return View();
        }


        public JsonResult SetCount(int Count)
        {
            if (Count == 0)
            {
                Count = 9999;
            }
            Session["Count"] = Count;
            return Json(Count);
        }


        public ItemView FindLastDvigs(string QRData)
        {
            ItemView I = new ItemView();
            I.FindLastDvig(QRData);
            return I;
        }

        public JsonResult AddQR(string QRData, int StockId, string QTY, int Prohod=2, int EditQR=0 )
        {
            ItemView QR = new ItemView();
            decimal QTYX = 0;
            if (QRData.Equals("") == false&& QTY.Equals("")==false)
            {

                try
                {
                    QTYX = Convert.ToDecimal(QTY.Replace(",", "."));
                }
                catch
                {

                }
                QR = FindLastDvigs(QRData);//QRTrace(QRData);

                if (Prohod == 2)
                {
                    InventSecondQR IQR2 = new InventSecondQR();
                    try
                    {
                        IQR2 = db.InventSecondQR.Where(x => x.QRId == QR.LastDvig.QRID).First();
                       
                    }
                    catch (Exception e)
                    {

                    }
                    if (IQR2.Id == 0)
                    {
                        try
                        {
                            IQR2 = new InventSecondQR();
                            IQR2.ItemId = QR.LastDvig.ItemID;
                            IQR2.QRId = QR.LastDvig.QRID.Value;
                            IQR2.QTY = QTYX;// QR.LastDvig.QTYFact; //пишем количество что проставил 2 проход
                            IQR2.StartDate = DateTime.Now;
                            IQR2.StockID = QR.LastDvig.StockId;
                            IQR2.UserId = FindCurrentKDWUser().Id;
                            db.InventSecondQR.Add(IQR2);
                            db.SaveChanges();
                        }
                        catch
                        {
                            return Json(null);
                        }
                    }
                    else
                    {
                        try
                        { 
                           
                            IQR2.QTY = QTYX;// QR.LastDvig.QTYFact; //пишем количество что проставил 2 проход
                            IQR2.StartDate = DateTime.Now;
                            IQR2.UserId = FindCurrentKDWUser().Id;
                            db.Entry(IQR2).State = EntityState.Modified;
                            db.SaveChanges();
                        }
                        catch
                        {

                        }
                    }

                }
                if (Prohod == 3)
                {
                    InventThirdQR IQR3 = new InventThirdQR();
                    try
                    {
                        IQR3 = db.InventThirdQR.Where(x => x.QRId == QR.LastDvig.QRID).First();

                    }
                    catch (Exception e)
                    {

                    }
                    if (IQR3.Id == 0)
                    {
                        try
                        {
                            IQR3 = new InventThirdQR();
                            IQR3.ItemId = QR.LastDvig.ItemID;
                            IQR3.QRId = QR.LastDvig.QRID.Value;
                            IQR3.QTY = QR.LastDvig.QTYFact;
                            IQR3.StartDate = DateTime.Now;
                            IQR3.StockID = QR.LastDvig.StockId;
                            IQR3.UserId = FindCurrentKDWUser().Id;
                            db.InventThirdQR.Add(IQR3);
                            db.SaveChanges();
                        }
                        catch
                        {
                            return Json(null);
                        }
                    }
                    else
                    {
                        try
                        {

                            IQR3.QTY = QTYX;// QR.LastDvig.QTYFact; //пишем количество что проставил 2 проход
                            IQR3.StartDate = DateTime.Now;
                            IQR3.UserId = FindCurrentKDWUser().Id;
                            db.Entry(IQR3).State = EntityState.Modified;
                            db.SaveChanges();
                        }
                        catch
                        {

                        }
                    }
                }

                if (EditQR>0)
                {

                    EditDvigenie(QR.LastDvig, QTYX);
                    InventQR IQR = new InventQR();
                    try
                    {
                        IQR = db.InventQR.Where(x => x.QRId == QR.LastDvig.QRID).First();
                        IQR.QTY = QTYX;
                        IQR.StartDate = DateTime.Now;
                        IQR.UserId = FindCurrentKDWUser().Id;
                        db.Entry(IQR).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                    catch
                    {

                    }



                }

                return Json(QR.LastDvig.Item.FNumber+";"+QR.LastDvig.StockId);
            }
            return Json(null);
        }

      


        [Culture]
        public ActionResult InvVedomostStocks(int StockId, string PartNumber="", int Prohod=1 )
        {

            ViewBag.Prohod = Prohod;

            Session["InvVedomostStockId"] = StockId;
          
            decimal QTY = 0;
            decimal QTYinSTOCK = 0;
            string StockName = "";
            List<InventVedomost> V = new List<InventVedomost>();
            List<ICInventory> I = new List<ICInventory>();
            List<InventQR> IQR = new List<InventQR>();
            List<InventSecondQR> IQR2 = new List<InventSecondQR>();
            List<InventThirdQR> IQR3 = new List<InventThirdQR>();
            List<t_Item> Items = FindAllNomenklaturs();
            List<int> ItemsPoisk = new List<int>();
            List<NomenklaturaEnterprise> NE = new List<NomenklaturaEnterprise>();
            int Count = 50;
            if (Session["Count"]!=null)
            {
                Count = (int) Session["Count"];
            }

            if (Count==0)
            {
                Count = 9999999;
            }
            
            try
            {
                IQR = db.InventQR.Where(x => x.StockID == StockId).ToList();

            }
            catch
            {

            }

            try
            {
                IQR2 = db.InventSecondQR.Where(x => x.StockID == StockId).ToList();

            }
            catch
            {

            }
            try
            {
                IQR3 = db.InventThirdQR.Where(x => x.StockID == StockId).ToList();

            }
            catch
            {

            }

            if (PartNumber.Equals("") == false)
            {
               
                try
                {
                  ItemsPoisk =  Items.Where(x => x.FNumber.Contains(PartNumber) || x.FName.Contains(PartNumber)).Select(x=>x.FItemID).ToList();
                }
                catch
                {

                }
            }

          try
            {
            
                  var  ii = db.ICInventory.Where(x => x.FStockID == StockId && x.FQty > 0).GroupBy(x => x.FItemID) //.Include(x => x.t_Item).OrderBy(x => x.t_Item.FNumber)
               .Select(g => new
               {
                   ItemId = g.Key,
                 //  Item = new t_Item(),//g.Select(x => x.t_Item).FirstOrDefault(),
                   QTY = g.Sum(x => x.FQty)

               });
/*
                if (CultureRU())
                {
                    try
                    {
                        var Items = ii.Select(x => x.ItemId).ToList();
                        NE = db.NomenklaturaEnterprise.Where(x => Items.Contains(x.KingDeeId.Value)).ToList();
                    }
                    catch
                    {

                    }
                }
*/
                if (ItemsPoisk.Count>0)
                {
                   ii = ii.Where(x => ItemsPoisk.Contains(x.ItemId));
                }
                int Counter = 0;
                foreach (var i in ii)
                {
                    InventVedomost v = new InventVedomost();
                    v.ItemId = i.ItemId;
                    v.QTY = Math.Round(i.QTY,3);
                    try
                    {
                        v.t_Item = Items.Where(x=>x.FItemID==i.ItemId).First();
                    }
                    catch
                    {

                    }
                    /*
                    if (CultureRU())
                    {
                        try
                        {
                            v.t_Item.FName = NE.Where(x=>x.KingDeeId == v.ItemId ).Select(x=>x.RusName).First();
                        }
                        catch
                        {

                        }
                    }
                  */
                   
                        v.QTYFact = 0;
                        try
                        {
                            v.QTYFact = IQR.Where(x => x.ItemId == i.ItemId).Sum(x => x.QTY);
                        }
                        catch
                        {

                        }
              
                    
                   //Проход 2
                        v.QTYProhod2 = 0;
                        try
                        {
                            v.QTYProhod2 = IQR2.Where(x => x.ItemId == i.ItemId).Sum(x => x.QTY);
                        }
                        catch
                        {

                        }
                   

                    //Проход 3
                    v.QTYProhod3 = 0;
                    try
                    {
                        v.QTYProhod3 = IQR3.Where(x => x.ItemId == i.ItemId).Sum(x => x.QTY);
                    }
                    catch
                    {

                    }

                    //Плюсуем и проверяем ограничения на вывод

                    if (Counter <= Count)
                    {
                        V.Add(v);
                        Counter++;
                    }
                    else
                    {
                        break;
                    }


                }

               V = V.OrderBy(x => x.t_Item.FNumber).ToList();
            }
            catch (Exception e)
            {

            }

        


           
       /*     ViewBag.Dates = Dates;
            ViewBag.QTYinQR = QTY;
            ViewBag.QTYinSTOCK = QTYinSTOCK;
            ViewBag.StockName = StockName;
            ViewBag.DvigenieID = QR.LastDvig.Id;
       */
            return View(V);
            // return View();
        }

        public ActionResult SkladskieWorks(string QRData = "")
        {
            DateTime D = DateTime.Now.Date;
            List<StockWorkEntrys> SWE = new List<StockWorkEntrys>();
            List<ICInventory> QTYInStocks = new List<ICInventory>();
            List<int> StocksId = new List<int>();
            List<int> ItemsId = new List<int>();
            List<StockWorksView> SWV = new List<StockWorksView>();
            List<DateTime> Dates = new List<DateTime>();
            decimal QTY = 0;
            decimal QTYinSTOCK = 0;
            string StockName = "";
            ItemView QR = new ItemView();
            if (QRData.Equals("") == false)
            {
                QR = QRTrace(QRData);
              
                if (QR.LastControl.Status==2||QR.LastControl.Status==9)
                {
                    QTY = QR.LastDvig.QTYFact;
                    ViewBag.Control = 1;
                }
                else
                {
                    ViewBag.Control = 0;
                }
                QTYinSTOCK = SearchQTYInStock(QR.LastDvig.StockId.ToString(), QR.LastDvig.Item.FNumber);
                try
                {
                    StockName = QR.LastDvig.Stock.FName;
                        }
                catch
                {

                }
            }

            try
            {
             
                 
                if (QRData.Equals("") == false)
                {
                    SWE = db.StockWorkEntrys.Where(x => x.DateStart > D && x.Complete == false && x.ItemId == QR.Item.FItemID).Include(x => x.Item).Include(x => x.StockWorks).Include(x => x.StockWorks.ICMO).Include(x => x.StockWorks.ICMO.t_Department).Include(x => x.StockWorks.t_Stock).OrderBy(x => x.DateStart).ToList(); //.Include(x => x.t_StockFrom)

                }
                else
                {
                    SWE = db.StockWorkEntrys.Where(x => x.DateStart > D && x.Complete == false).Include(x => x.Item).Include(x => x.StockWorks).Include(x => x.StockWorks.ICMO).Include(x => x.StockWorks.ICMO.t_Department).Include(x => x.StockWorks.t_Stock).OrderBy(x => x.DateStart).ToList();//.Include(x => x.t_StockFrom)

                }

                SWE = SWE.Where(x => x.Item != null).ToList();

                  //  StocksId = SWE.Union(SWE.Select(x => x.ToStock)).Distinct().ToList();//SWE.Select(x => x.FromStock).Union(SWE.Select(x => x.ToStock)).Distinct().ToList();
                ItemsId = SWE.Select(x => x.ItemId).Distinct().ToList();
                QTYInStocks = db.ICInventory.Where(x => StocksId.Contains(x.FStockID) && ItemsId.Contains(x.FItemID)).ToList();
                Dates = SWE.Select(x => x.DateStart).Distinct().ToList() ;
                foreach (var e in SWE)
                {
                    StockWorksView s = new StockWorksView();
                    s.SWE = e;
                    s.QTYFromStock = 0;
                    s.QTYInQR = QTY;
                    s.MAXPeremestit = QTY;
                    s.NugnoPeremestit = s.SWE.QTY - s.SWE.QTYBufer;

                    try
                    {
                      s.QTYFromStock= Math.Round(QTYInStocks.Where(x => x.FItemID == e.ItemId).Sum(x=>x.FQty),3);// && x.FStockID == e.FromStock
                        s.QTYToStock = Math.Round(QTYInStocks.Where(x => x.FItemID == e.ItemId && x.FStockID == e.ToStock).Sum(x => x.FQty),3);
                    }
                    catch
                    {

                    }
                    if (s.MAXPeremestit>s.NugnoPeremestit)
                    {
                        s.MAXPeremestit = s.NugnoPeremestit;
                    }
                    if (s.MAXPeremestit > QTYinSTOCK)
                    {
                        s.MAXPeremestit = QTYinSTOCK;
                    }
                    SWV.Add(s);
                }
            }
            catch
            {

            }
            ViewBag.Dates = Dates;
            ViewBag.QTYinQR = QTY;
            ViewBag.QTYinSTOCK = QTYinSTOCK;
            ViewBag.StockName = StockName;
            ViewBag.DvigenieID = QR.LastDvig.Id;
            return View(SWV);
           // return View();
        }

        public ActionResult ZalivkaWORKS()
        {
            List<string> Result = new List<string>();
            List<string> Errors = new List<string>();
            List<ICMOPROD> ICMOPROD = new List<ICMOPROD>();
            List<PPBOMPROD> BOMProd = new List<PPBOMPROD>();
            List<PPBOMEntryPROD> BOMEProd = new List<PPBOMEntryPROD>();
            List<int> PW = new List<int>();
            List<ICMOPROD> PWPROD = new List<ICMOPROD>();
            DateTime D = DateTime.Now.Date;

            try
            {
                int maxWORKId = db.ICMO.Max(x => x.FInterID);
                int maxBOMId = db.PPBOM.Max(x => x.FInterID);
                int maxBOMEId = db.PPBOMEntry.Max(x => x.FInterID);
                int maxWORKIdProd = ProdDB.ICMaxNum.Where(x => x.FTableName.Equals("ICMO")).First().FMaxNum.Value;
           
                ICMOPROD = ProdDB.ICMO.Where(x => x.FInterID > maxWORKId).ToList();
                BOMProd = ProdDB.PPBOM.Where(x => x.FInterID > maxBOMId).ToList();
                BOMEProd = ProdDB.PPBOMEntry.Where(x => x.FInterID > maxBOMEId).ToList();

              

               ICMaxNum I = db.ICMaxNum.Where(x => x.FTableName.Equals("ICMO")).First();
                if (maxWORKIdProd != I.FMaxNum.Value)
                {
                    try
                    {
                        I.FMaxNum = maxWORKIdProd;

                        db.Entry(I).State = EntityState.Modified;
                        db.SaveChanges();
                        Result.Add("Счетчик WORK теперь = " + I.FMaxNum);
                    }
                    catch (Exception e)
                    {
                        Errors.Add("Не смогли сдвинуть счетчик ICMaxNum по причине " + e.Message);
                    }
                }
                else
                {
                    Result.Add("Счетчик WORK не нуждается в обновлении = " + I.FMaxNum);
                }

            }
            catch (Exception e)
            {

            }

            try
            {
                PW = db.PlanoviWorks.Where(x => x.Date >= D && x.QTY > 0).Select(x => x.WorkId).Distinct().ToList();
                PWPROD = ProdDB.ICMO.Where(x => PW.Contains(x.FInterID)).ToList();
                Result.Add("Необходимо обновить данные по PLANWORK в количестве = " + PWPROD.Count);
            }
            catch
            {
                Errors.Add("Не смогли найти плановые работы за >= текущей даты ");
            }


            if (ICMOPROD.Count > 0)
            {
                Result.Add("Найдено новых новых заданий на производство WORK = " + ICMOPROD.Count);
                foreach (ICMOPROD PP in ICMOPROD)
                {
                    try
                    {
                       ICMO P = new ICMO();
                        P = PriravnatWORKS(PP,true);


                        using (var db2 = new KingDeeDB())
                        {

                            db2.ICMO.Add(P);
                            db2.SaveChanges();
                            Result.Add("Добавлено задание на производство N" + P.FBillNo);
                        }
                    
                 
                    }
                    catch (Exception e)
                    {
                        Errors.Add("Не смогли добавить задание на производство N" + PP.FBillNo + " по ошибке " + e.Message);
                    }

                }
            }
            else
            {
                Result.Add("Новых заданий на производство не найдено!");
            }

            if (PWPROD.Count > 0)
            {
                int NormQTY = 0;
                foreach (var PP in PWPROD)
                {
                    try
                    {
                        ICMO P = new ICMO();
                        P = PriravnatWORKS(PP,false);
                        db.Entry(P).State = EntityState.Modified;
                        db.SaveChanges();
                        NormQTY++;
                    }
                    catch (Exception e)
                    {
                        Errors.Add("Не смогли обновить данные плановой раьоты N" + PP.FBillNo + " по ошибке " + e.Message);
                    }
                }
                Result.Add("Обновили данные работ связанных с плановыми из прода в количестве =" + NormQTY);

            }

            if (BOMProd.Count>0)
            {
                Result.Add("Найдено новых BOM = " + BOMProd.Count);
                foreach (PPBOMPROD PP in BOMProd)
                {
                    try
                    {
                        PPBOM P = new PPBOM();
                        P.FBrNo = PP.FBrNo;
                        P.FInterID = PP.FInterID;
                        P.FBillNo = PP.FBillNo;
                        P.FTranType = PP.FTranType;
                        P.FDate = PP.FDate;
                        P.FBillerID = PP.FBillerID;
                        P.FCheckerID = PP.FCheckerID;
                        P.FCheckDate = PP.FCheckDate;
                        P.FStatus = PP.FStatus;
                        P.FICMOInterID = PP.FICMOInterID;
                        P.FCancellation = PP.FCancellation;
                        P.FItemID = PP.FItemID;
                        P.FUnitID = PP.FUnitID;
                        P.FAuxQty = PP.FAuxQty;
                        P.FType = PP.FType;
                        P.FStockType = PP.FStockType;
                        P.FWorkSHop = PP.FWorkSHop;
                        P.FOrderInterID = PP.FOrderInterID;
                        P.FOrderBillNo = PP.FOrderBillNo;
                        P.FChangeTimes = PP.FChangeTimes;
                        P.FOrderEntryID = PP.FOrderEntryID;
                        P.FPrintCount = PP.FPrintCount;
                        P.FSelTranType = PP.FSelTranType;
                        P.FAuxPropID = PP.FAuxPropID;
                        P.FMultiCheckStatus = PP.FMultiCheckStatus;
                        P.FICMOBillNo = PP.FICMOBillNo;
                        P.FHeadSelfY0227 = PP.FHeadSelfY0227;



                        db.PPBOM.Add(P);
                        db.SaveChanges();
                        Result.Add("Добавлен BOM N" + P.FBillNo);

                    }
                    catch (Exception e)
                    {
                        Errors.Add("Не смогли добавить BOM N" + PP.FBillNo + " по ошибке " + e.Message);
                    }

                }
            }

            if (BOMEProd.Count > 0)
            {
                Result.Add("Найдено новых строк BOM = " + BOMEProd.Count);
                foreach (PPBOMEntryPROD PP in BOMEProd)
                {
                    try
                    {
                        PPBOMEntry P = new PPBOMEntry();
                        P.FBrNo = PP.FBrNo;
                        P.FInterID = PP.FInterID;
                        P.FEntryID = PP.FEntryID;
                        P.FItemID = PP.FItemID;
                        P.FBatchNo = PP.FBatchNo;
                        P.FUnitID = PP.FUnitID;
                        P.FQtyMust = PP.FQtyMust;
                        P.FAuxQtyMust = PP.FAuxQtyMust;
                        P.FMachinePos = PP.FMachinePos;
                        P.FSequenceID = PP.FSequenceID;
                        P.FStockID = PP.FStockID;
                        P.FNote = PP.FNote;
                        P.FSourceEntryID = PP.FSourceEntryID;
                        P.FQtyScrap = PP.FQtyScrap;
                        P.FAuxQtyScrap = PP.FAuxQtyScrap;
                        P.FScrap = PP.FScrap;
                        P.FSendItemDate = PP.FSendItemDate;
                        P.FQtyPick = PP.FQtyPick;
                        P.FAuxQtyPick = PP.FAuxQtyPick;
                        P.FSPID = PP.FSPID;
                        P.FMaterielType = PP.FMaterielType;
                        P.FOperID = PP.FOperID;
                        P.FBackFlush = PP.FBackFlush;
                        P.FMarshalType = PP.FMarshalType;
                        P.FStockType = PP.FStockType;
                        P.FQtyBackFlush = PP.FQtyBackFlush;
                        P.FStockQty = PP.FStockQty;
                        P.FAuxStockQty = PP.FAuxStockQty;
                        P.FAuxQtyLoss = PP.FAuxQtyLoss;
                        P.FQtyLoss = PP.FQtyLoss;
                        P.FBOMInPutQTY = PP.FBOMInPutQTY;
                        P.FWIPQTY = PP.FWIPQTY;
                        P.FWIPAuxQTY = PP.FWIPAuxQTY;
                        P.FLockFlag = PP.FLockFlag;
                        P.FSelDiscardQty = PP.FSelDiscardQty;
                        P.FSelDiscardAuxQty = PP.FSelDiscardAuxQty;
                        P.FDiscardQty = PP.FDiscardQty;
                        P.FDiscardAuxQty = PP.FDiscardAuxQty;
                        P.FBomInputAuxQty = PP.FBomInputAuxQty;
                        P.FICItemReplaceID = PP.FICItemReplaceID;
                        P.FQtySupply = 0;//PP.FQtySupply;
                        P.FAuxQtySupply = 0;// PP.FAuxQtySupply;
                        P.FOperSN = PP.FOperSN;
                        P.FBomInterID = PP.FBomInterID;
                        P.FSelTransLateAuxQty = PP.FSelTransLateAuxQty;
                        P.FSelTransLateQty = PP.FSelTransLateQty;
                        P.FTransLateAuxQty = PP.FTransLateAuxQty;
                        P.FTransLateQty = PP.FTransLateQty;
                        P.FICMOInterID = PP.FICMOInterID;
                        P.FChangeTimes = PP.FChangeTimes;
                        P.FPositionNo = PP.FPositionNo;
                        P.FItemSize = PP.FItemSize;
                        P.FItemSuite = PP.FItemSuite;
                        P.FNote1 = PP.FNote1;
                        P.FNote2 = PP.FNote2;
                        P.FNote3 = PP.FNote3;
                        P.FPlanMode = PP.FPlanMode;
                        P.FMTONo = PP.FMTONo;
                        P.FOrderEntryID = PP.FOrderEntryID;
                        P.FQtyConsume = PP.FQtyConsume;
                        P.FAuxQtyConsume = PP.FAuxQtyConsume;
                        P.FDetailID = PP.FDetailID;
                        P.FItemConvertType = PP.FItemConvertType;
                        P.FSubsBillEntryID = PP.FSubsBillEntryID;
                        P.FBomDetailID = PP.FBomDetailID;
                        P.FICSubsID = PP.FICSubsID;
                        P.FICSubsEntryID = PP.FICSubsEntryID;
                        P.FIsKeyItem = PP.FIsKeyItem;
                        P.FPriorityID = PP.FPriorityID;
                        P.FAuxPropID = PP.FAuxPropID;
                        P.FOrderBOMInterID = PP.FOrderBOMInterID;
                        P.FOrderBOMEntryID = PP.FOrderBOMEntryID;
                        P.FPlanQtyReq = PP.FPlanQtyReq;
                        P.FPTLQty = PP.FPTLQty;
                        P.FSelDiscardStockInQty = PP.FSelDiscardStockInQty;
                        P.FSelDiscardStockInAuxQty = PP.FSelDiscardStockInAuxQty;




                        db.PPBOMEntry.Add(P);
                        db.SaveChanges();
                        Result.Add("Добавлена строка BOME N" + P.FEntryID);

                    }
                    catch (Exception e)
                    {
                        Errors.Add("Не смогли добавить строку бома N" +PP.FInterID+" строка "+ PP.FEntryID + " по ошибке " + e.Message);
                    }

                }
            }


            ViewBag.Result = Result;
            ViewBag.Errors = Errors;

            return View();
        }

        public ICMO PriravnatWORKS(ICMOPROD PP, bool add = true)
        {
            ICMO P = new ICMO();
            try
            {
                
                P.FInterID = PP.FInterID;
                P.FBrNo = PP.FBrNo;
                P.FTranType = PP.FTranType;
                P.FBillNo = PP.FBillNo;
                P.FStatus = PP.FStatus;
                P.FMRP = PP.FMRP;
                P.FType = PP.FType;
                P.FWorkShop = PP.FWorkShop;
                P.FItemID = PP.FItemID;
                P.FQty = PP.FQty;

                if (add) //Если меняем то 
                {
                    P.FCommitQty = PP.FCommitQty;
                    P.FPlanCommitDate = PP.FPlanCommitDate;
                    P.FCommitDate = PP.FCommitDate;
                    P.FAuxCommitQty = PP.FAuxCommitQty;
                    P.FClosed = PP.FClosed;
                    P.FStockQty = PP.FStockQty;
                    P.FAuxStockQty = PP.FAuxStockQty;

                }
                P.FPlanFinishDate = PP.FPlanFinishDate;
                P.FConveyerID = PP.FConveyerID;
            
                P.FCheckerID = PP.FCheckerID;
                P.FCheckDate = PP.FCheckDate;
                P.FRequesterID = PP.FRequesterID;
                P.FBillerID = PP.FBillerID;
                P.FSourceEntryID = PP.FSourceEntryID;
          
                P.FNote = PP.FNote;
                P.FUnitID = PP.FUnitID;
                P.FAuxQty = PP.FAuxQty;

                P.FOrderInterID = PP.FOrderInterID;
                P.FPPOrderInterID = PP.FPPOrderInterID;
                P.FParentInterID = PP.FParentInterID;
                P.FCancellation = PP.FCancellation;
                P.FSupplyID = PP.FSupplyID;
                P.FQtyFinish = PP.FQtyFinish;
                P.FQtyScrap = PP.FQtyScrap;
                P.FQtyForItem = PP.FQtyForItem;
                P.FQtyLost = PP.FQtyLost;
                P.FPlanIssueDate = PP.FPlanIssueDate;
                P.FRoutingID = PP.FRoutingID;
                P.FStartDate = PP.FStartDate;
                P.FFinishDate = PP.FFinishDate;
                P.FAuxQtyFinish = PP.FAuxQtyFinish;
                P.FAuxQtyScrap = PP.FAuxQtyScrap;
                P.FAuxQtyForItem = PP.FAuxQtyForItem;
                P.FAuxQtyLost = PP.FAuxQtyLost;
                P.FMrpClosed = PP.FMrpClosed;
                P.FBomInterID = PP.FBomInterID;
                P.FQtyPass = PP.FQtyPass;
                P.FAuxQtyPass = PP.FAuxQtyPass;
                P.FQtyBack = PP.FQtyBack;
                P.FAuxQtyBack = PP.FAuxQtyBack;
                P.FFinishTime = PP.FFinishTime;
                P.FReadyTIme = PP.FReadyTIme;
                P.FTaskID = PP.FTaskID;
                P.FWorkTypeID = PP.FWorkTypeID;
                P.FCostObjID = PP.FCostObjID;
   
                P.FSuspend = PP.FSuspend;
                P.FProjectNO = PP.FProjectNO;
                P.FProductionLineID = PP.FProductionLineID;
                P.FReleasedQty = PP.FReleasedQty;
                P.FReleasedAuxQty = PP.FReleasedAuxQty;
                P.FUnScheduledQty = PP.FUnScheduledQty;
                P.FUnScheduledAuxQty = PP.FUnScheduledAuxQty;
                P.FSubEntryID = PP.FSubEntryID;
                P.FScheduleID = PP.FScheduleID;
                P.FPlanOrderInterID = PP.FPlanOrderInterID;
                P.FProcessPrice = PP.FProcessPrice;
                P.FCustID = PP.FCustID;



                P.FCheckDate = PP.FCheckDate;
                P.FMultiCheckLevel1 = PP.FMultiCheckLevel1;
                P.FMultiCheckLevel2 = PP.FMultiCheckLevel2;
                P.FMultiCheckLevel3 = PP.FMultiCheckLevel3;
                P.FMultiCheckDate1 = PP.FMultiCheckDate1;
                P.FMultiCheckDate2 = PP.FMultiCheckDate2;
                P.FMultiCheckDate3 = PP.FMultiCheckDate3;
                P.FMultiCheckDate4 = PP.FMultiCheckDate4;
                P.FMultiCheckDate5 = PP.FMultiCheckDate5;
                P.FMultiCheckDate6 = PP.FMultiCheckDate6;

                P.FConfirmerID = PP.FConfirmerID;
                P.FConfirmDate = PP.FConfirmDate;
                P.FCloseDate = PP.FCloseDate;
                P.FMTONo = PP.FMTONo;
                P.FFinClosedate = PP.FFinClosedate;
                P.FStockFlag = PP.FStockFlag;
                P.FStartFlag = PP.FStartFlag;
                P.FVchBillNo = PP.FVchBillNo;
                P.FVchInterID = PP.FVchInterID;
                P.FCardClosed = PP.FCardClosed;
                P.FPlanCategory = PP.FPlanCategory;
                P.FBomCategory = PP.FBomCategory;
                P.FSourceTranType = PP.FSourceTranType;
                P.FSourceInterId = PP.FSourceInterId;
                P.FSourceBillNo = PP.FSourceBillNo;
                P.FResourceID = PP.FResourceID;
                P.FAddInterID = PP.FAddInterID;
                P.FOrderBOMEntryID = PP.FOrderBOMEntryID;
                P.FStartTimePDA = PP.FStartTimePDA;
                P.FGMPBatchNo = PP.FGMPBatchNo;
                P.FAPSImported = PP.FAPSImported;


            

            }
            catch
            {

            }
            return P;

        }
    

    }
}
